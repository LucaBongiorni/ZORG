diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/build/vs/pjproject-vs8-common-defaults.vsprops zorg/build/vs/pjproject-vs8-common-defaults.vsprops
--- original/build/vs/pjproject-vs8-common-defaults.vsprops	2009-04-29 17:30:38.994109000 +0200
+++ zorg/build/vs/pjproject-vs8-common-defaults.vsprops	2010-11-26 17:09:48.316177000 +0100
@@ -11,6 +11,8 @@
 		BrowseInformation="1"
 		WarningLevel="4"
 		CompileAs="0"
+		PreprocessorDefinitions="PJ_HAS_STDINT_H=1"
+		AdditionalIncludeDirectories="$(SolutionDir)build\vs"
 	/>
 	<Tool
 		Name="VCLibrarianTool"
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/build/vs/stdbool.h zorg/build/vs/stdbool.h
--- original/build/vs/stdbool.h	1970-01-01 01:00:00.000000000 +0100
+++ zorg/build/vs/stdbool.h	2010-11-26 17:09:48.316177000 +0100
@@ -0,0 +1,15 @@
+#ifndef STDBOOL_H_
+#define STDBOOL_H_
+
+#ifdef __cplusplus
+typedef bool _Bool;
+#define __bool_true_false_are_defined 0
+#else
+typedef char _Bool;
+#define bool _Bool
+#define false 0
+#define true 1
+#define __bool_true_false_are_defined 1
+#endif
+
+#endif
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/build/vs/stdint.h zorg/build/vs/stdint.h
--- original/build/vs/stdint.h	1970-01-01 01:00:00.000000000 +0100
+++ zorg/build/vs/stdint.h	2010-11-29 19:01:21.977396000 +0100
@@ -0,0 +1,223 @@
+#ifndef STDINT_H_
+#define STDINT_H_
+
+typedef __int8 int8_t;
+typedef __int16 int16_t;
+typedef __int32 int32_t;
+#if _INTEGRAL_MAX_BITS >= 64
+typedef __int64 int64_t;
+#endif
+typedef unsigned __int8 uint8_t;
+typedef unsigned __int16 uint16_t;
+typedef unsigned __int32 uint32_t;
+#if _INTEGRAL_MAX_BITS >= 64
+typedef unsigned __int64 uint64_t;
+#endif
+
+typedef __int8 int_least8_t;
+typedef __int16 int_least16_t;
+typedef __int32 int_least32_t;
+#if _INTEGRAL_MAX_BITS >= 64
+typedef __int64 int_least64_t;
+#endif
+typedef unsigned __int8 uint_least8_t;
+typedef unsigned __int16 uint_least16_t;
+typedef unsigned __int32 uint_least32_t;
+#if _INTEGRAL_MAX_BITS >= 64
+typedef unsigned __int64 uint_least64_t;
+#endif
+
+typedef __int8 int_fast8_t;
+typedef __int16 int_fast16_t;
+typedef __int32 int_fast32_t;
+#if _INTEGRAL_MAX_BITS >= 64
+typedef __int64 int_fast64_t;
+#endif
+typedef unsigned __int8 uint_fast8_t;
+typedef unsigned __int16 uint_fast16_t;
+typedef unsigned __int32 uint_fast32_t;
+#if _INTEGRAL_MAX_BITS >= 64
+typedef unsigned __int64 uint_fast64_t;
+#endif
+
+#if !defined(_W64)
+#if !defined(__midl) && (defined(_X86_) || defined(_M_IX86)) && _MSC_VER >= 1300
+#define _W64 __w64
+#else
+#define _W64
+#endif
+#endif
+
+#ifndef _INTPTR_T_DEFINED
+#ifdef _WIN64
+typedef __int64 intptr_t;
+#else
+typedef _W64 int intptr_t;
+#endif
+#define _INTPTR_T_DEFINED
+#endif
+
+#ifndef _UINTPTR_T_DEFINED
+#ifdef _WIN64
+typedef unsigned __int64 uintptr_t;
+#else
+typedef _W64 unsigned int uintptr_t;
+#endif
+#define _UINTPTR_T_DEFINED
+#endif
+
+#if _INTEGRAL_MAX_BITS >= 64
+typedef __int64 intmax_t;
+typedef unsigned __int64 uintmax_t;
+#else
+typedef int intmax_t;
+typedef unsigned int uintmax_t;
+#endif
+
+#define INT8_MIN -128
+#define INT8_MAX 127
+#define UINT8_MAX 255
+
+#define INT16_MIN -32768
+#define INT16_MAX 32767
+#define UINT16_MAX 65536
+
+#define INT32_MIN -2147483648
+#define INT32_MAX 2147483647
+#define UINT32_MAX 4294967295
+
+#if _INTEGRAL_MAX_BITS >= 64
+#define INT64_MIN -9223372036854775808i64
+#define INT64_MAX 9223372036854775807i64
+#define UINT64_MAX 18446744073709551615ui64
+#endif
+
+#define INT_LEAST8_MIN -128
+#define INT_LEAST8_MAX 127
+#define UINT_LEAST8_MAX 255
+
+#define INT_LEAST16_MIN -32768
+#define INT_LEAST16_MAX 32767
+#define UINT_LEAST16_MAX 65536
+
+#define INT_LEAST32_MIN -2147483648
+#define INT_LEAST32_MAX 2147483647
+#define UINT_LEAST32_MAX 4294967295
+
+#if _INTEGRAL_MAX_BITS >= 64
+#define INT_LEAST64_MIN -9223372036854775808i64
+#define INT_LEAST64_MAX 9223372036854775807i64
+#define UINT_LEAST64_MAX 18446744073709551615ui64
+#endif
+
+#define INT_FAST8_MIN -128
+#define INT_FAST8_MAX 127
+#define UINT_FAST8_MAX 255
+
+#define INT_FAST16_MIN -32768
+#define INT_FAST16_MAX 32767
+#define UINT_FAST16_MAX 65536
+
+#define INT_FAST32_MIN -2147483648
+#define INT_FAST32_MAX 2147483647
+#define UINT_FAST32_MAX 4294967295
+
+#if _INTEGRAL_MAX_BITS >= 64
+#define INT_FAST64_MIN -9223372036854775808i64
+#define INT_FAST64_MAX 9223372036854775807i64
+#define UINT_FAST64_MAX 18446744073709551615ui64
+#endif
+
+#ifndef INTPTR_MIN
+#ifdef _WIN64
+#define INTPTR_MIN -9223372036854775808i64
+#else
+#define INTPTR_MIN -2147483648
+#endif
+#endif
+
+#ifndef INTPTR_MAX
+#ifdef _WIN64
+#define INTPTR_MAX 9223372036854775807i64
+#else
+#define INTPTR_MAX 2147483647
+#endif
+#endif
+
+#ifndef UINTPTR_MAX
+#ifdef _WIN64
+#define UINTPTR_MAX 18446744073709551615ui64
+#else
+#define UINTPTR_MAX 4294967295
+#endif
+#endif
+
+#if _INTEGRAL_MAX_BITS >= 64
+#define INTMAX_MIN -9223372036854775808i64
+#define INTMAX_MAX 9223372036854775807i64
+#define UINTMAX_MAX 18446744073709551615ui64
+#else
+#define INTMAX_MIN -2147483648
+#define INTMAX_MAX 2147483647
+#define UINTMAX_MAX 4294967295
+#endif
+
+#ifndef PTRDIFF_MIN
+#ifdef _WIN64
+#define PTRDIFF_MIN -9223372036854775808i64
+#else
+#define PTRDIFF_MIN -2147483648
+#endif
+#endif
+
+#ifndef PTRDIFF_MAX
+#ifdef _WIN64
+#define PTRDIFF_MAX 9223372036854775807i64
+#else
+#define PTRDIFF_MAX 2147483647
+#endif
+#endif
+
+#define SIG_ATOMIC_MIN -2147483648
+#define SIG_ATOMIC_MAX 2147483647
+
+#if 0
+#ifdef _WIN64
+#define SIZE_MAX 18446744073709551615ui64
+#else
+#define SIZE_MAX 4294967295
+#endif
+#endif
+
+#ifndef WCHAR_MIN
+#define WCHAR_MIN 0
+#endif
+
+#if 0
+#ifndef WCHAR_MAX
+#define WCHAR_MAX 65535
+#endif
+#endif
+
+#define WINT_MIN 0
+#define WINT_MAX 65535
+
+#define INT8_C(V_) V_ ## i8
+#define INT16_C(V_) V_ ## i16
+#define INT32_C(V_) V_ ## i32
+#define INT64_C(V_) V_ ## i64
+
+#define UINT8_C(V_) V_ ## ui8
+#define UINT16_C(V_) V_ ## ui16
+#define UINT32_C(V_) V_ ## ui32
+#define UINT64_C(V_) V_ ## ui64
+
+#if _INTEGRAL_MAX_BITS >= 64
+#define INTMAX_C(V_) V_ ## i64
+#define UINTMAX_C(V_) V_ ## ui64
+#else
+#define INTMAX_C(V_) V_ ## i32
+#define UINTMAX_C(V_) V_ ## ui32
+#endif
+
+#endif
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/build.symbian/libsrtp.mmp zorg/build.symbian/libsrtp.mmp
--- original/build.symbian/libsrtp.mmp	2010-01-06 09:34:41.082262000 +0100
+++ zorg/build.symbian/libsrtp.mmp	2010-11-26 16:38:28.339842000 +0100
@@ -41,6 +41,7 @@
 //SOURCE crypto\rng\rand_linux_kernel.c
 SOURCE crypto\rng\rand_source.c
 SOURCE pjlib\srtp_err.c
+SOURCE srtp\ekt.c
 SOURCE srtp\srtp.c
 SOURCE tables\aes_tables.c
 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/pjlib/build/pjlib.vcproj zorg/pjlib/build/pjlib.vcproj
--- original/pjlib/build/pjlib.vcproj	2010-02-24 06:43:34.789707000 +0100
+++ zorg/pjlib/build/pjlib.vcproj	2010-11-25 17:53:01.890113000 +0100
@@ -4287,7 +4287,6 @@
 				</FileConfiguration>
 				<FileConfiguration
 					Name="Release|Win32"
-					ExcludedFromBuild="true"
 					>
 					<Tool
 						Name="VCCLCompilerTool"
@@ -4403,7 +4402,6 @@
 				</FileConfiguration>
 				<FileConfiguration
 					Name="Release-Dynamic|Win32"
-					ExcludedFromBuild="true"
 					>
 					<Tool
 						Name="VCCLCompilerTool"
@@ -4519,7 +4517,6 @@
 				</FileConfiguration>
 				<FileConfiguration
 					Name="Release-Static|Win32"
-					ExcludedFromBuild="true"
 					>
 					<Tool
 						Name="VCCLCompilerTool"
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/pjlib/include/pj/compat/os_win32.h zorg/pjlib/include/pj/compat/os_win32.h
--- original/pjlib/include/pj/compat/os_win32.h	2009-11-10 05:30:46.465178000 +0100
+++ zorg/pjlib/include/pj/compat/os_win32.h	2010-11-26 17:09:48.316177000 +0100
@@ -45,7 +45,6 @@
 #define PJ_HAS_SETJMP_H		    1
 #define PJ_HAS_STDARG_H		    1
 #define PJ_HAS_STDDEF_H		    1
-#undef  PJ_HAS_STDINT_H
 #define PJ_HAS_STDIO_H		    1
 #define PJ_HAS_STDLIB_H		    1
 #define PJ_HAS_STRING_H		    1
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/pjmedia/docs/doxygen.cfg zorg/pjmedia/docs/doxygen.cfg
--- original/pjmedia/docs/doxygen.cfg	2010-09-20 08:13:02.390759000 +0200
+++ zorg/pjmedia/docs/doxygen.cfg	2010-11-29 17:55:30.585216000 +0100
@@ -854,6 +854,7 @@
 			 PJ_HAS_EVENT_OBJ=1 \
 			 PJ_HAS_TCP=1 \
 			 PJMEDIA_HAS_SRTP=1 \
+			 PJMEDIA_HAS_ZRTP=1 \
 			 PJMEDIA_STREAM_ENABLE_KA=1
 
 # If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/pjmedia/include/pjmedia/config.h zorg/pjmedia/include/pjmedia/config.h
--- original/pjmedia/include/pjmedia/config.h	2010-10-14 10:30:57.572301000 +0200
+++ zorg/pjmedia/include/pjmedia/config.h	2010-11-29 17:34:48.400198000 +0100
@@ -769,6 +769,30 @@
 
 
 /**
+ * Enable support for ZRTP media transport. This will require linking
+ * with libzorg from the third_party directory.
+ *
+ * By default it is disabled.
+ */
+#ifndef PJMEDIA_HAS_ZRTP
+#   define PJMEDIA_HAS_ZRTP			    0
+#endif
+
+
+#if (PJMEDIA_HAS_ZRTP == 1) 
+
+/**
+ * Masquerade ZRTP packets as regular RTP packets. Masquerading can make
+ * PJSIP incompatible with compliant ZRTP clients, so even if configured
+ * it's still disabled by default.
+ */
+#ifndef PJMEDIA_ZRTP_MASQUERADE
+#   define PJMEDIA_ZRTP_MASQUERADE 1
+#endif
+
+#endif
+
+/**
  * Enable support to handle codecs with inconsistent clock rate
  * between clock rate in SDP/RTP & the clock rate that is actually used.
  * This happens for example with G.722 and MPEG audio codecs.
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/pjmedia/include/pjmedia/errno.h zorg/pjmedia/include/pjmedia/errno.h
--- original/pjmedia/include/pjmedia/errno.h	2008-12-23 18:27:53.128213000 +0100
+++ zorg/pjmedia/include/pjmedia/errno.h	2010-11-29 17:34:48.400198000 +0100
@@ -58,7 +58,7 @@
 #define PJMEDIA_ERRNO_FROM_PORTAUDIO(err)   ((int)PJMEDIA_PORTAUDIO_ERRNO_START-err)
 
 
-#if defined(PJMEDIA_HAS_SRTP) && (PJMEDIA_HAS_SRTP != 0)
+#if (defined(PJMEDIA_HAS_SRTP) && (PJMEDIA_HAS_SRTP != 0)) || (defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0))
 
  /**
  * Mapping from LibSRTP error codes to pjmedia error space.
@@ -73,6 +73,32 @@
 
 #endif
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+
+/**
+ * Mapping from ZRTP protocol error codes to PJMEDIA error space.
+ */
+#define PJMEDIA_ZRTPPROTO_ERRNO_START (PJMEDIA_ERRNO_END-10800)
+#define PJMEDIA_ZRTPPROTO_ERRNO_END   (PJMEDIA_ZRTPPROTO_ERRNO_START + 600 - 1)
+
+/**
+ * Convert ZRTP protocol error code to PJMEDIA error code.
+ */
+#define PJMEDIA_ERRNO_FROM_ZRTPPROTO(err) (PJMEDIA_ZRTPPROTO_ERRNO_START+err)
+
+/**
+ * Mapping from internal ZRTP library error codes to PJMEDIA error space.
+ */
+#define PJMEDIA_ZRTPLIB_ERRNO_START (PJMEDIA_ERRNO_END-11000)
+#define PJMEDIA_ZRTPLIB_ERRNO_END   (PJMEDIA_ZRTPLIB_ERRNO_START + 200 - 1)
+
+/**
+ * Convert internal ZRTP library error code to PJMEDIA error code.
+ */
+#define PJMEDIA_ERRNO_FROM_ZRTPLIB(err) (PJMEDIA_ZRTPLIB_ERRNO_START+err)
+
+#endif
+
 /************************************************************
  * GENERIC/GENERAL PJMEDIA ERRORS
  ***********************************************************/
@@ -602,6 +628,79 @@
 #endif /* PJMEDIA_HAS_SRTP */
 
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+/************************************************************
+ * ZRTP TRANSPORT ERRORS
+ ***********************************************************/
+/**
+ * @hideinitializer
+ * ZRTP library is not initialized.
+ */
+#define PJMEDIA_ZRTP_ENOTINITIALIZED (PJMEDIA_ERRNO_START+230)   /* 220230 */
+/**
+ * @hideinitializer
+ * ZRTP profile is not well-formed.
+ */
+#define PJMEDIA_ZRTP_EINVALIDPROFILE (PJMEDIA_ERRNO_START+231)   /* 220231 */
+/**
+ * @hideinitializer
+ * ZRTP session could not be created.
+ */
+#define PJMEDIA_ZRTP_ESESSIONFAIL    (PJMEDIA_ERRNO_START+232)   /* 220232 */
+/**
+ * @hideinitializer
+ * ZRTP stream could not be attached.
+ */
+#define PJMEDIA_ZRTP_ESTREAMFAIL     (PJMEDIA_ERRNO_START+233)   /* 220233 */
+/**
+ * @hideinitializer
+ * ZRTP stream could not be started.
+ */
+#define PJMEDIA_ZRTP_ESTREAMSTARTFAIL  (PJMEDIA_ERRNO_START+234) /* 220234 */
+/**
+ * @hideinitializer
+ * ZRTP stream could not be secured.
+ */
+#define PJMEDIA_ZRTP_ESTREAMSECUREFAIL (PJMEDIA_ERRNO_START+235) /* 220235 */
+/**
+ * @hideinitializer
+ * ZRTP peer requires cryptography but local side has it disabled.
+ */
+#define PJMEDIA_ZRTP_ENEEDSCRYPTO   (PJMEDIA_ERRNO_START+236)    /* 220236 */
+/**
+ * @hideinitializer
+ * 
+ */
+#define PJMEDIA_ZRTP_EHASH (PJMEDIA_ERRNO_START+237)             /* 220237 */
+/**
+ * @hideinitializer
+ * 
+ */
+#define PJMEDIA_ZRTP_ECIPHER (PJMEDIA_ERRNO_START+238)           /* 220238 */
+/**
+ * @hideinitializer
+ * 
+ */
+#define PJMEDIA_ZRTP_EAUTH (PJMEDIA_ERRNO_START+239)             /* 220239 */
+/**
+ * @hideinitializer
+ * 
+ */
+#define PJMEDIA_ZRTP_EPK (PJMEDIA_ERRNO_START+240)               /* 220240 */
+/**
+ * @hideinitializer
+ * 
+ */
+#define PJMEDIA_ZRTP_ESAS (PJMEDIA_ERRNO_START+241)              /* 220241 */
+/**
+ * @hideinitializer
+ * 
+ */
+#define PJMEDIA_ZRTP_EPROFILE (PJMEDIA_ERRNO_START+242)          /* 220242 */
+
+#endif /* PJMEDIA_HAS_ZRTP */
+
+
 /**
  * Get error message for the specified error code. Note that this
  * function is only able to decode PJMEDIA specific error code.
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/pjmedia/include/pjmedia/transport.h zorg/pjmedia/include/pjmedia/transport.h
--- original/pjmedia/include/pjmedia/transport.h	2009-10-14 15:13:18.413475000 +0200
+++ zorg/pjmedia/include/pjmedia/transport.h	2010-11-29 17:34:48.400198000 +0100
@@ -430,6 +430,13 @@
      */
     PJMEDIA_TRANSPORT_TYPE_SRTP,
 
+    /** 
+     * Media transport ZRTP, this transport is actually security adapter to be
+     * stacked with other transport to enable encryption on the underlying
+     * transport.
+     */
+    PJMEDIA_TRANSPORT_TYPE_ZRTP,
+
     /**
      * Start of user defined transport.
      */
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/pjmedia/include/pjmedia/transport_zrtp.h zorg/pjmedia/include/pjmedia/transport_zrtp.h
--- original/pjmedia/include/pjmedia/transport_zrtp.h	1970-01-01 01:00:00.000000000 +0100
+++ zorg/pjmedia/include/pjmedia/transport_zrtp.h	2010-11-30 14:16:05.752384000 +0100
@@ -0,0 +1,584 @@
+/* $Id$ */
+/*
+ * zrtp.org is a ZRTP protocol implementation  
+ * Copyright (C) 2010 - PrivateWave Italia S.p.A.
+ *  
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *  
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *  
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *  
+ * For more information, please contact PrivateWave Italia S.p.A. at
+ * address zorg@privatewave.com or http://www.privatewave.com
+ */
+
+#ifndef __PJMEDIA_TRANSPORT_ZRTP_H__
+#define __PJMEDIA_TRANSPORT_ZRTP_H__
+
+/**
+ * @file transport_zrtp.h
+ * @brief ZRTP transport.
+ */
+
+#include <pjmedia/transport.h>
+#include <pj/timer.h>
+
+/**
+ * @defgroup PJMEDIA_TRANSPORT_ZRTP ZRTP Media Transport
+ * @ingroup PJMEDIA_TRANSPORT
+ * @brief Media transport adapter to add ZRTP feature to existing transports
+ */
+
+PJ_BEGIN_DECL
+
+#define PJMEDIA_ZRTP_MAX_COMP_COUNT 7
+#define PJMEDIA_ZRTP_CLIENT_ID_LEN 16
+#define PJMEDIA_ZRTP_ZID_STRING_LEN 24
+#define PJMEDIA_ZRTP_MAX_SAS_STRING_LEN 11
+#define PJMEDIA_ZRTP_MAX_AUTH_TAG_LEN 12
+
+typedef struct pjmedia_zid_t {
+    pj_uint8_t data[12];
+} pjmedia_zid_t;
+
+typedef enum pjmedia_zrtp_protocol_error {
+    PJMEDIA_ZRTP_ERROR_NONE = 0,
+    PJMEDIA_ZRTP_ERROR_MALFORMED_PACKET = 0x10,
+    PJMEDIA_ZRTP_ERROR_CRITICAL_SOFTWARE_ERROR = 0x20,
+    PJMEDIA_ZRTP_ERROR_UNSUPPORTED_ZRTP_VERSION = 0x30,
+    PJMEDIA_ZRTP_ERROR_HELLO_COMPONENTS_MISMATCH = 0x40,
+    PJMEDIA_ZRTP_ERROR_HASH_TYPE_NOT_SUPPORTED = 0x51,
+    PJMEDIA_ZRTP_ERROR_CIPHER_TYPE_NOT_SUPPORTED = 0x52,
+    PJMEDIA_ZRTP_ERROR_PUBLIC_KEY_EXCHANGE_NOT_SUPPORTED = 0x53,
+    PJMEDIA_ZRTP_ERROR_SRTP_AUTH_TAG_NOT_SUPPORTED = 0x54,
+    PJMEDIA_ZRTP_ERROR_SAS_RENDERING_SCHEME_NOT_SUPPORTED = 0x55,
+    PJMEDIA_ZRTP_ERROR_NO_SHARED_SECRET_AVAILABLE = 0x56,
+    PJMEDIA_ZRTP_ERROR_BAD_PV = 0x61,
+    PJMEDIA_ZRTP_ERROR_HVI_MISMATCH = 0x62,
+    PJMEDIA_ZRTP_ERROR_RELAYED_SAS_FROM_UNTRUSTED_MITM = 0x63,
+    PJMEDIA_ZRTP_ERROR_BAD_CONFIRM_MAC = 0x70,
+    PJMEDIA_ZRTP_ERROR_NONCE_REUSE = 0x80,
+    PJMEDIA_ZRTP_ERROR_ZID_COLLISION = 0x90,
+    PJMEDIA_ZRTP_ERROR_SSRC_COLLISION = 0x91,
+    PJMEDIA_ZRTP_ERROR_SERVICE_UNAVAILABLE = 0xA0,
+    PJMEDIA_ZRTP_ERROR_PROTOCOL_TIMEOUT = 0xB0,
+    PJMEDIA_ZRTP_ERROR_CLEAR_DISALLOWED = 0x100
+} pjmedia_zrtp_protocol_error;
+
+typedef enum pjmedia_zrtp_hash_type {
+    PJMEDIA_ZRTP_HASH_S256 = 1,
+    PJMEDIA_ZRTP_HASH_S384,
+    PJMEDIA_ZRTP_HASH_N256,
+    PJMEDIA_ZRTP_HASH_N384
+} pjmedia_zrtp_hash_type;
+
+typedef enum pjmedia_zrtp_cipher_type {
+    PJMEDIA_ZRTP_CIPHER_AES1 = 1,
+    PJMEDIA_ZRTP_CIPHER_AES2,
+    PJMEDIA_ZRTP_CIPHER_AES3,
+    PJMEDIA_ZRTP_CIPHER_2FS1,
+    PJMEDIA_ZRTP_CIPHER_2FS2,
+    PJMEDIA_ZRTP_CIPHER_2FS3,
+    PJMEDIA_ZRTP_CIPHER_CAM1,
+    PJMEDIA_ZRTP_CIPHER_CAM2,
+    PJMEDIA_ZRTP_CIPHER_CAM3
+} pjmedia_zrtp_cipher_type;
+
+typedef enum pjmedia_zrtp_auth_type {
+    PJMEDIA_ZRTP_AUTH_HS32 = 1,
+    PJMEDIA_ZRTP_AUTH_HS80,
+    PJMEDIA_ZRTP_AUTH_SK32,
+    PJMEDIA_ZRTP_AUTH_SK80
+} pjmedia_zrtp_auth_type;
+
+typedef enum pjmedia_zrtp_pk_type {
+    PJMEDIA_ZRTP_PK_DH3K = 1,
+    PJMEDIA_ZRTP_PK_DH2K,
+    PJMEDIA_ZRTP_PK_EC25,
+    PJMEDIA_ZRTP_PK_EC38,
+    PJMEDIA_ZRTP_PK_EC52,
+    PJMEDIA_ZRTP_PK_PRSH,
+    PJMEDIA_ZRTP_PK_MULT
+} pjmedia_zrtp_pk_type;
+
+typedef enum pjmedia_zrtp_sas_type {
+    PJMEDIA_ZRTP_SAS_B32 = 1,
+    PJMEDIA_ZRTP_SAS_B256
+} pjmedia_zrtp_sas_type;
+
+typedef enum pjmedia_zrtp_event {
+    PJMEDIA_ZRTP_EVENT_STOP,
+    PJMEDIA_ZRTP_EVENT_NO_ZRTP,
+    PJMEDIA_ZRTP_EVENT_CLEAR,
+    PJMEDIA_ZRTP_EVENT_SECURE,
+    PJMEDIA_ZRTP_EVENT_DISCOVERY,
+    PJMEDIA_ZRTP_EVENT_KEY_AGREEMENT,
+    PJMEDIA_ZRTP_EVENT_CONFIRMING,
+    PJMEDIA_ZRTP_EVENT_LOCAL_ERROR,
+    PJMEDIA_ZRTP_EVENT_COUNT
+} pjmedia_zrtp_event;
+
+typedef enum pjmedia_zrtp_stream_state {
+    PJMEDIA_ZRTP_STATE_STOPPED = PJMEDIA_ZRTP_EVENT_STOP,
+    PJMEDIA_ZRTP_STATE_NO_ZRTP = PJMEDIA_ZRTP_EVENT_NO_ZRTP,
+    PJMEDIA_ZRTP_STATE_CLEAR = PJMEDIA_ZRTP_EVENT_CLEAR,
+    PJMEDIA_ZRTP_STATE_SECURE = PJMEDIA_ZRTP_EVENT_SECURE,
+    PJMEDIA_ZRTP_STATE_DISCOVERY = PJMEDIA_ZRTP_EVENT_DISCOVERY,
+    PJMEDIA_ZRTP_STATE_KEY_AGREEMENT = PJMEDIA_ZRTP_EVENT_KEY_AGREEMENT,
+    PJMEDIA_ZRTP_STATE_CONFIRMING = PJMEDIA_ZRTP_EVENT_CONFIRMING,
+    PJMEDIA_ZRTP_STATE_LOCAL_ERROR = PJMEDIA_ZRTP_EVENT_LOCAL_ERROR
+} pjmedia_zrtp_stream_state;
+
+typedef enum pjmedia_zrtp_security_event {
+    PJMEDIA_ZRTP_EVENT_ERROR = PJMEDIA_ZRTP_EVENT_COUNT,
+    PJMEDIA_ZRTP_EVENT_CACHE_MISMATCH,
+    PJMEDIA_ZRTP_EVENT_BAD_HELLO_HASH,
+    PJMEDIA_ZRTP_EVENT_BAD_MESSAGE_MAC
+} pjmedia_zrtp_security_event;
+
+typedef struct pjmedia_zrtp_profile_t {
+    pj_bool_t auto_secure;
+    pj_bool_t fast_discovery;
+    pj_bool_t fast_secure;
+    pj_bool_t allow_clear;
+    pj_bool_t disclosure;
+    pj_uint32_t cache_ttl;
+    pj_uint8_t hash_types[PJMEDIA_ZRTP_MAX_COMP_COUNT + 1];
+    pj_uint8_t cipher_types[PJMEDIA_ZRTP_MAX_COMP_COUNT + 1];
+    pj_uint8_t auth_types[PJMEDIA_ZRTP_MAX_COMP_COUNT + 1];
+    pj_uint8_t pk_types[PJMEDIA_ZRTP_MAX_COMP_COUNT + 1];
+    pj_uint8_t sas_types[PJMEDIA_ZRTP_MAX_COMP_COUNT + 1];
+} pjmedia_zrtp_profile_t;
+
+typedef struct pjmedia_zrtp_session_info {
+    pjmedia_zid_t zid;
+    pjmedia_zid_t peer_zid;
+    pj_bool_t sas_available;
+    pj_uint32_t sas_value;
+    char sas1[PJMEDIA_ZRTP_MAX_SAS_STRING_LEN + 1];
+    char sas2[PJMEDIA_ZRTP_MAX_SAS_STRING_LEN + 1];
+    pj_bool_t sas_verified;
+} pjmedia_zrtp_session_info;
+
+typedef struct pjmedia_zrtp_stream_info {
+    pjmedia_zrtp_stream_state state;
+    pjmedia_zrtp_protocol_error last_error;
+    char peer_client_id[PJMEDIA_ZRTP_CLIENT_ID_LEN + 1];
+    pj_bool_t peer_pbx_enrollment;
+    pj_bool_t peer_sas_verified;
+    pj_bool_t peer_allow_clear;
+    pj_bool_t peer_disclosure;
+    pjmedia_zrtp_hash_type hash_type;
+    pjmedia_zrtp_cipher_type cipher_type;
+    pjmedia_zrtp_auth_type auth_type;
+    pjmedia_zrtp_pk_type pk_type;
+    pjmedia_zrtp_sas_type sas_type;
+} pjmedia_zrtp_stream_info;
+
+/**
+ * This enumeration specifies the behavior of the ZRTP transport regarding
+ * media security offer and answer.
+ */
+typedef enum pjmedia_zrtp_use
+{
+    /**
+     * When this flag is specified, ZRTP will be disabled, and the transport
+     * will reject RTP/SAVP offer.
+     */
+    PJMEDIA_ZRTP_DISABLED,
+
+    /**
+     * When this flag is specified, ZRTP will be advertised as optional and
+     * incoming ZRTP offer will be accepted.
+     */
+    PJMEDIA_ZRTP_OPTIONAL,
+
+    /**
+     * When this flag is specified, the transport will require that RTP/SAVP
+     * media shall be used.
+     */
+    PJMEDIA_ZRTP_MANDATORY
+
+} pjmedia_zrtp_use;
+
+#if defined(PJMEDIA_ZRTP_MASQUERADE) && (PJMEDIA_ZRTP_MASQUERADE != 0)
+/**
+ * TODO
+ */
+typedef enum pjmedia_zrtp_masquerade_mode
+{
+    /**
+     * TODO
+     */
+    PJMEDIA_ZRTP_MASQ_UNDEF = -1,
+
+    /**
+     * TODO
+     */
+    PJMEDIA_ZRTP_MASQ_NONE,
+
+    /**
+     * TODO
+     */
+    PJMEDIA_ZRTP_MASQ_COMPAT,
+
+    /**
+     * TODO
+     */
+    PJMEDIA_ZRTP_MASQ_ONLY,
+} pjmedia_zrtp_masquerade_mode;
+#endif
+
+/**
+ * This structure specifies callbacks to receive ZRTP events. All callbacks
+ * are optional and can be set to NULL.
+ */
+typedef struct pjmedia_zrtp_callbacks
+{
+    /**
+     * ZRTP protocol event notification. See @ref pjmedia_zrtp_event for more
+     * information on the events notified to this callback.
+     */
+    void (* on_protocol_event)(pjmedia_transport *tp, pjmedia_zrtp_event e);
+
+    /**
+     * ZRTP security event notification. See @ref pjmedia_zrtp_security_event for more
+     * information on the events notified to this callback.
+     */
+    void (* on_security_event)(pjmedia_transport *tp, pjmedia_zrtp_security_event e);
+
+    /**
+     * Notification that the ZRTP stream is in SECURE mode.
+     */
+    void (* on_secure)(pjmedia_transport *tp);
+
+    /**
+     * Notification that the ZRTP stream is in CLEAR mode.
+     */
+    void (* on_not_secure)(pjmedia_transport *tp);
+
+} pjmedia_zrtp_callbacks;
+
+/**
+ * Settings to be given when creating ZRTP transport. Application should call
+ * #pjmedia_zrtp_setting_default() to initialize this structure with its 
+ * default values.
+ */
+typedef struct pjmedia_zrtp_setting
+{
+    /**
+     * Symbolic ZRTP client id.
+     */
+    pj_str_t			client_id;
+
+    /**
+     * Path to the ZRTP credentials cache file.
+     */
+    pj_str_t			cache_path;
+
+    /**
+     * Callbacks for ZRTP events.
+     */
+    pjmedia_zrtp_callbacks	callbacks;
+
+} pjmedia_zrtp_setting;
+
+
+typedef struct pjmedia_zrtp_media_setting
+{
+    /**
+     * Specify the usage policy. Default is PJMEDIA_ZRTP_OPTIONAL.
+     */
+    pjmedia_zrtp_use		use;
+
+    /**
+     * Specify zid. If not set a random one will be generated.
+     */
+    pj_bool_t			valid_zid;
+    pjmedia_zid_t		zid; 
+
+    /**
+     * Specify whether the ZRTP transport should close the member transport 
+     * when it is destroyed. Default: PJ_TRUE.
+     */
+    pj_bool_t			close_member_tp;
+
+    /**
+     * Specify whether the ZRTP transport should be started manually by the
+     * UA. Default: PJ_FALSE.
+     */
+    pj_bool_t			manual_start;
+
+    /**
+     * ZRTP session profile for this transport. See @ref pjmedia_zrtp_profile_t for
+     * more information.
+     */
+    pjmedia_zrtp_profile_t	profile;
+
+#if defined(PJMEDIA_ZRTP_MASQUERADE) && (PJMEDIA_ZRTP_MASQUERADE != 0)
+    /**
+     * Specify whether ZRTP messages should be masqueraded as media packets.
+     * Default is PJ_FALSE.
+     */
+    pj_bool_t			masquerade;
+
+    /**
+     * Specify whether to only support masqueraded ZRTP (becoming incompatible
+     * with compliant implementations). Default is PJ_FALSE.
+     */
+    pj_bool_t			masquerade_only;
+#endif
+
+} pjmedia_zrtp_media_setting;
+
+/**
+ * This structure specifies ZRTP transport specific info. This will fit
+ * into \a buffer field of pjmedia_transport_specific_info.
+ */
+typedef struct pjmedia_zrtp_info
+{
+    /**
+     * Specify whether the ZRTP transport is active for ZRTP session.
+     */
+    pj_bool_t			active;
+
+    /**
+     * Specify the usage policy.
+     */
+    pjmedia_zrtp_use		use;
+
+    /**
+     * Specify the peer's usage policy.
+     */
+    pjmedia_zrtp_use		peer_use;
+
+} pjmedia_zrtp_info;
+
+
+/**
+ * Initialize ZRTP library. This function should be called before
+ * any ZRTP functions, however calling #pjmedia_transport_zrtp_create() 
+ * will also invoke this function. This function will also register ZRTP
+ * library deinitialization to #pj_atexit(), so the deinitialization
+ * of ZRTP library will be performed automatically by PJLIB destructor.
+ *
+ * `opt' is used to establish the default licensing mode, eventually a
+ * client id.
+ */
+PJ_DECL(pj_status_t) pjmedia_zrtp_init_lib(pjmedia_zrtp_setting const *opt);
+
+/**
+ * Deinitializate ZRTP library. Due to the unknown order of atexit callbacks,
+ * this function shallbe called PRIOR destroying any pool.
+ */
+PJ_DECL(void) pjmedia_zrtp_deinit_lib(void);
+
+/**
+ * TODO
+ */
+PJ_DECL(pj_status_t) pjmedia_zrtp_set_default_zid(const pjmedia_zid_t *zid );
+
+/**
+ * TODO
+ */
+PJ_DECL(pj_bool_t) pjmedia_zrtp_get_default_zid(pjmedia_zid_t *zid);
+
+/**
+ * Accumulate data in the ZRTP library's RNG pool.
+ *
+ * @param buffer  Data to accumulate in the RNG pool
+ * @param length  Length of the buffer
+ */
+PJ_DECL(pj_status_t) pjmedia_zrtp_entropy_add(const void *buffer,
+					      pj_uint32_t length);
+
+/**
+ * Generate a random string using ZRTP library's RNG pool.
+ *
+ * @param buffer  Buffer that will be filled with random bytes
+ * @param length  Length of the buffer
+ */
+PJ_DECL(pj_status_t) pjmedia_zrtp_randstr(void *buffer,
+					  pj_uint32_t length);
+
+/**
+ * Generate a random ZID using ZRTP library's RNG pool.
+ */
+PJ_INLINE(pj_status_t) pjmedia_zrtp_randzid(pjmedia_zid_t *zid) {
+    return pjmedia_zrtp_randstr( (void *)zid, sizeof(pjmedia_zid_t));
+}
+
+/**
+ * Initialize ZRTP setting with its default values.
+ *
+ * @param opt	ZRTP setting to be initialized.
+ */
+PJ_DECL(void) pjmedia_zrtp_setting_default(pjmedia_zrtp_setting *opt);
+
+/**
+ * Save the cache to disk
+ */
+PJ_DECL(pj_status_t) pjmedia_zrtp_cache_store();
+
+/**
+ * Initialize ZRTP media setting with its default values.
+ *
+ * @param opt	ZRTP media setting to be initialized.
+ */
+PJ_DECL(void) pjmedia_zrtp_media_setting_default(pjmedia_zrtp_media_setting *opt);
+
+
+/**
+ * Create an ZRTP media transport.
+ *
+ * @param endpt	    The media endpoint instance.
+ * @param tp	    The actual media transport to send and receive 
+ *		    RTP/RTCP packets. This media transport will be
+ *		    kept as member transport of this ZRTP instance.
+ * @param timer_heap Timer heap that will schedule ZRTP timers.
+ * @param opt	    Optional settings. If NULL is given, default
+ *		    settings will be used.
+ * @param p_tp	    Pointer to receive the transport ZRTP instance.
+ *
+ * @return	    PJ_SUCCESS on success.
+ */
+PJ_DECL(pj_status_t) pjmedia_transport_zrtp_create(
+				       pjmedia_endpt *endpt,
+				       pjmedia_transport *tp,
+				       pj_timer_heap_t *timer_heap,
+				       const pjmedia_zrtp_media_setting *opt,
+				       pjmedia_transport **p_tp);
+
+
+/**
+ * Manually start ZRTP session with the given parameters. Application only
+ * needs to call this function when the ZRTP transport is used without SDP
+ * offer/answer. When SDP offer/answer framework is used, the ZRTP transport
+ * will be started/stopped by #pjmedia_transport_media_start() and 
+ * #pjmedia_transport_media_stop() respectively.
+ *
+ * Please note that even if an RTP stream is only one direction, application
+ * will still need to provide both crypto suites, because it is needed by 
+ * RTCP.
+
+ * If application specifies the crypto keys, the keys for transmit and receive
+ * direction MUST be different.
+ *
+ * @param zrtp	    The ZRTP transport.
+ *
+ * @return	    PJ_SUCCESS on success.
+ */
+PJ_DECL(pj_status_t) pjmedia_transport_zrtp_start(
+					    pjmedia_transport *zrtp);
+
+/**
+ * Stop ZRTP session.
+ *
+ * @param zrtp	    The ZRTP media transport.
+ *
+ * @return	    PJ_SUCCESS on success.
+ *
+ * @see #pjmedia_transport_zrtp_start() 
+ */
+PJ_DECL(pj_status_t) pjmedia_transport_zrtp_stop(pjmedia_transport *zrtp);
+
+
+/**
+ * Query member transport of ZRTP.
+ *
+ * @param zrtp		    The ZRTP media transport.
+ *
+ * @return		    member media transport.
+ */
+PJ_DECL(pjmedia_transport*) pjmedia_transport_zrtp_get_member(
+						    pjmedia_transport *zrtp);
+
+
+/**
+ * Sets the transport SSRC. This is needed because ZRTP does not
+ * know the SSRC chosen by PJSIP.
+ *
+ * @param zrtp The ZRTP media transport.
+ * @param ssrc The ssrc assigned to this media stream.
+ *
+ * @return PJ_EINVAL if tp is NULL or SSRC has already been assigned,
+ *         PJ_SUCCESS otherwise.
+ */
+PJ_DECL(pj_status_t) pjmedia_transport_zrtp_bind_ssrc (
+						pjmedia_transport *zrtp,
+						pj_uint32_t ssrc);
+
+/**
+ * Switches the ZRTP transport to the SECURE state.
+ *
+ * @param zrtp The ZRTP media transport.
+ *
+ * @return PJ_EINVAL if zrtp is NULL; a ZRTP error code if the transport is
+ *         already in the SECURE state, or in case of internal ZRTP errors;
+ *         PJ_SUCCESS otherwise.
+ */
+PJ_DECL(pj_status_t) pjmedia_transport_zrtp_go_secure(pjmedia_transport *zrtp);
+
+/**
+ * Switches the ZRTP transport to the CLEAR state. The transport must
+ * have the "allowclear" flag set.
+ *
+ * @param zrtp The ZRTP media transport.
+ *
+ * @return PJ_EINVAL if zrtp is NULL; a ZRTP error code if the "allowclear"
+ *         flag is not set, or if the transport is already in the CLEAR state,
+ *         or in case of internal ZRTP errors; PJ_SUCCESS otherwise.
+ */
+PJ_DECL(pj_status_t) pjmedia_transport_zrtp_go_clear(pjmedia_transport *zrtp);
+
+/**
+ * Sets or resets the "SAS verified" flag for the pair of ZIDs identified by
+ * this ZRTP transport. The value of the flag and the shared secret will be
+ * saved in the ZRTP cache.
+ *
+ * @param zrtp The ZRTP media transport.
+ * @param is_verified The new value of the "SAS verified" flag.
+ *
+ * @return PJ_EINVAL if tp is NULL; a ZRTP error code in case of internal ZRTP
+ *         errors; PJ_SUCCESS otherwise.
+ */
+PJ_DECL(pj_status_t) pjmedia_transport_zrtp_set_sas_verified(pjmedia_transport *zrtp,
+							     pj_bool_t is_verified);
+
+/**
+ * Queries ZRTP-specific information for a media transport.
+ *
+ * @param zrtp The ZRTP media transport.
+ * @param zsession Buffer that receives information about the ZRTP session (optional).
+ * @param zstream Buffer that receives information about the ZRTP stream (optional).
+ *
+ * @return PJ_EINVAL if zrtp is NULL, or if both zsession and zstream are NULL;
+ *         a ZRTP error code in case of internal ZRTP errors; PJ_SUCCESS otherwise.
+ */
+PJ_DECL(pj_status_t) pjmedia_transport_zrtp_get_info(pjmedia_transport *zrtp,
+						     pjmedia_zrtp_session_info *zsession,
+						     pjmedia_zrtp_stream_info *zstream);
+
+#if defined(PJMEDIA_ZRTP_MASQUERADE) && (PJMEDIA_ZRTP_MASQUERADE != 0)
+/**
+ * TODO
+ */
+PJ_DECL(pj_status_t) pjmedia_transport_zrtp_get_masquerade_mode(pjmedia_transport *tp,
+								pjmedia_zrtp_masquerade_mode *p_mode);
+#endif
+
+PJ_END_DECL
+
+/**
+ * @}
+ */
+
+#endif /* __PJMEDIA_TRANSPORT_ZRTP_H__ */
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/pjmedia/include/pjmedia.h zorg/pjmedia/include/pjmedia.h
--- original/pjmedia/include/pjmedia.h	2008-12-23 18:27:53.128213000 +0100
+++ zorg/pjmedia/include/pjmedia.h	2010-11-29 17:34:48.400198000 +0100
@@ -63,6 +63,7 @@
 #include <pjmedia/transport_ice.h>
 #include <pjmedia/transport_loop.h>
 #include <pjmedia/transport_srtp.h>
+#include <pjmedia/transport_zrtp.h>
 #include <pjmedia/transport_udp.h>
 #include <pjmedia/wav_playlist.h>
 #include <pjmedia/wav_port.h>
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/pjmedia/src/pjmedia/errno.c zorg/pjmedia/src/pjmedia/errno.c
--- original/pjmedia/src/pjmedia/errno.c	2009-03-12 19:11:37.148578000 +0100
+++ zorg/pjmedia/src/pjmedia/errno.c	2010-11-29 17:34:48.400198000 +0100
@@ -31,6 +31,12 @@
 PJ_END_DECL
 #endif
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+PJ_BEGIN_DECL
+    const char* get_zrtplib_errstr(int err);
+    const char* get_zrtpproto_errstr(int err);
+PJ_END_DECL
+#endif
 
 /* PJMEDIA's own error codes/messages 
  * MUST KEEP THIS ARRAY SORTED!!
@@ -147,22 +153,36 @@
     PJ_BUILD_ERR( PJMEDIA_ENOSNDREC,	    "No suitable sound capture device" ),
     PJ_BUILD_ERR( PJMEDIA_ENOSNDPLAY,	    "No suitable sound playback device" ),
     PJ_BUILD_ERR( PJMEDIA_ESNDINDEVID,	    "Invalid sound device ID" ),
-    PJ_BUILD_ERR( PJMEDIA_ESNDINSAMPLEFMT,  "Invalid sample format for sound device" ),
+    PJ_BUILD_ERR( PJMEDIA_ESNDINSAMPLEFMT,  "Invalid sample format for sound device" )
 
 #if defined(PJMEDIA_HAS_SRTP) && (PJMEDIA_HAS_SRTP != 0)
     /* SRTP transport errors: */
-    PJ_BUILD_ERR( PJMEDIA_SRTP_ECRYPTONOTMATCH, "SRTP crypto-suite name not match the offerer tag" ),
-    PJ_BUILD_ERR( PJMEDIA_SRTP_EINKEYLEN,	"Invalid SRTP key length for specific crypto" ),
-    PJ_BUILD_ERR( PJMEDIA_SRTP_ENOTSUPCRYPTO,   "Unsupported SRTP crypto-suite" ),
-    PJ_BUILD_ERR( PJMEDIA_SRTP_ESDPAMBIGUEANS,  "SRTP SDP contains ambigue answer" ),
-    PJ_BUILD_ERR( PJMEDIA_SRTP_ESDPDUPCRYPTOTAG,"Duplicated SRTP crypto tag" ),
-    PJ_BUILD_ERR( PJMEDIA_SRTP_ESDPINCRYPTO,    "Invalid SRTP crypto attribute" ),
-    PJ_BUILD_ERR( PJMEDIA_SRTP_ESDPINCRYPTOTAG, "Invalid SRTP crypto tag" ),
-    PJ_BUILD_ERR( PJMEDIA_SRTP_ESDPINTRANSPORT, "Invalid SDP media transport for SRTP" ),
-    PJ_BUILD_ERR( PJMEDIA_SRTP_ESDPREQCRYPTO,   "SRTP crypto attribute required" ),
-    PJ_BUILD_ERR( PJMEDIA_SRTP_ESDPREQSECTP,    "Secure transport required in SDP media descriptor" )
+    , PJ_BUILD_ERR( PJMEDIA_SRTP_ECRYPTONOTMATCH, "SRTP crypto-suite name not match the offerer tag" )
+    , PJ_BUILD_ERR( PJMEDIA_SRTP_EINKEYLEN,       "Invalid SRTP key length for specific crypto" )
+    , PJ_BUILD_ERR( PJMEDIA_SRTP_ENOTSUPCRYPTO,   "Unsupported SRTP crypto-suite" )
+    , PJ_BUILD_ERR( PJMEDIA_SRTP_ESDPAMBIGUEANS,  "SRTP SDP contains ambigue answer" )
+    , PJ_BUILD_ERR( PJMEDIA_SRTP_ESDPDUPCRYPTOTAG,"Duplicated SRTP crypto tag" )
+    , PJ_BUILD_ERR( PJMEDIA_SRTP_ESDPINCRYPTO,    "Invalid SRTP crypto attribute" )
+    , PJ_BUILD_ERR( PJMEDIA_SRTP_ESDPINCRYPTOTAG, "Invalid SRTP crypto tag" )
+    , PJ_BUILD_ERR( PJMEDIA_SRTP_ESDPINTRANSPORT, "Invalid SDP media transport for SRTP" )
+    , PJ_BUILD_ERR( PJMEDIA_SRTP_ESDPREQCRYPTO,   "SRTP crypto attribute required" )
+    , PJ_BUILD_ERR( PJMEDIA_SRTP_ESDPREQSECTP,    "Secure transport required in SDP media descriptor" )
+#endif
+    
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+    , PJ_BUILD_ERR( PJMEDIA_ZRTP_ENOTINITIALIZED,   "ZRTP library is not initialized" )
+    , PJ_BUILD_ERR( PJMEDIA_ZRTP_EINVALIDPROFILE,   "ZRTP profile is not well-formed" )
+    , PJ_BUILD_ERR( PJMEDIA_ZRTP_ESESSIONFAIL,      "ZRTP session could not be created" )
+    , PJ_BUILD_ERR( PJMEDIA_ZRTP_ESTREAMFAIL,       "ZRTP stream could not be attached" )
+    , PJ_BUILD_ERR( PJMEDIA_ZRTP_ESTREAMSTARTFAIL,  "ZRTP stream could not be started" )
+    , PJ_BUILD_ERR( PJMEDIA_ZRTP_ESTREAMSECUREFAIL, "ZRTP stream could not be secured" )
+    , PJ_BUILD_ERR( PJMEDIA_ZRTP_EHASH,             "Unknown ZRTP hash type" )
+    , PJ_BUILD_ERR( PJMEDIA_ZRTP_ECIPHER,           "Unknown ZRTP cipher type" )
+    , PJ_BUILD_ERR( PJMEDIA_ZRTP_EAUTH,             "Unknown ZRTP authentication tag type" )
+    , PJ_BUILD_ERR( PJMEDIA_ZRTP_EPK,               "Unknown ZRTP public key exchange type" )
+    , PJ_BUILD_ERR( PJMEDIA_ZRTP_ESAS,              "Unknown ZRTP SAS type" )
+    , PJ_BUILD_ERR( PJMEDIA_ZRTP_EPROFILE,          "Bad ZRTP profile" )
 #endif
-
 };
 
 #endif	/* PJ_HAS_ERROR_STRING */
@@ -216,6 +236,37 @@
     
     } else
 #endif
+
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+    /* ZRTP library error */
+    if (statcode >= PJMEDIA_ZRTPLIB_ERRNO_START &&
+	statcode <  PJMEDIA_ZRTPLIB_ERRNO_END)
+    {
+	int err = statcode - PJMEDIA_ZRTPLIB_ERRNO_START;
+	pj_str_t msg;
+	
+	msg = pj_str((char*)get_zrtplib_errstr(err));
+
+	errstr.ptr = buf;
+	pj_strncpy_with_null(&errstr, &msg, bufsize);
+	return errstr;
+    
+    } else
+    /* ZRTP protocol error */
+    if (statcode >= PJMEDIA_ZRTPPROTO_ERRNO_START &&
+	statcode <  PJMEDIA_ZRTPPROTO_ERRNO_END)
+    {
+	int err = statcode - PJMEDIA_ZRTPPROTO_ERRNO_START;
+	pj_str_t msg;
+	
+	msg = pj_str((char*)get_zrtpproto_errstr(err));
+
+	errstr.ptr = buf;
+	pj_strncpy_with_null(&errstr, &msg, bufsize);
+	return errstr;
+    
+    } else
+#endif
     
     /* PJMEDIA error */
     if (statcode >= PJMEDIA_ERRNO_START && 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/pjmedia/src/pjmedia/stream.c zorg/pjmedia/src/pjmedia/stream.c
--- original/pjmedia/src/pjmedia/stream.c	2010-09-20 08:13:02.390759000 +0200
+++ zorg/pjmedia/src/pjmedia/stream.c	2010-11-29 17:34:48.400198000 +0100
@@ -22,6 +22,7 @@
 #include <pjmedia/rtp.h>
 #include <pjmedia/rtcp.h>
 #include <pjmedia/jbuf.h>
+#include <pjmedia/transport_zrtp.h>
 #include <pj/array.h>
 #include <pj/assert.h>
 #include <pj/ctype.h>
@@ -1936,6 +1937,9 @@
     unsigned jb_init, jb_max, jb_min_pre, jb_max_pre, len;
     char *p;
     pj_status_t status;
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+    pjmedia_transport_info tp_info;
+#endif
 
     PJ_ASSERT_RETURN(pool && info && p_stream, PJ_EINVAL);
 
@@ -2227,6 +2231,17 @@
 
     stream->transport = tp;
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+    /* Bind the SSRC to ZRTP streams now. */
+    PJ_LOG(1, (THIS_FILE, "Checking ZRTP stream for binding SSRC"));
+    pjmedia_transport_info_init(&tp_info);
+    if (pjmedia_transport_get_info(stream->transport, &tp_info) == PJ_SUCCESS
+	&& tp_info.specific_info_cnt >= 1
+        && tp_info.spc_info[0].type == PJMEDIA_TRANSPORT_TYPE_ZRTP) {
+	pjmedia_transport_zrtp_bind_ssrc(stream->transport, info->ssrc);
+    }
+#endif
+
 #if defined(PJMEDIA_HAS_RTCP_XR) && (PJMEDIA_HAS_RTCP_XR != 0)
     /* Enable RTCP XR and update stream info/config to RTCP XR */
     if (info->rtcp_xr_enabled) {
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/pjmedia/src/pjmedia/transport_srtp.c zorg/pjmedia/src/pjmedia/transport_srtp.c
--- original/pjmedia/src/pjmedia/transport_srtp.c	2010-10-18 06:23:25.186360000 +0200
+++ zorg/pjmedia/src/pjmedia/transport_srtp.c	2010-11-29 17:34:48.400198000 +0100
@@ -28,12 +28,114 @@
 #include <pj/os.h>
 #include <pj/pool.h>
 
-#if defined(PJMEDIA_HAS_SRTP) && (PJMEDIA_HAS_SRTP != 0)
+#if (defined(PJMEDIA_HAS_SRTP) && (PJMEDIA_HAS_SRTP != 0)) || (defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0))
 
 #include <srtp.h>
 
 #define THIS_FILE   "transport_srtp.c"
 
+/* This function may also be used by other module, e.g: pjmedia/errno.c,
+ * it should have C compatible declaration.
+ */
+PJ_BEGIN_DECL
+    const char* get_libsrtp_errstr(int err);
+PJ_END_DECL
+
+const char* get_libsrtp_errstr(int err)
+{
+#if defined(PJ_HAS_ERROR_STRING) && (PJ_HAS_ERROR_STRING != 0)
+    static char *liberr[] = {
+	"ok",				    /* err_status_ok            = 0  */
+	"unspecified failure",		    /* err_status_fail          = 1  */
+	"unsupported parameter",	    /* err_status_bad_param     = 2  */
+	"couldn't allocate memory",	    /* err_status_alloc_fail    = 3  */
+	"couldn't deallocate properly",	    /* err_status_dealloc_fail  = 4  */
+	"couldn't initialize",		    /* err_status_init_fail     = 5  */
+	"can't process as much data as requested", 
+					    /* err_status_terminus      = 6  */
+	"authentication failure",	    /* err_status_auth_fail     = 7  */
+	"cipher failure",		    /* err_status_cipher_fail   = 8  */
+	"replay check failed (bad index)",  /* err_status_replay_fail   = 9  */
+	"replay check failed (index too old)", 
+					    /* err_status_replay_old    = 10 */
+	"algorithm failed test routine",    /* err_status_algo_fail     = 11 */
+	"unsupported operation",	    /* err_status_no_such_op    = 12 */
+	"no appropriate context found",	    /* err_status_no_ctx        = 13 */
+	"unable to perform desired validation", 
+					    /* err_status_cant_check    = 14 */
+	"can't use key any more",	    /* err_status_key_expired   = 15 */
+	"error in use of socket",	    /* err_status_socket_err    = 16 */
+	"error in use POSIX signals",	    /* err_status_signal_err    = 17 */
+	"nonce check failed",		    /* err_status_nonce_bad     = 18 */
+	"couldn't read data",		    /* err_status_read_fail     = 19 */
+	"couldn't write data",		    /* err_status_write_fail    = 20 */
+	"error pasring data",		    /* err_status_parse_err     = 21 */
+	"error encoding data",		    /* err_status_encode_err    = 22 */
+	"error while using semaphores",	    /* err_status_semaphore_err = 23 */
+	"error while using pfkey"	    /* err_status_pfkey_err     = 24 */
+    };
+    if (err >= 0 && err < (int)PJ_ARRAY_SIZE(liberr)) {
+	return liberr[err];
+    } else {
+	static char msg[32];
+	pj_ansi_snprintf(msg, sizeof(msg), "Unknown libsrtp error %d", err);
+	return msg;
+    }
+#else
+    static char msg[32];
+    pj_ansi_snprintf(msg, sizeof(msg), "libsrtp error %d", err);
+    return msg;
+#endif
+}
+
+static pj_bool_t libsrtp_initialized;
+static void pjmedia_srtp_deinit_lib(void);
+
+PJ_DEF(pj_status_t) pjmedia_srtp_init_lib(void)
+{
+    if (libsrtp_initialized == PJ_FALSE) {
+	err_status_t err;
+
+	err = srtp_init();
+	if (err != err_status_ok) { 
+	    PJ_LOG(4, (THIS_FILE, "Failed to initialize libsrtp: %s", 
+		       get_libsrtp_errstr(err)));
+	    return PJMEDIA_ERRNO_FROM_LIBSRTP(err);
+	}
+
+	if (pj_atexit(pjmedia_srtp_deinit_lib) != PJ_SUCCESS) {
+	    /* There will be memory leak when it fails to schedule libsrtp 
+	     * deinitialization, however the memory leak could be harmless,
+	     * since in modern OS's memory used by an application is released 
+	     * when the application terminates.
+	     */
+	    PJ_LOG(4, (THIS_FILE, "Failed to register libsrtp deinit."));
+	}
+
+	libsrtp_initialized = PJ_TRUE;
+    }
+    
+    return PJ_SUCCESS;
+}
+
+static void pjmedia_srtp_deinit_lib(void)
+{
+    err_status_t err;
+
+    err = srtp_deinit();
+    if (err != err_status_ok) {
+	PJ_LOG(4, (THIS_FILE, "Failed to deinitialize libsrtp: %s", 
+		   get_libsrtp_errstr(err)));
+    }
+
+    libsrtp_initialized = PJ_FALSE;
+}
+
+#endif
+
+#if defined(PJMEDIA_HAS_SRTP) && (PJMEDIA_HAS_SRTP != 0)
+
+
 /* Maximum size of packet */
 #define MAX_RTP_BUFFER_LEN	    1500
 #define MAX_RTCP_BUFFER_LEN	    1500
@@ -215,103 +317,6 @@
     &transport_destroy
 };
 
-/* This function may also be used by other module, e.g: pjmedia/errno.c,
- * it should have C compatible declaration.
- */
-PJ_BEGIN_DECL
-    const char* get_libsrtp_errstr(int err);
-PJ_END_DECL
-
-const char* get_libsrtp_errstr(int err)
-{
-#if defined(PJ_HAS_ERROR_STRING) && (PJ_HAS_ERROR_STRING != 0)
-    static char *liberr[] = {
-	"ok",				    /* err_status_ok            = 0  */
-	"unspecified failure",		    /* err_status_fail          = 1  */
-	"unsupported parameter",	    /* err_status_bad_param     = 2  */
-	"couldn't allocate memory",	    /* err_status_alloc_fail    = 3  */
-	"couldn't deallocate properly",	    /* err_status_dealloc_fail  = 4  */
-	"couldn't initialize",		    /* err_status_init_fail     = 5  */
-	"can't process as much data as requested", 
-					    /* err_status_terminus      = 6  */
-	"authentication failure",	    /* err_status_auth_fail     = 7  */
-	"cipher failure",		    /* err_status_cipher_fail   = 8  */
-	"replay check failed (bad index)",  /* err_status_replay_fail   = 9  */
-	"replay check failed (index too old)", 
-					    /* err_status_replay_old    = 10 */
-	"algorithm failed test routine",    /* err_status_algo_fail     = 11 */
-	"unsupported operation",	    /* err_status_no_such_op    = 12 */
-	"no appropriate context found",	    /* err_status_no_ctx        = 13 */
-	"unable to perform desired validation", 
-					    /* err_status_cant_check    = 14 */
-	"can't use key any more",	    /* err_status_key_expired   = 15 */
-	"error in use of socket",	    /* err_status_socket_err    = 16 */
-	"error in use POSIX signals",	    /* err_status_signal_err    = 17 */
-	"nonce check failed",		    /* err_status_nonce_bad     = 18 */
-	"couldn't read data",		    /* err_status_read_fail     = 19 */
-	"couldn't write data",		    /* err_status_write_fail    = 20 */
-	"error pasring data",		    /* err_status_parse_err     = 21 */
-	"error encoding data",		    /* err_status_encode_err    = 22 */
-	"error while using semaphores",	    /* err_status_semaphore_err = 23 */
-	"error while using pfkey"	    /* err_status_pfkey_err     = 24 */
-    };
-    if (err >= 0 && err < (int)PJ_ARRAY_SIZE(liberr)) {
-	return liberr[err];
-    } else {
-	static char msg[32];
-	pj_ansi_snprintf(msg, sizeof(msg), "Unknown libsrtp error %d", err);
-	return msg;
-    }
-#else
-    static char msg[32];
-    pj_ansi_snprintf(msg, sizeof(msg), "libsrtp error %d", err);
-    return msg;
-#endif
-}
-
-static pj_bool_t libsrtp_initialized;
-static void pjmedia_srtp_deinit_lib(void);
-
-PJ_DEF(pj_status_t) pjmedia_srtp_init_lib(void)
-{
-    if (libsrtp_initialized == PJ_FALSE) {
-	err_status_t err;
-
-	err = srtp_init();
-	if (err != err_status_ok) { 
-	    PJ_LOG(4, (THIS_FILE, "Failed to initialize libsrtp: %s", 
-		       get_libsrtp_errstr(err)));
-	    return PJMEDIA_ERRNO_FROM_LIBSRTP(err);
-	}
-
-	if (pj_atexit(pjmedia_srtp_deinit_lib) != PJ_SUCCESS) {
-	    /* There will be memory leak when it fails to schedule libsrtp 
-	     * deinitialization, however the memory leak could be harmless,
-	     * since in modern OS's memory used by an application is released 
-	     * when the application terminates.
-	     */
-	    PJ_LOG(4, (THIS_FILE, "Failed to register libsrtp deinit."));
-	}
-
-	libsrtp_initialized = PJ_TRUE;
-    }
-    
-    return PJ_SUCCESS;
-}
-
-static void pjmedia_srtp_deinit_lib(void)
-{
-    err_status_t err;
-
-    err = srtp_deinit();
-    if (err != err_status_ok) {
-	PJ_LOG(4, (THIS_FILE, "Failed to deinitialize libsrtp: %s", 
-		   get_libsrtp_errstr(err)));
-    }
-
-    libsrtp_initialized = PJ_FALSE;
-}
-
 
 static int get_crypto_idx(const pj_str_t* crypto_name)
 {
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/pjmedia/src/pjmedia/transport_zrtp.c zorg/pjmedia/src/pjmedia/transport_zrtp.c
--- original/pjmedia/src/pjmedia/transport_zrtp.c	1970-01-01 01:00:00.000000000 +0100
+++ zorg/pjmedia/src/pjmedia/transport_zrtp.c	2010-11-30 14:16:05.752384000 +0100
@@ -0,0 +1,2278 @@
+/* $Id$ */
+/*
+ * zrtp.org is a ZRTP protocol implementation  
+ * Copyright (C) 2010 - PrivateWave Italia S.p.A.
+ *  
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *  
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *  
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *  
+ * For more information, please contact PrivateWave Italia S.p.A. at
+ * address zorg@privatewave.com or http://www.privatewave.com
+ */
+
+#include <pjmedia/transport_zrtp.h>
+#include <pjmedia/transport_srtp.h>
+#include <pjmedia/endpoint.h>
+#include <pjmedia/rtp.h>
+#include <pjmedia/rtcp.h>
+#include <pjlib-util/base64.h>
+#include <pj/assert.h>
+#include <pj/lock.h>
+#include <pj/log.h>
+#include <pj/os.h>
+#include <pj/pool.h>
+#include <pj/math.h>
+#include <pj/rand.h>
+#include <ctype.h>
+#include <stdlib.h>
+#include <zorg/zorg.h>
+#include <zorg/zrtp.h>
+#include <zorg/srtp.h>
+#include <zorg/glue.h>
+
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+
+const char* get_zrtplib_errstr(int err);
+const char* get_zrtpproto_errstr(int err);
+
+#define THIS_FILE   "transport_zrtp.c"
+
+/* Maximum size of packet */
+#define MAX_RTP_PACKET_GROW_LEN     PJMEDIA_ZRTP_MAX_AUTH_TAG_LEN
+#define MAX_RTCP_PACKET_GROW_LEN     PJMEDIA_ZRTP_MAX_AUTH_TAG_LEN
+#define MAX_RTP_PACKET_LEN	    1500
+#define MAX_RTCP_PACKET_LEN	    1500
+#define MAX_RTP_BUFFER_LEN	    (MAX_RTP_PACKET_LEN + MAX_RTP_PACKET_GROW_LEN)
+#define MAX_RTCP_BUFFER_LEN	    (MAX_RTCP_PACKET_LEN + MAX_RTCP_PACKET_GROW_LEN)
+
+#if defined(PJMEDIA_ZRTP_MASQUERADE) && (PJMEDIA_ZRTP_MASQUERADE != 0)
+#define ZRTP_MAGIC 0x5a525450
+static const char zrtp_magic[4] = { 0x5a, 0x52, 0x54, 0x50 };
+#define SIZE_OF_MASQ_ZRTP_MAGIC		4
+#define SIZE_OF_MASQ_SSRC		4
+#define SIZE_OF_MASQ_SEQNO		2
+#define OFFSET_OF_MASQ_ZRTP_MAGIC	0
+#define OFFSET_OF_MASQ_SSRC		(OFFSET_OF_MASQ_ZRTP_MAGIC + SIZE_OF_MASQ_ZRTP_MAGIC)
+#define OFFSET_OF_MASQ_SEQNO		(OFFSET_OF_MASQ_SSRC + SIZE_OF_MASQ_SSRC)
+#define SIZE_OF_MASQ_OVERHEAD		(OFFSET_OF_MASQ_SEQNO + SIZE_OF_MASQ_SEQNO)
+#define ROFFSET_OF_MASQ_ZRTP_MAGIC	(OFFSET_OF_MASQ_ZRTP_MAGIC - SIZE_OF_MASQ_OVERHEAD)
+#define ROFFSET_OF_MASQ_SSRC		(OFFSET_OF_MASQ_SSRC - SIZE_OF_MASQ_OVERHEAD)
+#define ROFFSET_OF_MASQ_SEQNO		(OFFSET_OF_MASQ_SEQNO - SIZE_OF_MASQ_OVERHEAD)
+#endif
+
+static Zorg			*pjmedia_zrtp_global = NULL;
+static Zorg_CryptoSuite		*pjmedia_zrtp_crypto = NULL;
+static Zorg_SRTP		*pjmedia_zrtp_srtp = NULL;
+static Zorg_Cache		*pjmedia_zrtp_cache = NULL;
+static pj_caching_pool		 pjmedia_zrtp_global_pool_factory;
+static pj_pool_t		*pjmedia_zrtp_global_pool = NULL;
+static pj_lock_t		*pjmedia_zrtp_lock = NULL;
+static pjmedia_zrtp_callbacks	 pjmedia_zrtp_cb;
+static char			 pjmedia_zrtp_client_id[16 + 1];
+static pj_bool_t		 pjmedia_zrtp_initialized = PJ_FALSE;
+
+static pj_bool_t		 pjmedia_zrtp_valid_global_zid = PJ_FALSE;
+static pjmedia_zid_t		 pjmedia_zrtp_global_zid;
+
+#define LOCK_ZRTP_GLOBAL() pj_lock_acquire (pjmedia_zrtp_lock)
+#define UNLOCK_ZRTP_GLOBAL() pj_lock_release (pjmedia_zrtp_lock)
+
+#define LOCK_ZRTP(S_) LOCK_ZRTP_GLOBAL() /* FIXME: bad paralellism */
+#define UNLOCK_ZRTP(S_) UNLOCK_ZRTP_GLOBAL() /* FIXME: bad paralellism */
+#define LOCK_ZRTP_IF(S_) LOCK_ZRTP_GLOBAL() /* FIXME: bad paralellism */
+#define UNLOCK_ZRTP_IF(S_) UNLOCK_ZRTP_GLOBAL() /* FIXME: bad paralellism */
+
+#if defined(PJMEDIA_ZRTP_CHECK_AVP) && (PJMEDIA_ZRTP_CHECK_AVP != 0)
+static const pj_str_t ID_RTP_AVP   = { "RTP/AVP", 7 };
+static const pj_str_t ID_RTP_SAVP  = { "RTP/SAVP", 8 };
+#endif
+static const pj_str_t ID_INACTIVE  = { "inactive", 8 };
+static const pj_str_t ID_ZRTP_HASH = { "zrtp-hash", 9 };
+
+struct zrtp_event;
+
+typedef struct zrtp_event
+{
+    PJ_DECL_LIST_MEMBER(struct zrtp_event);
+    pj_timer_entry entry;
+}
+zrtp_event;
+
+typedef struct transport_zrtp
+{
+    pjmedia_transport		 base;		    /**< Base transport interface.  */
+    pj_pool_t			*pool;		    /**< Pool for transport ZRTP.   */
+    pj_lock_t			*mutex;
+    pjmedia_zrtp_media_setting	 setting;
+    unsigned 			 media_option;
+    pj_timer_heap_t		*timer_heap;
+    pj_bool_t			 pending_destroy;
+    pj_bool_t			 event_entry_used;
+    zrtp_event			 events;
+
+    /* ZRTP policy */
+    pj_bool_t		 	 session_inited;
+    pj_bool_t			 offerer_side;
+    pj_bool_t			 bypass_zrtp;
+
+    /* ZRTP backend */
+    Zorg_Session		*zrtp_session;
+    Zorg_Stream			*zrtp_stream;
+    pjmedia_zid_t		 zrtp_local_id;
+    pj_uint32_t			 zrtp_ssrc;
+    pj_timer_entry		 zrtp_task_entry;
+    Zorg_Task			*zrtp_task;
+    pjmedia_zrtp_stream_state	 zrtp_stream_state;
+
+#if defined(PJMEDIA_ZRTP_MASQUERADE) && (PJMEDIA_ZRTP_MASQUERADE != 0)
+    /* Masquerading */
+    pj_bool_t			 masq_peer;
+    pj_int16_t			 masq_pt;
+    pj_uint16_t			 masq_seq;
+    pj_uint32_t			 masq_ts;
+    pjmedia_zrtp_masquerade_mode masq_mode;
+#endif
+
+    /* Stream information */
+    void			*user_data;
+    void			(*rtp_cb)( void *user_data,
+					   void *pkt,
+					   pj_ssize_t size);
+    void			(*rtcp_cb)(void *user_data,
+					   void *pkt,
+					   pj_ssize_t size);
+        
+    /* Transport information */
+    pjmedia_transport		*member_tp; /**< Underlying transport.       */
+
+    /* ZRTP usage policy of peer. This field is updated when media is starting.
+     * This is useful when ZRTP is in optional mode and peer is using mandatory
+     * mode, so when local is about to reinvite/update, it should offer 
+     * RTP/SAVP instead of offering RTP/AVP.
+     */
+    pjmedia_zrtp_use	 	 peer_use;
+} transport_zrtp;
+
+/*
+ * This callback is called by transport when incoming rtp is received
+ */
+static void transport_rtp_cb( void *user_data, void *pkt, pj_ssize_t size);
+
+/*
+ * This callback is called by transport when incoming rtcp is received
+ */
+static void transport_rtcp_cb( void *user_data, void *pkt, pj_ssize_t size);
+
+/*
+ * These are media transport operations.
+ */
+static pj_status_t transport_get_info (pjmedia_transport *tp,
+				       pjmedia_transport_info *info);
+static pj_status_t transport_attach   (pjmedia_transport *tp,
+				       void *user_data,
+				       const pj_sockaddr_t *rem_addr,
+				       const pj_sockaddr_t *rem_rtcp,
+				       unsigned addr_len,
+				       void (*rtp_cb)(void*,
+						      void*,
+						      pj_ssize_t),
+				       void (*rtcp_cb)(void*,
+						       void*,
+						       pj_ssize_t));
+static void	   transport_detach   (pjmedia_transport *tp,
+				       void *strm);
+static pj_status_t transport_send_rtp( pjmedia_transport *tp,
+				       const void *pkt,
+				       pj_size_t size);
+static pj_status_t transport_send_rtcp(pjmedia_transport *tp,
+				       const void *pkt,
+				       pj_size_t size);
+static pj_status_t transport_send_rtcp2(pjmedia_transport *tp,
+				       const pj_sockaddr_t *addr,
+				       unsigned addr_len,
+				       const void *pkt,
+				       pj_size_t size);
+static pj_status_t transport_media_create(pjmedia_transport *tp,
+				       pj_pool_t *sdp_pool,
+				       unsigned options,
+				       const pjmedia_sdp_session *sdp_remote,
+				       unsigned media_index);
+static pj_status_t transport_encode_sdp(pjmedia_transport *tp,
+				       pj_pool_t *sdp_pool,
+				       pjmedia_sdp_session *sdp_local,
+				       const pjmedia_sdp_session *sdp_remote,
+				       unsigned media_index);
+static pj_status_t transport_media_start (pjmedia_transport *tp,
+				       pj_pool_t *pool,
+				       const pjmedia_sdp_session *sdp_local,
+				       const pjmedia_sdp_session *sdp_remote,
+				       unsigned media_index);
+static pj_status_t transport_media_stop(pjmedia_transport *tp);
+static pj_status_t transport_simulate_lost(pjmedia_transport *tp,
+				       pjmedia_dir dir,
+				       unsigned pct_lost);
+static pj_status_t transport_destroy  (pjmedia_transport *tp);
+
+static pjmedia_transport_op transport_zrtp_op = 
+{
+    &transport_get_info,
+    &transport_attach,
+    &transport_detach,
+    &transport_send_rtp,
+    &transport_send_rtcp,
+    &transport_send_rtcp2,
+    &transport_media_create,
+    &transport_encode_sdp,
+    &transport_media_start,
+    &transport_media_stop,
+    &transport_simulate_lost,
+    &transport_destroy
+};
+
+static pj_status_t pjmedia_zrtp_errno_from_zorg(enum Zorg_ErrorCode e) {
+    if(e == Zorg_ErrorNone)
+	return PJ_SUCCESS;
+    else if(e >= Zorg_ErrorZRTPProtocolErrorLow && e <= Zorg_ErrorZRTPProtocolErrorHigh) {
+	PJ_ASSERT_RETURN((e - Zorg_ErrorZRTPProtocolErrorLow) <= (PJMEDIA_ZRTPPROTO_ERRNO_END - PJMEDIA_ZRTPPROTO_ERRNO_START), PJ_EBUG);
+	return PJMEDIA_ERRNO_FROM_ZRTPPROTO(e - Zorg_ErrorZRTPProtocolErrorLow);
+    } else {
+	PJ_ASSERT_RETURN(e <= (PJMEDIA_ZRTPLIB_ERRNO_END - PJMEDIA_ZRTPLIB_ERRNO_START), PJ_EBUG);
+	return PJMEDIA_ERRNO_FROM_ZRTPLIB(e);
+    }
+}
+
+static Zorg_TaskCookie * pjmedia_zrtp_session_runTask(Zorg_Error * e, Zorg_Session * session, Zorg_Task * task, int delay);
+static void pjmedia_zrtp_session_cancelTask(Zorg_Error * e, Zorg_Session * session, Zorg_TaskCookie * taskId);
+static void pjmedia_zrtp_session_cancelAllTasks(Zorg_Session * session);
+
+static const Zorg_SessionInterface pjmedia_zrtp_sessionInterface =
+{
+    &pjmedia_zrtp_session_runTask,
+    &pjmedia_zrtp_session_cancelTask,
+    &pjmedia_zrtp_session_cancelAllTasks
+};
+
+static void pjmedia_zrtp_stream_sendMessage(Zorg_Error * e, Zorg_Stream * stream, const struct Zorg_Blob * messagePacket);
+static void pjmedia_zrtp_stream_onProtocolEvent(Zorg_Stream * stream, enum Zorg_Event evt);
+static void pjmedia_zrtp_stream_onSecurityEvent(Zorg_Stream * stream, enum Zorg_SecurityEvent evt);
+
+static const Zorg_StreamInterface pjmedia_zrtp_streamInterface =
+{
+    &pjmedia_zrtp_stream_sendMessage,
+    &pjmedia_zrtp_stream_onProtocolEvent,
+    &pjmedia_zrtp_stream_onSecurityEvent
+};
+
+static pj_timer_entry *pjmedia_zrtp_get_event_entry(transport_zrtp * zrtp, int evt, pj_timer_heap_callback *cb)
+{
+    zrtp_event *entry = NULL;
+
+    LOCK_ZRTP (zrtp);
+
+    if (!zrtp->event_entry_used) {
+	zrtp->event_entry_used = PJ_TRUE;
+	entry = &zrtp->events;
+    }
+
+    UNLOCK_ZRTP (zrtp);
+
+    if (entry == NULL) {
+	entry = zrtp->pool->factory->policy.block_alloc (zrtp->pool->factory, sizeof(zrtp_event));
+
+	if (entry)
+	    pj_list_init (entry);
+    }
+
+    if (entry) {
+	pj_timer_entry_init (&entry->entry, evt, zrtp, cb);
+
+	LOCK_ZRTP (zrtp);
+	pj_list_push_back (&zrtp->events, entry);
+	UNLOCK_ZRTP (zrtp);
+    }
+
+    return &entry->entry;
+}
+
+static void pjmedia_zrtp_release_event_entry(transport_zrtp * zrtp, pj_timer_entry *entry)
+{
+    pj_bool_t destroy_transport = PJ_FALSE;
+    zrtp_event *evt = (zrtp_event *)((char *)entry - offsetof(zrtp_event, entry));
+
+    PJ_ASSERT_RETURN (zrtp && entry,);
+
+    LOCK_ZRTP (zrtp);
+
+    if (evt == &zrtp->events)
+	zrtp->event_entry_used = PJ_FALSE;
+    else
+	pj_list_erase (evt);
+
+    destroy_transport = zrtp->pending_destroy;
+    UNLOCK_ZRTP (zrtp);
+
+    if (evt != &zrtp->events)
+	zrtp->pool->factory->policy.block_free (zrtp->pool->factory, evt, sizeof(zrtp_event));
+
+    if (destroy_transport)
+	zrtp->base.op->destroy (&zrtp->base);
+}
+
+static void pjmedia_protocol_event_callback(pj_timer_heap_t *timer_heap, pj_timer_entry *entry)
+{
+    transport_zrtp *zrtp = entry->user_data;
+    pjmedia_zrtp_event evt = entry->id;
+
+    PJ_UNUSED_ARG(timer_heap);
+
+    if (evt == PJMEDIA_ZRTP_EVENT_SECURE && pjmedia_zrtp_cb.on_secure)
+	pjmedia_zrtp_cb.on_secure (&zrtp->base);
+
+    if ((evt == PJMEDIA_ZRTP_EVENT_NO_ZRTP || evt == PJMEDIA_ZRTP_EVENT_CLEAR) && pjmedia_zrtp_cb.on_not_secure)
+	pjmedia_zrtp_cb.on_not_secure (&zrtp->base);
+
+    if (pjmedia_zrtp_cb.on_protocol_event)
+	pjmedia_zrtp_cb.on_protocol_event (&zrtp->base, evt);
+
+    pjmedia_zrtp_release_event_entry (zrtp, entry);
+}
+
+static void pjmedia_security_event_callback(pj_timer_heap_t *timer_heap, pj_timer_entry *entry)
+{
+    transport_zrtp *zrtp = entry->user_data;
+    pjmedia_zrtp_security_event evt = entry->id;
+
+    PJ_UNUSED_ARG(timer_heap);
+
+    if (pjmedia_zrtp_cb.on_security_event)
+	pjmedia_zrtp_cb.on_security_event (&zrtp->base, evt);
+
+    pjmedia_zrtp_release_event_entry (zrtp, entry);
+}
+
+static pj_timer_entry *pjmedia_zrtp_get_protocol_event_entry(transport_zrtp * zrtp, pjmedia_zrtp_event evt)
+{
+    return pjmedia_zrtp_get_event_entry (zrtp, evt, &pjmedia_protocol_event_callback);
+}
+
+static void pjmedia_zrtp_stream_onProtocolEvent(Zorg_Stream * stream, enum Zorg_Event evt)
+{
+    pjmedia_zrtp_event pj_evt;
+    transport_zrtp * zrtp = Zorg_Stream_GetUserData(stream);
+    PJ_ASSERT_RETURN(zrtp,);
+
+    switch(evt)
+    {
+    case Zorg_EventStop:
+	pj_evt = PJMEDIA_ZRTP_EVENT_STOP;
+	break;
+
+    case Zorg_EventNoZRTP:
+	pj_evt = PJMEDIA_ZRTP_EVENT_NO_ZRTP;
+	break;
+
+    case Zorg_EventClear:
+	pj_evt = PJMEDIA_ZRTP_EVENT_CLEAR;
+	break;
+	
+    case Zorg_EventSecure:
+	pj_evt = PJMEDIA_ZRTP_EVENT_SECURE;
+	break;
+
+    case Zorg_EventDiscovery:
+	pj_evt = PJMEDIA_ZRTP_EVENT_DISCOVERY;
+	break;
+
+    case Zorg_EventKeyAgreement:
+	pj_evt = PJMEDIA_ZRTP_EVENT_KEY_AGREEMENT;
+	break;
+
+    case Zorg_EventConfirming:
+	pj_evt = PJMEDIA_ZRTP_EVENT_CONFIRMING;
+	break;
+
+    case Zorg_EventLocalError:
+	pj_evt = PJMEDIA_ZRTP_EVENT_LOCAL_ERROR;
+	break;
+
+    default:
+	PJ_ASSERT_RETURN(PJ_FALSE,);
+    }
+
+    zrtp->zrtp_stream_state = (pjmedia_zrtp_stream_state)pj_evt;
+
+    if (pjmedia_zrtp_cb.on_protocol_event ||
+	(pj_evt == PJMEDIA_ZRTP_EVENT_SECURE && pjmedia_zrtp_cb.on_secure) ||
+	((pj_evt == PJMEDIA_ZRTP_EVENT_NO_ZRTP || pj_evt == PJMEDIA_ZRTP_EVENT_CLEAR) && pjmedia_zrtp_cb.on_not_secure)) {
+	pj_status_t status;
+	pj_time_val nodelay = { 0, 0 };
+	pj_timer_entry *entry = pjmedia_zrtp_get_protocol_event_entry (zrtp, evt);
+
+	if (entry) {
+	    status = pj_timer_heap_schedule (zrtp->timer_heap, entry, &nodelay);
+
+	    if (status != PJ_SUCCESS)
+		pjmedia_zrtp_release_event_entry (zrtp, entry);
+	} else
+	    status = PJ_ENOMEM;
+
+	if (status != PJ_SUCCESS)
+	    PJ_LOG(1,(zrtp->base.name, "Error sending notification for protocol event %d: %d", evt, status));
+    }
+}
+
+static pj_timer_entry *pjmedia_zrtp_get_security_event_entry(transport_zrtp * zrtp, pjmedia_zrtp_event evt)
+{
+    return pjmedia_zrtp_get_event_entry (zrtp, evt, &pjmedia_security_event_callback);
+}
+
+void pjmedia_zrtp_stream_onSecurityEvent(Zorg_Stream * stream, enum Zorg_SecurityEvent evt)
+{
+    pjmedia_zrtp_security_event pj_evt;
+    transport_zrtp * zrtp = Zorg_Stream_GetUserData(stream);
+    PJ_ASSERT_RETURN(zrtp,);
+
+    switch(evt)
+    {
+    case Zorg_SecurityEventError:
+	pj_evt = PJMEDIA_ZRTP_EVENT_ERROR;
+	break;
+
+    case Zorg_SecurityEventCacheMismatch:
+	pj_evt = PJMEDIA_ZRTP_EVENT_CACHE_MISMATCH;
+	break;
+
+    case Zorg_SecurityEventBadHelloHash:
+	pj_evt = PJMEDIA_ZRTP_EVENT_BAD_HELLO_HASH;
+	break;
+
+    case Zorg_SecurityEventBadMessageMAC:
+	pj_evt = PJMEDIA_ZRTP_EVENT_BAD_MESSAGE_MAC;
+	break;
+
+    default:
+	pj_assert(PJ_FALSE);
+	pj_evt = PJMEDIA_ZRTP_EVENT_ERROR;
+	break;
+    }
+
+    if (pjmedia_zrtp_cb.on_security_event) {
+	pj_status_t status;
+	pj_time_val nodelay = { 0, 0 };
+	pj_timer_entry *entry = pjmedia_zrtp_get_security_event_entry (zrtp, pj_evt);
+
+	if (entry) {
+	    status = pj_timer_heap_schedule (zrtp->timer_heap, entry, &nodelay);
+
+	    if (status != PJ_SUCCESS)
+		pjmedia_zrtp_release_event_entry (zrtp, entry);
+	} else
+	    status = PJ_ENOMEM;
+
+	if (status != PJ_SUCCESS)
+	    PJ_LOG(1,(zrtp->base.name, "Error sending notification for security event %d: %d", evt, status));
+    }
+}
+
+/* FIXME: we assume zrtp.org will only ever need one active task at the same time */
+static Zorg_Task * pjmedia_zrtp_replace_task (transport_zrtp * zrtp, Zorg_Task * newTask)
+{
+    Zorg_Task * cancelTask;
+
+    PJ_ASSERT_RETURN (zrtp, NULL);
+
+    pj_timer_heap_cancel (zrtp->timer_heap, &zrtp->zrtp_task_entry);
+
+    cancelTask = zrtp->zrtp_task;
+    zrtp->zrtp_task = newTask;
+
+    return cancelTask;
+}
+
+static void pjmedia_zrtp_run_task (transport_zrtp * zrtp)
+{
+    Zorg_Task * runTask;
+
+    PJ_ASSERT_RETURN (zrtp,);
+
+    runTask = pjmedia_zrtp_replace_task (zrtp, NULL);
+
+    if (runTask)
+	Zorg_Task_Run (runTask);
+}
+
+static void pjmedia_zrtp_cancel_task (transport_zrtp * zrtp)
+{
+    Zorg_Task * cancelTask;
+
+    PJ_ASSERT_RETURN (zrtp,);
+
+    cancelTask = pjmedia_zrtp_replace_task (zrtp, NULL);
+
+    if (cancelTask)
+	Zorg_Task_Cancel (cancelTask);
+}
+
+static void pjmedia_zrtp_task_callback(pj_timer_heap_t *timer_heap, struct pj_timer_entry *entry)
+{
+    transport_zrtp *zrtp = entry->user_data;
+    PJ_UNUSED_ARG(timer_heap);
+    LOCK_ZRTP (zrtp);
+    pjmedia_zrtp_run_task (zrtp);
+    UNLOCK_ZRTP (zrtp);
+}
+
+static Zorg_TaskCookie * pjmedia_zrtp_session_runTask(Zorg_Error * e, Zorg_Session * session, Zorg_Task * task, int delay)
+{
+    Zorg_Task * cancelTask = NULL;
+
+    transport_zrtp * zrtp;
+    pj_time_val pjdelay;
+
+    PJ_ASSERT_ON_FAIL(session && task && delay >= 0, ZORG_SET_ERROR(*e, Zorg_ErrorInternal));
+
+    if (ZORG_FAILURE(*e))
+	return NULL;
+
+    zrtp = Zorg_Session_GetUserData(session);
+
+    PJ_ASSERT_ON_FAIL (zrtp, ZORG_SET_ERROR(*e, Zorg_ErrorInternal));
+
+    if (ZORG_FAILURE(*e))
+	return NULL;
+
+    pjdelay.sec = delay / 1000;
+    pjdelay.msec = delay % 1000;
+
+    cancelTask = pjmedia_zrtp_replace_task (zrtp, task);
+    pj_timer_heap_schedule (zrtp->timer_heap, &zrtp->zrtp_task_entry, &pjdelay);
+
+    if (cancelTask)
+	Zorg_Task_Cancel (cancelTask);
+
+    return (Zorg_TaskCookie *)&zrtp->zrtp_task_entry;
+}
+
+static void pjmedia_zrtp_session_cancelTask(Zorg_Error * e, Zorg_Session * session, Zorg_TaskCookie * taskId)
+{
+    transport_zrtp * zrtp;
+
+    PJ_ASSERT_ON_FAIL(session && taskId, ZORG_SET_ERROR(*e, Zorg_ErrorInternal));
+
+    if (ZORG_FAILURE(*e))
+	return;
+
+    zrtp = Zorg_Session_GetUserData(session);
+
+    PJ_ASSERT_ON_FAIL(zrtp, ZORG_SET_ERROR(*e, Zorg_ErrorInternal));
+
+    if (ZORG_FAILURE(*e))
+	return;
+
+    PJ_ASSERT_ON_FAIL(taskId == (Zorg_TaskCookie *)&zrtp->zrtp_task_entry, ZORG_SET_ERROR(*e, Zorg_ErrorInternal));
+
+    if (ZORG_FAILURE(*e))
+	return;
+
+    pjmedia_zrtp_cancel_task (zrtp);
+}
+
+static void pjmedia_zrtp_session_cancelAllTasks(Zorg_Session * session)
+{
+    transport_zrtp * zrtp;
+
+    PJ_ASSERT_ON_FAIL(session, return);
+
+    zrtp = Zorg_Session_GetUserData(session);
+    PJ_ASSERT_ON_FAIL(zrtp, return);
+
+    pjmedia_zrtp_cancel_task (zrtp);
+}
+
+static int ZRTP_LOG_BASE_LEVEL = 3; /* TODO: define */
+static int ZRTP_LOG_MAX_LEVEL = 4; /* TODO: define */
+
+extern void Zorg_Log(int level, const char * context, const char * format, va_list ap)
+{
+    level += ZRTP_LOG_BASE_LEVEL - 1;
+
+    if(level < 1)
+	level = 1;
+    else if(level > ZRTP_LOG_MAX_LEVEL)
+	level = ZRTP_LOG_MAX_LEVEL;
+
+    pj_log(context, level, format, ap);
+}
+
+static int LOG_LEVEL = 5; /* TODO: define */
+
+extern int Zorg_LogLevel(void)
+{
+    return LOG_LEVEL;
+}
+
+extern int zorg_vsnprintf(char * str, size_t size, const char * format, va_list ap)
+{
+    return pj_ansi_vsnprintf(str, size, format, ap);
+}
+
+extern void * Zorg_Impl_RandomSeed(Zorg_Error * e, void * (* callback)(Zorg_Error * e, void * context, const struct Zorg_Blob * seed), void * context)
+{
+    struct Zorg_Blob seed;
+
+    struct random_enough
+    {
+	pj_time_val tv;
+	pj_uint32_t pid;
+    }
+    seed_data;
+
+    if(ZORG_FAILURE(*e))
+	return NULL;
+
+    pj_gettimeofday(&seed_data.tv);
+    seed_data.pid = pj_getpid();
+
+    seed.dataSize = sizeof(seed_data);
+    seed.maxSize = sizeof(seed_data);
+    seed.buffer = &seed_data;
+
+    return callback(e, context, &seed);
+}
+
+PJ_DEF(pj_status_t) pjmedia_zrtp_init_lib(pjmedia_zrtp_setting const *opt)
+{
+    pj_status_t status;
+    ZORG_DECL_ERROR(e);
+
+    /* Init libsrtp. */
+    status = pjmedia_srtp_init_lib();
+    if (status != PJ_SUCCESS) {
+	PJ_LOG(1, (THIS_FILE, "Error initializing SRTP library"));
+	return status;
+    }
+
+    if (pjmedia_zrtp_initialized)
+	return PJ_SUCCESS;
+
+    pj_bzero (&pjmedia_zrtp_client_id, sizeof(pjmedia_zrtp_client_id));
+    pj_memcpy (&pjmedia_zrtp_client_id, opt->client_id.ptr, PJ_MIN(sizeof(pjmedia_zrtp_client_id) - 1, opt->client_id.slen));
+
+    pjmedia_zrtp_cb = opt->callbacks;
+
+    pj_caching_pool_init (&pjmedia_zrtp_global_pool_factory, pj_pool_factory_get_default_policy(), 0);
+
+    pjmedia_zrtp_global_pool = pj_pool_create (&pjmedia_zrtp_global_pool_factory.factory, "zrtp global pool", 512, 512, NULL);
+
+    if (pjmedia_zrtp_global_pool) {
+	status = pj_lock_create_recursive_mutex (pjmedia_zrtp_global_pool, "zrtp global lock", &pjmedia_zrtp_lock);
+
+	if (status == PJ_SUCCESS) {
+	    static char cache_path_buf[PJ_MAXPATH];
+	    size_t cache_path_len = PJ_MIN(sizeof(cache_path_buf) - 1, opt->cache_path.slen);
+	    pj_memcpy (cache_path_buf, opt->cache_path.ptr, cache_path_len);
+	    cache_path_buf[cache_path_len] = 0;
+
+	    pjmedia_zrtp_crypto = Zorg_Impl_CryptoSuite_Create(&e);
+	    pjmedia_zrtp_srtp = Zorg_Impl_SRTP_Create(&e);
+
+	    pjmedia_zrtp_cache = Zorg_Impl_Cache_Create(&e, cache_path_len ? cache_path_buf : NULL, pjmedia_zrtp_crypto);
+	    pjmedia_zrtp_global = Zorg_Create(&e, pjmedia_zrtp_crypto, pjmedia_zrtp_srtp, pjmedia_zrtp_cache);
+
+	    if (ZORG_SUCCESS(e)) {
+    		pjmedia_zrtp_initialized = PJ_TRUE;
+
+		if (pj_atexit(pjmedia_zrtp_deinit_lib) != PJ_SUCCESS) {
+		    PJ_LOG(4, (THIS_FILE, "Failed to register zrtp.org deinit."));
+		}
+	    } else
+		status = PJ_ENOMEM;
+	}
+    }
+    else
+	status = PJ_ENOMEM;
+
+    if (status != PJ_SUCCESS)
+	pjmedia_zrtp_deinit_lib ();
+
+    return PJ_SUCCESS;
+}
+
+PJ_DEF(void) pjmedia_zrtp_deinit_lib(void)
+{
+    if (pjmedia_zrtp_global) {
+	Zorg_Destroy (pjmedia_zrtp_global);
+	pjmedia_zrtp_global = NULL;
+    }
+
+    if (pjmedia_zrtp_cache) {
+	Zorg_Impl_Cache_Destroy (pjmedia_zrtp_cache);
+	pjmedia_zrtp_cache = NULL;
+    }
+
+    if (pjmedia_zrtp_srtp) {
+	Zorg_Impl_SRTP_Destroy (pjmedia_zrtp_srtp);
+	pjmedia_zrtp_srtp = NULL;
+    }
+
+    if (pjmedia_zrtp_crypto) {
+	Zorg_Impl_CryptoSuite_Destroy (pjmedia_zrtp_crypto);
+	pjmedia_zrtp_crypto = NULL;
+    }
+
+    if (pjmedia_zrtp_lock) {
+	pj_lock_destroy (pjmedia_zrtp_lock);
+	pjmedia_zrtp_lock = NULL;
+    }
+
+    if (pjmedia_zrtp_global_pool) {
+	pj_pool_release (pjmedia_zrtp_global_pool);
+	pjmedia_zrtp_global_pool = NULL;
+    }
+
+    if (pjmedia_zrtp_initialized)
+	pj_caching_pool_destroy (&pjmedia_zrtp_global_pool_factory);
+
+    pjmedia_zrtp_initialized = PJ_FALSE;
+}
+
+PJ_DEF(void) pjmedia_zrtp_setting_default(pjmedia_zrtp_setting *opt)
+{
+    pj_bzero(opt, sizeof(pjmedia_zrtp_setting));
+    opt->client_id = pj_str ("pjsip zrtp peer");
+    opt->cache_path = pj_str ("./pjmedia_zrtp_cache.dat");
+}
+
+static pj_status_t pjmedia_zrtp_profile_from_zorg_to_pj (const struct Zorg_Profile *from, pjmedia_zrtp_profile_t *to)
+{
+    pj_size_t i;
+
+    pj_bzero (to, sizeof(*to));
+
+    to->auto_secure = !!from->autoSecure;
+    to->fast_discovery = !!from->fastAcknowledge;
+    to->disclosure = !!from->disclose;
+    to->cache_ttl = from->expireTime;
+    pj_assert(!from->hashAlgorithmsImplyMandatory);
+    pj_assert(!from->cipherAlgorithmsImplyMandatory);
+    pj_assert(!from->authTagTypesImplyMandatory);
+    pj_assert(!from->keyAgreementTypesImplyMandatory);
+    pj_assert(!from->sasTypesImplyMandatory);
+
+    for(i = 0; i < Zorg_Profile_ComponentsMaxCount && from->hashAlgorithms[i]; ++ i) {
+	switch (from->hashAlgorithms[i]) {
+	case Zorg_HashS256: to->hash_types[i] = PJMEDIA_ZRTP_HASH_S256; break;
+	case Zorg_HashS384: to->hash_types[i] = PJMEDIA_ZRTP_HASH_S384; break;
+	case Zorg_HashN256: to->hash_types[i] = PJMEDIA_ZRTP_HASH_N256; break;
+	case Zorg_HashN384: to->hash_types[i] = PJMEDIA_ZRTP_HASH_N384; break;
+	default: PJ_ASSERT_RETURN(0, PJ_EBUG);
+	}
+    }
+
+    for(i = 0; i < Zorg_Profile_ComponentsMaxCount && from->cipherAlgorithms[i]; ++ i) {
+	switch (from->cipherAlgorithms[i]) {
+	case Zorg_CipherAES1: to->cipher_types[i] = PJMEDIA_ZRTP_CIPHER_AES1; break;
+	case Zorg_CipherAES2: to->cipher_types[i] = PJMEDIA_ZRTP_CIPHER_AES2; break;
+	case Zorg_CipherAES3: to->cipher_types[i] = PJMEDIA_ZRTP_CIPHER_AES3; break;
+	case Zorg_Cipher2FS1: to->cipher_types[i] = PJMEDIA_ZRTP_CIPHER_2FS1; break;
+	case Zorg_Cipher2FS2: to->cipher_types[i] = PJMEDIA_ZRTP_CIPHER_2FS2; break;
+	case Zorg_Cipher2FS3: to->cipher_types[i] = PJMEDIA_ZRTP_CIPHER_2FS3; break;
+	case Zorg_CipherCAM1: to->cipher_types[i] = PJMEDIA_ZRTP_CIPHER_CAM1; break;
+	case Zorg_CipherCAM2: to->cipher_types[i] = PJMEDIA_ZRTP_CIPHER_CAM2; break;
+	case Zorg_CipherCAM3: to->cipher_types[i] = PJMEDIA_ZRTP_CIPHER_CAM3; break;
+	default: PJ_ASSERT_RETURN(0, PJ_EBUG);
+	}
+    }
+
+    for(i = 0; i < Zorg_Profile_ComponentsMaxCount && from->authTagTypes[i]; ++ i) {
+	switch (from->authTagTypes[i]) {
+	case Zorg_AuthTagHS32: to->auth_types[i] = PJMEDIA_ZRTP_AUTH_HS32; break;
+	case Zorg_AuthTagHS80: to->auth_types[i] = PJMEDIA_ZRTP_AUTH_HS80; break;
+	case Zorg_AuthTagSK32: to->auth_types[i] = PJMEDIA_ZRTP_AUTH_SK32; break;
+	case Zorg_AuthTagSK64: to->auth_types[i] = PJMEDIA_ZRTP_AUTH_SK80; break;
+	default: PJ_ASSERT_RETURN(0, PJ_EBUG);
+	}
+    }
+
+    for(i = 0; i < Zorg_Profile_ComponentsMaxCount && from->keyAgreementTypes[i]; ++ i) {
+	switch (from->keyAgreementTypes[i]) {
+	case Zorg_KeyAgreementDH3k: to->pk_types[i] = PJMEDIA_ZRTP_PK_DH3K; break;
+	case Zorg_KeyAgreementDH2k: to->pk_types[i] = PJMEDIA_ZRTP_PK_DH2K; break;
+	case Zorg_KeyAgreementEC25: to->pk_types[i] = PJMEDIA_ZRTP_PK_EC25; break;
+	case Zorg_KeyAgreementEC38: to->pk_types[i] = PJMEDIA_ZRTP_PK_EC38; break;
+	case Zorg_KeyAgreementEC52: to->pk_types[i] = PJMEDIA_ZRTP_PK_EC52; break;
+	case Zorg_KeyAgreementPrsh: to->pk_types[i] = PJMEDIA_ZRTP_PK_PRSH; break;
+	case Zorg_KeyAgreementMult: to->pk_types[i] = PJMEDIA_ZRTP_PK_MULT; break;
+	default: PJ_ASSERT_RETURN(0, PJ_EBUG);
+	}
+    }
+
+    for(i = 0; i < Zorg_Profile_ComponentsMaxCount && from->sasTypes[i]; ++ i) {
+	switch (from->sasTypes[i]) {
+	case Zorg_SASB32: to->sas_types[i] = PJMEDIA_ZRTP_SAS_B32; break;
+	case Zorg_SASB256: to->sas_types[i] = PJMEDIA_ZRTP_SAS_B256; break;
+	default: PJ_ASSERT_RETURN(0, PJ_EBUG);
+	}
+    }
+
+    return PJ_SUCCESS;
+}
+
+static pj_status_t pjmedia_zrtp_profile_from_pj_to_zorg (const pjmedia_zrtp_profile_t *from, struct Zorg_Profile *to)
+{
+    pj_size_t i;
+
+    pj_bzero (to, sizeof(*to));
+
+    to->autoSecure = !!from->auto_secure;
+    to->disclose = !!from->disclosure;
+    to->fastAcknowledge = !!from->fast_discovery;
+    to->hashAlgorithmsImplyMandatory = 0;
+    to->cipherAlgorithmsImplyMandatory = 0;
+    to->authTagTypesImplyMandatory = 0;
+    to->keyAgreementTypesImplyMandatory = 0;
+    to->sasTypesImplyMandatory = 0;
+
+    for(i = 0; i < PJMEDIA_ZRTP_MAX_COMP_COUNT && from->hash_types[i]; ++ i) {
+	switch (from->hash_types[i]) {
+	case PJMEDIA_ZRTP_HASH_S256: to->hashAlgorithms[i] = Zorg_HashS256; break;
+	case PJMEDIA_ZRTP_HASH_S384: to->hashAlgorithms[i] = Zorg_HashS384; break;
+	case PJMEDIA_ZRTP_HASH_N256: to->hashAlgorithms[i] = Zorg_HashN256; break;
+	case PJMEDIA_ZRTP_HASH_N384: to->hashAlgorithms[i] = Zorg_HashN384; break;
+	default: return PJMEDIA_ZRTP_EHASH;
+	}
+    }
+
+    for(i = 0; i < PJMEDIA_ZRTP_MAX_COMP_COUNT && from->cipher_types[i]; ++ i) {
+	switch (from->cipher_types[i]) {
+	case PJMEDIA_ZRTP_CIPHER_AES1: to->cipherAlgorithms[i] = Zorg_CipherAES1; break;
+	case PJMEDIA_ZRTP_CIPHER_AES2: to->cipherAlgorithms[i] = Zorg_CipherAES2; break;
+	case PJMEDIA_ZRTP_CIPHER_AES3: to->cipherAlgorithms[i] = Zorg_CipherAES3; break;
+	case PJMEDIA_ZRTP_CIPHER_2FS1: to->cipherAlgorithms[i] = Zorg_Cipher2FS1; break;
+	case PJMEDIA_ZRTP_CIPHER_2FS2: to->cipherAlgorithms[i] = Zorg_Cipher2FS2; break;
+	case PJMEDIA_ZRTP_CIPHER_2FS3: to->cipherAlgorithms[i] = Zorg_Cipher2FS3; break;
+	case PJMEDIA_ZRTP_CIPHER_CAM1: to->cipherAlgorithms[i] = Zorg_CipherCAM1; break;
+	case PJMEDIA_ZRTP_CIPHER_CAM2: to->cipherAlgorithms[i] = Zorg_CipherCAM2; break;
+	case PJMEDIA_ZRTP_CIPHER_CAM3: to->cipherAlgorithms[i] = Zorg_CipherCAM3; break;
+	default: return PJMEDIA_ZRTP_ECIPHER;
+	}
+    }
+
+    for(i = 0; i < PJMEDIA_ZRTP_MAX_COMP_COUNT && from->auth_types[i]; ++ i) {
+	switch (from->auth_types[i]) {
+	case PJMEDIA_ZRTP_AUTH_HS32: to->authTagTypes[i] = Zorg_AuthTagHS32; break;
+	case PJMEDIA_ZRTP_AUTH_HS80: to->authTagTypes[i] = Zorg_AuthTagHS80; break;
+	case PJMEDIA_ZRTP_AUTH_SK32: to->authTagTypes[i] = Zorg_AuthTagSK32; break;
+	case PJMEDIA_ZRTP_AUTH_SK80: to->authTagTypes[i] = Zorg_AuthTagSK64; break;
+	default: return PJMEDIA_ZRTP_EAUTH;
+	}
+    }
+
+    for(i = 0; i < PJMEDIA_ZRTP_MAX_COMP_COUNT && from->pk_types[i]; ++ i) {
+	switch (from->pk_types[i]) {
+	case PJMEDIA_ZRTP_PK_DH3K: to->keyAgreementTypes[i] = Zorg_KeyAgreementDH3k; break;
+	case PJMEDIA_ZRTP_PK_DH2K: to->keyAgreementTypes[i] = Zorg_KeyAgreementDH2k; break;
+	case PJMEDIA_ZRTP_PK_EC25: to->keyAgreementTypes[i] = Zorg_KeyAgreementEC25; break;
+	case PJMEDIA_ZRTP_PK_EC38: to->keyAgreementTypes[i] = Zorg_KeyAgreementEC38; break;
+	case PJMEDIA_ZRTP_PK_EC52: to->keyAgreementTypes[i] = Zorg_KeyAgreementEC52; break;
+	case PJMEDIA_ZRTP_PK_PRSH: to->keyAgreementTypes[i] = Zorg_KeyAgreementPrsh; break;
+	case PJMEDIA_ZRTP_PK_MULT: to->keyAgreementTypes[i] = Zorg_KeyAgreementMult; break;
+	default: return PJMEDIA_ZRTP_EPK;
+	}
+    }
+
+    for(i = 0; i < PJMEDIA_ZRTP_MAX_COMP_COUNT && from->sas_types[i]; ++ i) {
+	switch (from->sas_types[i]) {
+	case PJMEDIA_ZRTP_SAS_B32: to->sasTypes[i] = Zorg_SASB32; break;
+	case PJMEDIA_ZRTP_SAS_B256: to->sasTypes[i] = Zorg_SASB256; break;
+	default: return PJMEDIA_ZRTP_ESAS;
+	}
+    }
+
+    to->expireTime = from->cache_ttl;
+    pj_memcpy (&to->clientId, pjmedia_zrtp_client_id, sizeof(to->clientId));
+
+    return PJ_SUCCESS;
+}
+
+static void pjmedia_zrtp_profile_default(pjmedia_zrtp_profile_t *profile)
+{
+    unsigned i;
+    struct Zorg_Profile zorg_profile;
+
+    Zorg_Profile_Default (&zorg_profile);
+
+    zorg_profile.hashAlgorithmsImplyMandatory = 0;
+    zorg_profile.cipherAlgorithmsImplyMandatory = 0;
+    zorg_profile.authTagTypesImplyMandatory = 0;
+    zorg_profile.keyAgreementTypesImplyMandatory = 0;
+    zorg_profile.sasTypesImplyMandatory = 0;
+
+    pjmedia_zrtp_profile_from_zorg_to_pj (&zorg_profile, profile);
+
+    i = 0;
+    profile->hash_types[i ++] = PJMEDIA_ZRTP_HASH_S256;
+    profile->hash_types[i ++] = PJMEDIA_ZRTP_HASH_S384;
+    profile->hash_types[i ++] = 0;
+
+    i = 0;
+    profile->cipher_types[i ++] = PJMEDIA_ZRTP_CIPHER_AES3;
+    profile->cipher_types[i ++] = PJMEDIA_ZRTP_CIPHER_AES1;
+    profile->cipher_types[i ++] = 0;
+
+    i = 0;
+    //profile->auth_types[i ++] = PJMEDIA_ZRTP_AUTH_HS80;
+    profile->auth_types[i ++] = PJMEDIA_ZRTP_AUTH_HS32;
+    profile->auth_types[i ++] = 0;
+
+    i = 0;
+    profile->pk_types[i ++] = PJMEDIA_ZRTP_PK_EC38;
+    profile->pk_types[i ++] = PJMEDIA_ZRTP_PK_EC25;
+    profile->pk_types[i ++] = PJMEDIA_ZRTP_PK_DH3K;
+    profile->pk_types[i ++] = PJMEDIA_ZRTP_PK_DH2K;
+    profile->pk_types[i ++] = 0;
+
+    i = 0;
+    profile->sas_types[i ++] = PJMEDIA_ZRTP_SAS_B256;
+    profile->sas_types[i ++] = PJMEDIA_ZRTP_SAS_B32;
+    profile->sas_types[i ++] = 0;
+}
+
+PJ_DEF(void) pjmedia_zrtp_media_setting_default(pjmedia_zrtp_media_setting *opt)
+{
+    PJ_ASSERT_RETURN(opt,);
+
+    pj_bzero(opt, sizeof(pjmedia_zrtp_media_setting));
+    opt->use = PJMEDIA_ZRTP_OPTIONAL;//XXX DEFAULTS
+    opt->close_member_tp = PJ_TRUE;
+    pjmedia_zrtp_profile_default (&opt->profile);
+}
+
+/*
+ * Create an ZRTP media transport.
+ */
+PJ_DEF(pj_status_t) pjmedia_transport_zrtp_create(
+				       pjmedia_endpt *endpt,
+				       pjmedia_transport *tp,
+				       pj_timer_heap_t *timer_heap,
+				       const pjmedia_zrtp_media_setting *opt,
+				       pjmedia_transport **p_tp)
+{
+    pj_pool_t *pool;
+    transport_zrtp *zrtp;
+    pj_status_t status = PJ_SUCCESS;
+    struct Zorg_Profile profile;
+    Zorg_Cache * cache = pjmedia_zrtp_cache;
+    ZORG_DECL_ERROR(e);
+
+    if (pjmedia_zrtp_initialized == PJ_FALSE)
+	return PJMEDIA_ZRTP_ENOTINITIALIZED;
+
+    PJ_ASSERT_RETURN(endpt && p_tp && timer_heap, PJ_EINVAL);
+
+    status = pjmedia_zrtp_profile_from_pj_to_zorg (&opt->profile, &profile);
+
+    if (status != PJ_SUCCESS)
+	return status;
+
+    if (!Zorg_Profile_Check(&e, &profile))
+	return pjmedia_zrtp_errno_from_zorg(ZORG_ERROR_CODE(e));
+
+    pool = pjmedia_endpt_create_pool(endpt, "zrtp%p", 1000, 1000);
+
+    if (pool == NULL)
+	return PJ_ENOMEM;
+
+    zrtp = PJ_POOL_ZALLOC_T(pool, transport_zrtp);
+
+    if (zrtp == NULL) {
+	pj_pool_release (pool);
+	return PJ_ENOMEM;
+    }
+
+    zrtp->pool = pool;
+    zrtp->timer_heap = timer_heap;
+    pj_list_init (&zrtp->events);
+    pj_timer_entry_init (&zrtp->zrtp_task_entry, 0, zrtp, &pjmedia_zrtp_task_callback);
+
+    if (opt) {
+	zrtp->setting = *opt;
+
+	if (opt->use == PJMEDIA_ZRTP_DISABLED) {
+	    zrtp->bypass_zrtp = PJ_TRUE;
+	    PJ_LOG(1, (pool->obj_name, "ZRTP will be bypassed as per user request"));
+	} else {
+	    /*pj_assert(0 && "Function not yet implemented");*/
+	}
+    } else {
+	pjmedia_zrtp_media_setting_default(&zrtp->setting);
+    }
+
+    /* Initialize base pjmedia_transport */
+    pj_memcpy(zrtp->base.name, pool->obj_name, PJ_MAX_OBJ_NAME);
+
+    if (tp)
+	zrtp->base.type = tp->type;
+    else
+	zrtp->base.type = PJMEDIA_TRANSPORT_TYPE_UDP;
+
+    zrtp->base.op = &transport_zrtp_op;
+
+    /* Set underlying transport */
+    zrtp->member_tp = tp;
+
+    /* Initialize peer's ZRTP usage mode. */
+    zrtp->peer_use = zrtp->setting.use;
+
+#if defined(PJMEDIA_ZRTP_MASQUERADE) && (PJMEDIA_ZRTP_MASQUERADE != 0)
+    zrtp->masq_pt = -1;
+    zrtp->masq_seq = 0xffff;
+    zrtp->masq_ts = 0xffffffff;
+    zrtp->masq_mode = PJMEDIA_ZRTP_MASQ_UNDEF;
+#endif
+
+    if (status == PJ_SUCCESS)
+	status = pj_lock_create_recursive_mutex(pool, pool->obj_name, &zrtp->mutex);
+
+    if (status == PJ_SUCCESS) {
+	/* If no peer id has been specified, generate a random one. */
+	if (zrtp->setting.valid_zid) {
+	    pj_memcpy(&zrtp->zrtp_local_id, &zrtp->setting.zid, sizeof(zrtp->zrtp_local_id));
+	} else if(pjmedia_zrtp_valid_global_zid) {
+	    PJ_LOG(3, (pool->obj_name, "No ZID specified, using global default ZID"));
+	    pj_memcpy(&zrtp->zrtp_local_id, &pjmedia_zrtp_global_zid, sizeof(zrtp->zrtp_local_id));
+	} else {
+	    PJ_LOG(3, (pool->obj_name, "No ZID specified, generating a random ZID"));
+	    status = pjmedia_zrtp_randzid(&zrtp->zrtp_local_id);
+	    /* Don't pollute the cache with throwaway entries */
+	    cache = NULL;
+	}
+    }
+
+    if (status == PJ_SUCCESS) {
+	/* Create the ZRTP session. */
+	LOCK_ZRTP_GLOBAL();
+	zrtp->zrtp_session = Zorg_CreateSession(&e, pjmedia_zrtp_global, &pjmedia_zrtp_sessionInterface, cache, (const struct Zorg_ZID *)&zrtp->zrtp_local_id, &profile, 1, zrtp);
+	UNLOCK_ZRTP_GLOBAL();
+
+	if (ZORG_FAILURE(e)) {
+	    status = PJMEDIA_ZRTP_ESESSIONFAIL;
+	} else {
+	    /* Create the ZRTP stream. */
+	    LOCK_ZRTP(zrtp);
+	    zrtp->zrtp_stream = Zorg_Session_CreateStream(&e, zrtp->zrtp_session, &pjmedia_zrtp_streamInterface, zrtp);
+	    UNLOCK_ZRTP(zrtp);
+
+	    if (ZORG_FAILURE(e)) {
+		pj_pool_release(pool);
+		status = PJMEDIA_ZRTP_ESTREAMFAIL;
+	    }
+	}
+    }
+
+    if (status != PJ_SUCCESS)
+	transport_destroy (&zrtp->base);
+
+    /* Done */
+    *p_tp = &zrtp->base;
+
+    return PJ_SUCCESS;
+}
+
+
+PJ_DEF(pj_status_t) pjmedia_zrtp_set_default_zid(const pjmedia_zid_t *zid)
+{
+    pjmedia_zid_t randzid;
+
+    if (zid == NULL) {
+	pj_status_t status = pjmedia_zrtp_randzid(&randzid);
+	if (status == PJ_SUCCESS)
+	    zid = &randzid;
+	else
+	    return status;
+    }
+
+    pjmedia_zrtp_valid_global_zid = PJ_TRUE;
+    pj_memcpy(&pjmedia_zrtp_global_zid, zid, sizeof(pjmedia_zrtp_global_zid));
+    return PJ_SUCCESS;
+}
+
+PJ_DEF(pj_bool_t) pjmedia_zrtp_get_default_zid(pjmedia_zid_t *zid)
+{
+    if (pjmedia_zrtp_valid_global_zid)
+	pj_memcpy(zid, &pjmedia_zrtp_global_zid, sizeof(*zid));
+    return pjmedia_zrtp_valid_global_zid;
+}
+
+
+PJ_DEF(pj_status_t) pjmedia_zrtp_cache_store()
+{
+    if (!pjmedia_zrtp_initialized)
+	return PJMEDIA_ZRTP_ENOTINITIALIZED;
+
+    PJ_ASSERT_RETURN(pjmedia_zrtp_global, PJMEDIA_ZRTP_ENOTINITIALIZED);
+
+    LOCK_ZRTP_GLOBAL();
+    
+    if (pjmedia_zrtp_cache)
+	Zorg_Impl_Cache_Flush (pjmedia_zrtp_cache);
+
+    UNLOCK_ZRTP_GLOBAL();
+
+    return PJ_SUCCESS;
+}
+
+/*
+ * Initialize and start ZRTP session with the given parameters.
+ */
+PJ_DEF(pj_status_t) pjmedia_transport_zrtp_start(
+			   pjmedia_transport *tp)
+{
+    pj_status_t status = PJ_SUCCESS;
+    transport_zrtp *zrtp = (transport_zrtp *)tp;
+    ZORG_DECL_ERROR(e);
+
+    LOCK_ZRTP(zrtp);
+
+    if (zrtp->pending_destroy)
+	status = PJ_EINVAL;
+    else if (!zrtp->session_inited) {
+	if (zrtp->zrtp_ssrc) {
+	    pj_uint32_t ssrc = pj_htonl(zrtp->zrtp_ssrc);
+	    PJ_LOG(1, (zrtp->base.name, "Starting zrtp stream"));
+	    Zorg_Stream_Start(&e, zrtp->zrtp_stream, (const struct Zorg_SSRC *)&ssrc);
+
+	    if (ZORG_FAILURE(e))
+		status = PJMEDIA_ZRTP_ESTREAMSTARTFAIL;
+	}
+
+	zrtp->session_inited = PJ_TRUE;
+    }
+
+    UNLOCK_ZRTP(zrtp);
+
+    return status;
+}
+
+/*
+ * Stop ZRTP session.
+ */
+PJ_DEF(pj_status_t) pjmedia_transport_zrtp_stop(pjmedia_transport *tp)
+{
+    transport_zrtp *zrtp = (transport_zrtp*) tp;
+
+    PJ_LOG(1, (zrtp->base.name, "Stopping zrtp stream on transport"));
+
+    LOCK_ZRTP(zrtp);
+
+    if (!zrtp->pending_destroy && zrtp->session_inited) {
+	/* Stop the ZRTP stream. */
+	Zorg_Stream_Destroy(zrtp->zrtp_stream);
+
+	zrtp->zrtp_stream = NULL;
+	zrtp->session_inited = PJ_FALSE;
+    }
+
+    UNLOCK_ZRTP(zrtp);
+
+    return PJ_SUCCESS;
+}
+
+PJ_DEF(pjmedia_transport *) pjmedia_transport_zrtp_get_member(
+						pjmedia_transport *tp)
+{
+    transport_zrtp *zrtp = (transport_zrtp*) tp;
+
+    PJ_ASSERT_RETURN(tp, NULL);
+
+    return zrtp->member_tp;
+}
+
+PJ_DEF(pj_status_t) pjmedia_transport_zrtp_bind_ssrc (
+						pjmedia_transport *tp,
+						pj_uint32_t ssrc)
+{
+    pj_status_t status = PJ_EINVAL;
+    transport_zrtp *zrtp = (transport_zrtp*) tp;
+    ZORG_DECL_ERROR(e);
+
+    LOCK_ZRTP (zrtp);
+
+    if (zrtp->pending_destroy)
+	status = PJ_EINVAL;
+    else {
+	zrtp->zrtp_ssrc = ssrc;
+
+	if (zrtp->session_inited) {
+	    pj_uint32_t ssrc = pj_htonl(zrtp->zrtp_ssrc);
+	    PJ_LOG(1, (zrtp->base.name, "Starting zrtp stream"));
+	    Zorg_Stream_Start(&e, zrtp->zrtp_stream, (const struct Zorg_SSRC *)&ssrc);
+
+	    if (ZORG_FAILURE(e))
+		status = PJMEDIA_ZRTP_ESTREAMSTARTFAIL;
+	    else
+		status = PJ_SUCCESS;
+	}
+    }
+
+    UNLOCK_ZRTP (zrtp);
+    return status;
+}
+
+PJ_DEF(pj_status_t) pjmedia_transport_zrtp_go_secure(pjmedia_transport *tp)
+{
+    transport_zrtp *zrtp = (transport_zrtp*) tp;
+    
+    PJ_ASSERT_RETURN(zrtp, PJ_EINVAL);
+
+    /* TBD: this is not supported by zrtp.org yet */
+    return PJ_ENOTSUP;
+}
+
+PJ_DEF(pj_status_t) pjmedia_transport_zrtp_go_clear(pjmedia_transport *tp)
+{
+    transport_zrtp *zrtp = (transport_zrtp*) tp;
+
+    PJ_ASSERT_RETURN(zrtp, PJ_EINVAL);
+
+    /* TBD: this is not supported by zrtp.org yet */
+    return PJ_ENOTSUP;
+}
+
+PJ_DEF(pj_status_t) pjmedia_transport_zrtp_set_sas_verified(pjmedia_transport *tp,
+							    pj_bool_t is_verified)
+{
+    pj_status_t status = PJ_SUCCESS;
+    transport_zrtp *zrtp = (transport_zrtp*) tp;
+    ZORG_DECL_ERROR(e);
+
+    PJ_ASSERT_RETURN(zrtp, PJ_EINVAL);
+
+    LOCK_ZRTP (zrtp);
+
+    if (zrtp->pending_destroy)
+	status = PJ_EINVAL;
+    else
+	Zorg_Session_SetSASVerified(&e, zrtp->zrtp_session, !!is_verified);
+
+    UNLOCK_ZRTP (zrtp);
+
+    if (ZORG_FAILURE(e))
+	return pjmedia_zrtp_errno_from_zorg(ZORG_ERROR_CODE(e));
+
+    return PJ_SUCCESS;
+}
+
+PJ_DEF(pj_status_t) pjmedia_transport_zrtp_get_info(pjmedia_transport *tp,
+						    pjmedia_zrtp_session_info *zsession,
+						    pjmedia_zrtp_stream_info *zstream)
+{
+    transport_zrtp *zrtp = (transport_zrtp*) tp;
+    pj_status_t status = PJ_SUCCESS;
+    ZORG_DECL_ERROR(e);
+
+    PJ_ASSERT_RETURN(zrtp && (zsession || zstream), PJ_EINVAL);
+
+    LOCK_ZRTP (zrtp);
+
+    if (ZORG_SUCCESS(e) && zsession) {
+	pj_bzero (zsession, sizeof(*zsession));
+
+	/* our ZID */
+	*(struct Zorg_ZID *)(&zsession->zid) = Zorg_Session_GetZID(zrtp->zrtp_session);
+
+	/* their ZID */
+	if(ZORG_SUCCESS(e)) {
+	    *(struct Zorg_ZID *)(&zsession->peer_zid) = Zorg_Session_GetPeerZID(&e, zrtp->zrtp_session);
+
+	    if(ZORG_ERROR_CODE(e) == Zorg_ErrorZRTPUnavailable) {
+		pj_bzero (&zsession->peer_zid, sizeof(zsession->peer_zid));
+		ZORG_CLEAR_ERROR(e);
+	    }
+	}
+
+	/* sasvalue and SAS */
+	if(ZORG_SUCCESS(e)) {
+	    struct Zorg_SASValue sasvalue = Zorg_Session_GetSASValue (&e, zrtp->zrtp_session);
+
+	    if(ZORG_ERROR_CODE(e) == Zorg_ErrorZRTPUnavailable) {
+		zsession->sas_available = PJ_FALSE;
+		ZORG_CLEAR_ERROR(e);
+	    } else {
+		struct Zorg_SAS sas;
+		int sas_verified;
+
+		zsession->sas_available = PJ_TRUE;
+
+		pj_memcpy (&zsession->sas_value, &sasvalue, sizeof(zsession->sas_value));
+		zsession->sas_value = pj_ntohl (zsession->sas_value);
+
+		Zorg_Session_GetSAS (&e, zrtp->zrtp_session, &sas);
+
+		if (ZORG_SUCCESS(e)) {
+		    pj_memcpy (&zsession->sas1, sas.sas1.buffer, PJ_MIN (sas.sas1.dataSize, sizeof(zsession->sas1)));
+		    zsession->sas1[sizeof(zsession->sas1) - 1] = 0;
+
+		    pj_memcpy (&zsession->sas2, sas.sas2.buffer, PJ_MIN (sas.sas2.dataSize, sizeof(zsession->sas2)));
+		    zsession->sas2[sizeof(zsession->sas2) - 1] = 0;
+		}
+
+		if (ZORG_SUCCESS(e)) {
+		    sas_verified = Zorg_Session_GetSASVerified (&e, zrtp->zrtp_session);
+
+		    if (ZORG_ERROR_CODE(e) == Zorg_ErrorZRTPSecretNotFound) {
+			ZORG_CLEAR_ERROR (e);
+			sas_verified = 0;
+		    }
+
+		    if (ZORG_SUCCESS(e))
+			zsession->sas_verified = !!sas_verified;
+		}
+	    }
+	}
+    }
+
+    if (ZORG_SUCCESS(e) && zstream) {
+	pj_bzero (zstream, sizeof(*zstream));
+	zstream->state = zrtp->zrtp_stream_state;
+	/* TODO: everything else */
+    }
+
+    UNLOCK_ZRTP (zrtp);
+
+    if (ZORG_FAILURE(e)) {
+	pj_assert (status == PJ_SUCCESS);
+	status = pjmedia_zrtp_errno_from_zorg(ZORG_ERROR_CODE(e));
+    }
+
+    return status;
+}
+
+PJ_DEF(pj_status_t) pjmedia_zrtp_entropy_add(const void *buffer,
+					     pj_uint32_t length)
+{
+    if (pjmedia_zrtp_initialized) {
+	ZORG_DECL_ERROR (e);
+	const struct Zorg_Blob data = { length, length, (void *)buffer };
+
+	PJ_ASSERT_RETURN (pjmedia_zrtp_global, PJMEDIA_ZRTP_ENOTINITIALIZED);
+
+	LOCK_ZRTP_GLOBAL();
+	Zorg_AddEntropy (&e, pjmedia_zrtp_global, &data);
+	UNLOCK_ZRTP_GLOBAL();
+
+	if (ZORG_FAILURE(e))
+	    return pjmedia_zrtp_errno_from_zorg(ZORG_ERROR_CODE(e));
+
+	return PJ_SUCCESS;
+    }
+    else
+	return PJMEDIA_ZRTP_ENOTINITIALIZED;
+}
+
+PJ_DEF(pj_status_t) pjmedia_zrtp_randstr(void *buffer,
+					 pj_uint32_t length)
+{
+    if (pjmedia_zrtp_initialized) {
+	ZORG_DECL_ERROR (e);
+	struct Zorg_Blob data = { 0, length, (void *)buffer };
+
+	PJ_ASSERT_RETURN (pjmedia_zrtp_global, PJMEDIA_ZRTP_ENOTINITIALIZED);
+
+	LOCK_ZRTP_GLOBAL();
+	Zorg_GenerateRandom (&e, pjmedia_zrtp_global, length, &data);
+	UNLOCK_ZRTP_GLOBAL();
+
+	if (ZORG_FAILURE(e))
+	    return pjmedia_zrtp_errno_from_zorg(ZORG_ERROR_CODE(e));
+
+	return PJ_SUCCESS;
+    }
+    else
+	return PJMEDIA_ZRTP_ENOTINITIALIZED;
+}
+
+#if defined(PJMEDIA_ZRTP_MASQUERADE) && (PJMEDIA_ZRTP_MASQUERADE != 0)
+PJ_DECL(pj_status_t) pjmedia_transport_zrtp_get_masquerade_mode(pjmedia_transport *tp,
+								pjmedia_zrtp_masquerade_mode *p_mode) {
+    transport_zrtp *zrtp = (transport_zrtp*) tp;
+    PJ_ASSERT_RETURN(zrtp && p_mode, PJ_EINVAL);
+
+    LOCK_ZRTP (zrtp);
+    *p_mode = zrtp->masq_mode;
+    UNLOCK_ZRTP (zrtp);
+
+    return PJ_SUCCESS;
+}
+#endif
+
+/* ------------------------------------------------------------------- */
+
+static pj_status_t transport_get_info(pjmedia_transport *tp,
+				      pjmedia_transport_info *info)
+{
+    transport_zrtp *zrtp = (transport_zrtp*) tp;
+    pjmedia_zrtp_info zrtp_info;
+    int spc_info_idx;
+
+    PJ_ASSERT_RETURN(tp && info, PJ_EINVAL);
+    PJ_ASSERT_RETURN(info->specific_info_cnt <
+		     PJMEDIA_TRANSPORT_SPECIFIC_INFO_MAXCNT, PJ_ETOOMANY);
+    PJ_ASSERT_RETURN(sizeof(pjmedia_zrtp_info) <=
+		     PJMEDIA_TRANSPORT_SPECIFIC_INFO_MAXSIZE, PJ_ENOMEM);
+
+    zrtp_info.active = zrtp->session_inited;
+    zrtp_info.use = zrtp->setting.use;
+
+    spc_info_idx = info->specific_info_cnt++;
+
+    info->spc_info[spc_info_idx].type = PJMEDIA_TRANSPORT_TYPE_ZRTP;
+    info->spc_info[spc_info_idx].cbsize = sizeof(zrtp_info);
+
+    pj_memcpy(&info->spc_info[spc_info_idx].buffer, &zrtp_info, sizeof(zrtp_info));
+
+    return pjmedia_transport_get_info(zrtp->member_tp, info);
+}
+
+static pj_status_t transport_attach(pjmedia_transport *tp,
+				    void *user_data,
+				    const pj_sockaddr_t *rem_addr,
+				    const pj_sockaddr_t *rem_rtcp,
+				    unsigned addr_len,
+				    void (*rtp_cb) (void*, void*,
+						    pj_ssize_t),
+				    void (*rtcp_cb)(void*, void*,
+						    pj_ssize_t))
+{
+    transport_zrtp *zrtp = (transport_zrtp*) tp;
+    pj_status_t status;
+
+    /* Save the callbacks */
+    zrtp->rtp_cb = rtp_cb;
+    zrtp->rtcp_cb = rtcp_cb;
+    zrtp->user_data = user_data;
+
+    /* Attach itself to transport */
+    status = pjmedia_transport_attach(zrtp->member_tp, zrtp, rem_addr, 
+				      rem_rtcp, addr_len, &transport_rtp_cb,
+				      &transport_rtcp_cb);
+    if (status != PJ_SUCCESS) {
+	zrtp->rtp_cb = NULL;
+	zrtp->rtcp_cb = NULL;
+	zrtp->user_data = NULL;
+	return status;
+    }
+
+    return PJ_SUCCESS;
+}
+
+static void transport_detach(pjmedia_transport *tp, void *strm)
+{
+    transport_zrtp *zrtp = (transport_zrtp*) tp;
+
+    PJ_UNUSED_ARG(strm);
+    PJ_ASSERT_ON_FAIL(tp, return);
+
+    if (zrtp->member_tp)
+	pjmedia_transport_detach(zrtp->member_tp, zrtp);
+
+    /* Clear up application infos from transport */
+    zrtp->rtp_cb = NULL;
+    zrtp->rtcp_cb = NULL;
+    zrtp->user_data = NULL;
+}
+
+#if defined(PJMEDIA_ZRTP_MASQUERADE) && (PJMEDIA_ZRTP_MASQUERADE != 0)
+static pjmedia_zrtp_masquerade_mode transport_update_masq_mode (transport_zrtp *zrtp) {
+    const pjmedia_zrtp_masquerade_mode old_mode = zrtp->masq_mode;
+    pjmedia_zrtp_masquerade_mode new_mode = old_mode;
+
+    switch (old_mode) {
+    case PJMEDIA_ZRTP_MASQ_UNDEF:
+	if (zrtp->setting.masquerade) {
+	    if (zrtp->setting.masquerade_only) {
+		PJ_LOG(3, (zrtp->base.name, "Forcing masqueraded ZRTP"));
+		new_mode = PJMEDIA_ZRTP_MASQ_ONLY;
+	    } else {
+		PJ_LOG(3, (zrtp->base.name, "Masquerade ZRTP in compatible mode"));
+		new_mode = PJMEDIA_ZRTP_MASQ_COMPAT;
+	    }
+	} else {
+	    PJ_LOG(3, (zrtp->base.name, "Forcing standards-compliant ZRTP"));
+	    new_mode = PJMEDIA_ZRTP_MASQ_NONE;
+	}
+	break;
+
+    case PJMEDIA_ZRTP_MASQ_NONE:
+	/* No way back from no-masquerade mode */
+	break;
+
+    case PJMEDIA_ZRTP_MASQ_COMPAT:
+	if (zrtp->masq_peer) {
+	    PJ_LOG(3, (zrtp->base.name, "Peer understands masqueraded ZRTP: forcing masqueraded ZRTP"));
+	    new_mode = PJMEDIA_ZRTP_MASQ_ONLY;
+	}
+	break;
+
+    case PJMEDIA_ZRTP_MASQ_ONLY:
+	/* No way back from masquerade-only mode */
+	break;
+
+    default:
+	pj_assert (0);
+    }
+
+    if (old_mode != new_mode) {
+	zrtp->masq_mode = new_mode;
+	/* TODO: notify owner of the transport */
+    }
+
+    return new_mode;
+}
+#endif
+
+static pj_status_t transport_send_rtp( pjmedia_transport *tp,
+				       const void *pkt,
+				       pj_size_t size)
+{
+    transport_zrtp *zrtp = (transport_zrtp*) tp;
+    char rtp_tx_buffer[MAX_RTP_BUFFER_LEN];
+    ZORG_DECL_ERROR(e);
+    struct Zorg_Blob packet;
+
+    if (zrtp->bypass_zrtp)
+	return pjmedia_transport_send_rtp(zrtp->member_tp, pkt, size);
+
+    if (!zrtp->session_inited)
+	return PJ_SUCCESS;
+
+    if (size > MAX_RTP_PACKET_LEN)
+	return PJ_ETOOBIG;
+
+    pj_memcpy(rtp_tx_buffer, pkt, size);
+
+    LOCK_ZRTP (zrtp);
+#if defined(PJMEDIA_ZRTP_MASQUERADE) && (PJMEDIA_ZRTP_MASQUERADE != 0)
+    if (transport_update_masq_mode (zrtp) != PJMEDIA_ZRTP_MASQ_NONE) {
+	const pjmedia_rtp_hdr * rtp_hdr = pkt;
+	zrtp->masq_pt = rtp_hdr->pt;
+	zrtp->masq_seq = pj_ntohs(rtp_hdr->seq);
+	zrtp->masq_ts = pj_ntohl(rtp_hdr->ts);
+    }
+#endif
+    packet.dataSize = size;
+    packet.maxSize = sizeof(rtp_tx_buffer);
+    packet.buffer = (void *)rtp_tx_buffer;
+
+    packet = *Zorg_Stream_ProtectRTP_InPlace(&e, zrtp->zrtp_stream, &packet);
+    UNLOCK_ZRTP (zrtp);
+
+    if (ZORG_FAILURE(e))
+	return PJ_EINVAL;
+    else if (packet.buffer)
+	return pjmedia_transport_send_rtp(zrtp->member_tp, packet.buffer, packet.dataSize);
+    else
+	return PJ_SUCCESS;
+}
+
+static pj_status_t transport_send_rtcp(pjmedia_transport *tp,
+				       const void *pkt,
+				       pj_size_t size)
+{
+    return transport_send_rtcp2(tp, NULL, 0, pkt, size);
+}
+
+static pj_status_t transport_send_rtcp2(pjmedia_transport *tp,
+				        const pj_sockaddr_t *addr,
+				        unsigned addr_len,
+				        const void *pkt,
+				        pj_size_t size)
+{
+    transport_zrtp *zrtp = (transport_zrtp*) tp;
+    char rtcp_tx_buffer[MAX_RTCP_BUFFER_LEN];
+    ZORG_DECL_ERROR(e);
+    struct Zorg_Blob packet;
+
+    if (zrtp->bypass_zrtp)
+	return pjmedia_transport_send_rtcp2(zrtp->member_tp, addr, addr_len, pkt, size);
+
+    if (!zrtp->session_inited)
+	return PJ_SUCCESS;
+
+    if (size > MAX_RTCP_PACKET_LEN)
+	return PJ_ETOOBIG;
+
+    pj_memcpy(rtcp_tx_buffer, pkt, size);
+
+    packet.dataSize = size;
+    packet.maxSize = sizeof(rtcp_tx_buffer);
+    packet.buffer = (void *)rtcp_tx_buffer;
+
+    LOCK_ZRTP (zrtp);
+    packet = *Zorg_Stream_ProtectRTCP_InPlace(&e, zrtp->zrtp_stream, &packet);
+    UNLOCK_ZRTP (zrtp);
+
+    if (ZORG_FAILURE(e))
+	return PJ_EINVAL;
+    else if (packet.buffer)
+        return pjmedia_transport_send_rtcp2(zrtp->member_tp, addr, addr_len, packet.buffer, packet.dataSize);
+    else
+	return PJ_SUCCESS;
+}
+
+
+static pj_status_t transport_simulate_lost(pjmedia_transport *tp,
+					   pjmedia_dir dir,
+					   unsigned pct_lost)
+{
+    transport_zrtp *zrtp = (transport_zrtp *) tp;
+
+    return pjmedia_transport_simulate_lost(zrtp->member_tp, dir, pct_lost);
+}
+
+static pj_status_t transport_destroy (pjmedia_transport *tp)
+{
+    zrtp_event *e, *ne;
+    pj_status_t status = PJ_SUCCESS;
+    transport_zrtp *zrtp = (transport_zrtp *) tp;
+    pj_bool_t delay_destroy = PJ_FALSE;
+
+    LOCK_ZRTP_IF (zrtp);
+
+    if (zrtp->event_entry_used) {
+	if (!pj_timer_heap_cancel (zrtp->timer_heap, &zrtp->events.entry))
+	    delay_destroy = PJ_TRUE;
+	else
+	    zrtp->event_entry_used = PJ_FALSE;
+    }
+
+    for (e = zrtp->events.next, ne = e->next; e != &zrtp->events; e = ne, ne = e->next) {
+	if (!pj_timer_heap_cancel (zrtp->timer_heap, &e->entry))
+	    delay_destroy = PJ_TRUE;
+	else {
+	    pj_list_erase (e);
+	    zrtp->pool->factory->policy.block_free (zrtp->pool->factory, e, sizeof(zrtp_event));
+	}
+    }
+
+    if (!delay_destroy || !zrtp->pending_destroy) {
+	zrtp->pending_destroy = PJ_TRUE;
+
+	pjmedia_transport_detach(tp, NULL);
+
+	if (zrtp->setting.close_member_tp && zrtp->member_tp) {
+	    pjmedia_transport_close(zrtp->member_tp);
+	}
+
+	status = pjmedia_transport_zrtp_stop(tp);
+
+	/* Tear down the ZRTP session.  */
+	if (zrtp->zrtp_session != NULL) {
+	    PJ_LOG(3, (zrtp->base.name, "Tearing down zrtp session"));
+
+	    LOCK_ZRTP_GLOBAL();
+	    Zorg_Session_Destroy(zrtp->zrtp_session);
+	    UNLOCK_ZRTP_GLOBAL();
+	}
+    }
+
+    UNLOCK_ZRTP_IF (zrtp);
+
+    if (!delay_destroy) {
+	pj_lock_destroy(zrtp->mutex);
+	pj_pool_release(zrtp->pool);
+    }
+
+    return status;
+}
+
+/*
+ * This callback is called by transport when incoming rtp is received
+ */
+static void transport_rtp_cb( void *user_data, void *pkt, pj_ssize_t size)
+{
+    transport_zrtp *zrtp = (transport_zrtp *) user_data;
+    ZORG_DECL_ERROR(e);
+
+    if (size < 0)
+	return;
+
+    LOCK_ZRTP (zrtp);
+
+#if defined(PJMEDIA_ZRTP_MASQUERADE) && (PJMEDIA_ZRTP_MASQUERADE != 0)
+    if (transport_update_masq_mode (zrtp) != PJMEDIA_ZRTP_MASQ_NONE) {
+	pjmedia_rtp_hdr *rtp_hdr = pkt;
+
+	pj_assert(size > SIZE_OF_MASQ_OVERHEAD);
+	if (size >= SIZE_OF_MASQ_OVERHEAD && pj_memcmp((char *)pkt + (size + ROFFSET_OF_MASQ_ZRTP_MAGIC), zrtp_magic, SIZE_OF_MASQ_ZRTP_MAGIC) == 0) {	  
+	    zrtp->masq_peer = PJ_TRUE;
+
+	    pj_memcpy(&rtp_hdr->seq, ((char *)pkt) + (size + ROFFSET_OF_MASQ_SEQNO), SIZE_OF_MASQ_SEQNO);
+	    pj_memcpy(&rtp_hdr->ssrc, ((char *)pkt) + (size + ROFFSET_OF_MASQ_SSRC), SIZE_OF_MASQ_SSRC);
+	    size -= SIZE_OF_MASQ_OVERHEAD;
+	    pj_assert(size > 0);
+
+	    rtp_hdr->v = 0;
+	    rtp_hdr->x = 1;
+	    rtp_hdr->pt = 0;
+	    rtp_hdr->ts = pj_htonl(ZRTP_MAGIC);
+	} else if (rtp_hdr->ts != pj_htonl(ZRTP_MAGIC) && zrtp->masq_pt < 0)
+	    zrtp->masq_pt = rtp_hdr->pt;
+#if 0
+	if (rtp_hdr->ts == pj_htonl(ZRTP_MAGIC)) {
+	    char buf[25];
+	    PJ_LOG(1, (zrtp->base.name, "Received ZRTP message: %s", hex2str((char *)rtp_hdr, sizeof(*rtp_hdr), buf, sizeof(buf))));
+	}
+#endif
+    }
+    (void) transport_update_masq_mode (zrtp);
+#endif
+
+    if (zrtp->bypass_zrtp) {
+	zrtp->rtp_cb(zrtp->user_data, pkt, size);
+    } else if (zrtp->session_inited) {
+	struct Zorg_Blob packet;
+
+	packet.dataSize = size;
+	packet.maxSize = size;
+	packet.buffer = pkt;
+
+	packet = *Zorg_Stream_UnprotectSRTP_InPlace(&e, zrtp->zrtp_stream, &packet);
+
+	if (ZORG_FAILURE(e)) {
+	    PJ_LOG(3,(zrtp->base.name, 
+		      "Failed to process ZRTP, pkt size=%u, err=%s",
+		      size, get_zrtplib_errstr(ZORG_ERROR_CODE(e))));
+	} else if (packet.buffer) {
+	    zrtp->rtp_cb(zrtp->user_data, packet.buffer, packet.dataSize);
+	}
+    }
+
+    UNLOCK_ZRTP (zrtp);
+}
+
+/*
+ * This callback is called by transport when incoming rtcp is received
+ */
+static void transport_rtcp_cb( void *user_data, void *pkt, pj_ssize_t size)
+{
+    transport_zrtp *zrtp = (transport_zrtp *) user_data;
+    ZORG_DECL_ERROR(e);
+    struct Zorg_Blob packet;
+
+    if (zrtp->bypass_zrtp) {
+	zrtp->rtcp_cb(zrtp->user_data, pkt, size);
+	return;
+    }
+
+    if (size < 0 || !zrtp->session_inited) {
+	return;
+    }
+
+    packet.dataSize = size;
+    packet.maxSize = size;
+    packet.buffer = pkt;
+
+    LOCK_ZRTP (zrtp);
+
+    packet = *Zorg_Stream_UnprotectSRTCP_InPlace(&e, zrtp->zrtp_stream, &packet);
+
+    if (ZORG_FAILURE(e)) {
+	PJ_LOG(3,(zrtp->base.name, 
+		  "Failed to unprotect ZRTCP, pkt size=%u, err=%s",
+		  size, get_zrtplib_errstr(ZORG_ERROR_CODE(e))));
+    } else if (packet.buffer) {
+	zrtp->rtcp_cb(zrtp->user_data, packet.buffer, packet.dataSize);
+    }
+
+    UNLOCK_ZRTP (zrtp);   
+}
+
+static pj_status_t pjmedia_zrtp_sdp_hash_set(transport_zrtp *zrtp,
+					     pjmedia_sdp_media *m_rem)
+{
+    pjmedia_sdp_attr *a_hash;
+
+    if (!zrtp || !m_rem)
+	return PJ_EINVAL;
+
+    a_hash = pjmedia_sdp_media_find_attr(m_rem, &ID_ZRTP_HASH, NULL);
+    if (a_hash) {
+	ZORG_DECL_ERROR(e);
+	struct Zorg_Blob zrtp_hash;
+
+	LOCK_ZRTP (zrtp);
+
+	zrtp_hash.dataSize = a_hash->value.slen;
+	zrtp_hash.maxSize = a_hash->value.slen;
+	zrtp_hash.buffer = a_hash->value.ptr;
+
+	Zorg_Stream_SetPeerSDPZrtpHash(&e, zrtp->zrtp_stream, &zrtp_hash);
+
+        UNLOCK_ZRTP (zrtp);
+
+	if (ZORG_FAILURE(e)) {
+	    PJ_LOG(3, (zrtp->base.name, "Failed setting ZRTP hash, err=%s", get_zrtplib_errstr(ZORG_ERROR_CODE(e))));
+	    return PJ_EINVAL;
+	}
+
+	return PJ_SUCCESS;
+    }
+
+    return PJ_EINVAL;
+}
+
+static pj_status_t transport_media_create(pjmedia_transport *tp,
+				          pj_pool_t *sdp_pool,
+					  unsigned options,
+				          const pjmedia_sdp_session *sdp_remote,
+					  unsigned media_index)
+{
+    struct transport_zrtp *zrtp = (struct transport_zrtp*) tp;
+    unsigned member_tp_option;
+
+    PJ_ASSERT_RETURN(tp, PJ_EINVAL);
+    
+    zrtp->media_option = options;
+    member_tp_option = options | PJMEDIA_TPMED_NO_TRANSPORT_CHECKING;
+
+    zrtp->offerer_side = sdp_remote == NULL;
+
+    /* Validations */
+    if (zrtp->offerer_side) {
+
+	if (zrtp->setting.use == PJMEDIA_ZRTP_DISABLED)
+	    goto BYPASS_ZRTP;
+
+    } else {
+
+	pjmedia_sdp_media *m_rem;
+	
+	m_rem = sdp_remote->media[media_index];
+
+	/* Nothing to do on inactive media stream */
+	if (pjmedia_sdp_media_find_attr(m_rem, &ID_INACTIVE, NULL))
+	    goto BYPASS_ZRTP;
+
+	/* Validate remote media transport based on ZRTP usage option.
+	 */
+	switch (zrtp->setting.use) {
+	    case PJMEDIA_ZRTP_DISABLED:
+#if defined(PJMEDIA_ZRTP_CHECK_AVP) && (PJMEDIA_ZRTP_CHECK_AVP != 0)
+		if (pj_stricmp(&m_rem->desc.transport, &ID_RTP_SAVP) == 0)
+		    return PJMEDIA_ZRTP_ESDPINTRANSPORT;
+#endif
+		goto BYPASS_ZRTP;
+	    case PJMEDIA_ZRTP_OPTIONAL:
+		break;
+	    case PJMEDIA_ZRTP_MANDATORY:
+#if defined(PJMEDIA_ZRTP_CHECK_AVP) && (PJMEDIA_ZRTP_CHECK_AVP != 0)
+		if (pj_stricmp(&m_rem->desc.transport, &ID_RTP_SAVP) != 0)
+		    return PJMEDIA_ZRTP_ESDPINTRANSPORT;
+#endif
+		break;
+	}
+
+	/* Initialize ZRTP stream with remote hash */ 
+	pjmedia_zrtp_sdp_hash_set(zrtp, m_rem);
+
+    }
+
+    goto PROPAGATE_MEDIA_CREATE;
+
+BYPASS_ZRTP:
+    zrtp->bypass_zrtp = PJ_TRUE;
+    member_tp_option &= ~PJMEDIA_TPMED_NO_TRANSPORT_CHECKING;
+
+PROPAGATE_MEDIA_CREATE:
+    return pjmedia_transport_media_create(zrtp->member_tp, sdp_pool, 
+					  member_tp_option, sdp_remote,
+					  media_index);
+}
+
+static pj_status_t transport_encode_sdp(pjmedia_transport *tp,
+					pj_pool_t *sdp_pool,
+					pjmedia_sdp_session *sdp_local,
+					const pjmedia_sdp_session *sdp_remote,
+					unsigned media_index)
+{
+    struct transport_zrtp *zrtp = (struct transport_zrtp*) tp;
+    pjmedia_sdp_media *m_rem, *m_loc;
+    enum { MAXLEN = 512 };
+    
+    PJ_ASSERT_RETURN(tp && sdp_pool && sdp_local, PJ_EINVAL);
+    
+    zrtp->offerer_side = sdp_remote == NULL;
+
+    m_rem = sdp_remote ? sdp_remote->media[media_index] : NULL;
+    m_loc = sdp_local->media[media_index];
+
+#if defined(PJMEDIA_ZRTP_CHECK_AVP) && (PJMEDIA_ZRTP_CHECK_AVP != 0)
+    /* Bypass if media transport is not RTP/AVP or RTP/SAVP */
+    if (pj_stricmp(&m_loc->desc.transport, &ID_RTP_AVP)  != 0 && 
+	pj_stricmp(&m_loc->desc.transport, &ID_RTP_SAVP) != 0)
+	goto BYPASS_ZRTP;
+#endif
+
+    /* If the media is inactive, do nothing. */
+    if (pjmedia_sdp_media_find_attr(m_loc, &ID_INACTIVE, NULL) || 
+	(m_rem && pjmedia_sdp_media_find_attr(m_rem, &ID_INACTIVE, NULL)))
+	goto BYPASS_ZRTP;
+
+    /* Check remote media transport & set local media transport 
+     * based on ZRTP usage option.
+     */
+    if (zrtp->offerer_side) {
+
+	/* Generate transport */
+	switch (zrtp->setting.use) {
+	    case PJMEDIA_ZRTP_DISABLED:
+		goto BYPASS_ZRTP;
+	    case PJMEDIA_ZRTP_OPTIONAL:
+#if defined(PJMEDIA_ZRTP_CHECK_AVP) && (PJMEDIA_ZRTP_CHECK_AVP != 0)
+		m_loc->desc.transport = 
+				(zrtp->peer_use == PJMEDIA_ZRTP_MANDATORY)?
+				ID_RTP_SAVP : ID_RTP_AVP;
+#endif
+		break;
+	    case PJMEDIA_ZRTP_MANDATORY:
+#if defined(PJMEDIA_ZRTP_CHECK_AVP) && (PJMEDIA_ZRTP_CHECK_AVP != 0)
+		m_loc->desc.transport = ID_RTP_SAVP;
+#endif
+		break;
+	}
+
+
+    } else {
+	/* Answerer side */
+
+	pj_assert(sdp_remote && m_rem);
+
+	/* Generate transport */
+	switch (zrtp->setting.use) {
+	    case PJMEDIA_ZRTP_DISABLED:
+#if defined(PJMEDIA_ZRTP_CHECK_AVP) && (PJMEDIA_ZRTP_CHECK_AVP != 0)
+		if (pj_stricmp(&m_rem->desc.transport, &ID_RTP_SAVP) == 0)
+		    return PJMEDIA_ZRTP_ESDPINTRANSPORT;
+#endif
+		goto BYPASS_ZRTP;
+	    case PJMEDIA_ZRTP_OPTIONAL:
+		m_loc->desc.transport = m_rem->desc.transport;
+		break;
+	    case PJMEDIA_ZRTP_MANDATORY:
+#if defined(PJMEDIA_ZRTP_CHECK_AVP) && (PJMEDIA_ZRTP_CHECK_AVP != 0)
+		if (pj_stricmp(&m_rem->desc.transport, &ID_RTP_SAVP) != 0)
+		    return PJMEDIA_ZRTP_ESDPINTRANSPORT;
+		m_loc->desc.transport = ID_RTP_SAVP;
+#endif
+		break;
+	}
+
+    }
+
+    /* Append the ZRTP hash attribute to this media descriptor. */
+    if (zrtp->zrtp_stream) {
+	ZORG_DECL_ERROR(e);
+	char hash[/*TODO: name this magic number*/69 + 1];
+	struct Zorg_Blob hash_blob;
+
+	pj_memset(hash, 0, sizeof(hash));
+
+	hash_blob.dataSize = 0;
+	hash_blob.maxSize = sizeof(hash);
+	hash_blob.buffer = hash;
+
+	Zorg_Stream_GetSDPZrtpHash(&e, zrtp->zrtp_stream, &hash_blob);
+	
+	if (ZORG_FAILURE(e)) {
+	    PJ_LOG(3, (zrtp->base.name, "Failed retrieving ZRTP hash, err=%s", get_zrtplib_errstr(ZORG_ERROR_CODE(e))));
+	} else {
+    	    pjmedia_sdp_attr *a_hash;
+	    pj_str_t hash_value;
+
+	    hash_value.slen = hash_blob.dataSize;
+	    hash_value.ptr = hash_blob.buffer;
+
+	    a_hash = pjmedia_sdp_attr_create(sdp_pool, ID_ZRTP_HASH.ptr, &hash_value);
+
+	    if (a_hash) {
+		m_loc->attr[m_loc->attr_count++] = a_hash;
+		PJ_LOG(1, (zrtp->base.name, "ZRTP hash set succesfully"));
+	    }
+	}
+    }
+
+    goto PROPAGATE_MEDIA_CREATE;
+
+BYPASS_ZRTP:
+    zrtp->bypass_zrtp = PJ_TRUE;
+
+PROPAGATE_MEDIA_CREATE:
+    return pjmedia_transport_encode_sdp(zrtp->member_tp, sdp_pool, 
+					sdp_local, sdp_remote, media_index);
+}
+
+
+
+static pj_status_t transport_media_start(pjmedia_transport *tp,
+				         pj_pool_t *pool,
+				         const pjmedia_sdp_session *sdp_local,
+				         const pjmedia_sdp_session *sdp_remote,
+				         unsigned media_index)
+{
+    struct transport_zrtp *zrtp = (struct transport_zrtp*) tp;
+    pjmedia_sdp_media *m_rem, *m_loc;
+    pj_status_t status;
+
+    PJ_LOG(1, (zrtp->base.name, "Media stream started [1]"));
+
+    PJ_ASSERT_RETURN(tp && pool && sdp_local && sdp_remote, PJ_EINVAL);
+
+    if (zrtp->bypass_zrtp)
+	goto BYPASS_ZRTP;
+
+    m_rem = sdp_remote->media[media_index];
+    m_loc = sdp_local->media[media_index];
+
+#if defined(PJMEDIA_ZRTP_CHECK_AVP) && (PJMEDIA_ZRTP_CHECK_AVP != 0)
+    if (pj_stricmp(&m_rem->desc.transport, &ID_RTP_SAVP) == 0)
+	zrtp->peer_use = PJMEDIA_ZRTP_MANDATORY;
+    else
+	zrtp->peer_use = PJMEDIA_ZRTP_OPTIONAL;
+#endif
+
+    /* For answerer side, this function will just have to start ZRTP */
+
+    /* Check remote media transport & set local media transport 
+     * based on ZRTP usage option.
+     */
+    if (zrtp->offerer_side) {
+	if (zrtp->setting.use == PJMEDIA_ZRTP_DISABLED) {
+	    if (pjmedia_sdp_media_find_attr(m_rem, &ID_ZRTP_HASH, NULL)) {
+		pjmedia_sdp_media_deactivate(pool, m_loc);
+		return PJMEDIA_ZRTP_ENEEDSCRYPTO;
+	    }
+	    goto BYPASS_ZRTP;
+	} else if (zrtp->setting.use == PJMEDIA_ZRTP_OPTIONAL) {
+	    // Regardless the answer's transport type (RTP/AVP or RTP/SAVP),
+	    // the answer must be processed through in optional mode.
+	    // Please note that at this point transport type is ensured to be 
+	    // RTP/AVP or RTP/SAVP, see transport_media_create()
+	    //if (pj_stricmp(&m_rem->desc.transport, &m_loc->desc.transport)) {
+		//pjmedia_sdp_media_deactivate(pool, m_loc);
+		//return PJMEDIA_SDP_EINPROTO;
+	    //}
+	} else if (zrtp->setting.use == PJMEDIA_ZRTP_MANDATORY) {
+#if defined(PJMEDIA_ZRTP_CHECK_AVP) && (PJMEDIA_ZRTP_CHECK_AVP != 0)
+	    if (pj_stricmp(&m_rem->desc.transport, &ID_RTP_SAVP)) {
+		pjmedia_sdp_media_deactivate(pool, m_loc);
+		return PJMEDIA_SDP_EINPROTO;
+	    }
+#endif
+	}
+    }
+
+    /* Initialize ZRTP stream with remote hash */ 
+    pjmedia_zrtp_sdp_hash_set(zrtp, m_rem);
+
+    status = pjmedia_transport_zrtp_start(tp);
+
+    if (!zrtp->setting.manual_start) {
+	status = pjmedia_transport_zrtp_start(tp);
+	if (status != PJ_SUCCESS)
+    	    return status;
+    }
+
+    goto PROPAGATE_MEDIA_START;
+
+BYPASS_ZRTP:
+    zrtp->peer_use = PJMEDIA_ZRTP_DISABLED;
+
+PROPAGATE_MEDIA_START:
+    return pjmedia_transport_media_start(zrtp->member_tp, pool, 
+					 sdp_local, sdp_remote,
+				         media_index);
+}
+
+static pj_status_t transport_media_stop(pjmedia_transport *tp)
+{
+    struct transport_zrtp *zrtp = (struct transport_zrtp*) tp;
+    pj_status_t status;
+
+    status = pjmedia_transport_media_stop(zrtp->member_tp);
+    if (status != PJ_SUCCESS)
+	PJ_LOG(3, (zrtp->base.name, 
+		   "ZRTP failed stop underlying media transport."));
+
+    return pjmedia_transport_zrtp_stop(tp);
+}
+
+#if defined(PJMEDIA_ZRTP_MASQUERADE) && (PJMEDIA_ZRTP_MASQUERADE != 0)
+
+static pj_status_t pjmedia_zrtp_send_masq_packet(transport_zrtp *zrtp,
+						 const char *data, unsigned int length,
+						 pj_bool_t *p_masq_only)
+{
+    char zrtp_tx_buffer[MAX_RTP_PACKET_LEN + SIZE_OF_MASQ_OVERHEAD];
+    pjmedia_rtp_hdr *rtp_hdr = (void *)zrtp_tx_buffer;
+
+    PJ_ASSERT_RETURN(length <= MAX_RTP_PACKET_LEN, PJ_EINVAL);
+
+    pj_memcpy(zrtp_tx_buffer, data, length);
+#if 0
+    {
+	char buf[25];
+	PJ_LOG(1, (zrtp->base.name, "Sending ZRTP message: %s", hex2str((char *)rtp_hdr, sizeof(*rtp_hdr), buf, sizeof(buf))));
+    }
+#endif
+    pj_assert(pj_ntohl(rtp_hdr->ts) == ZRTP_MAGIC);
+    pj_assert(rtp_hdr->v == 0);
+    pj_assert(rtp_hdr->x == 1);
+    pj_assert(rtp_hdr->pt == 0);
+
+    pj_assert(sizeof(rtp_hdr->ts) == sizeof(zrtp_magic));
+    pj_assert(pj_memcmp(&rtp_hdr->ts, zrtp_magic, sizeof(rtp_hdr->ts)) == 0);
+
+    pj_memcpy(zrtp_tx_buffer + (length + OFFSET_OF_MASQ_ZRTP_MAGIC), zrtp_magic, SIZE_OF_MASQ_ZRTP_MAGIC);
+    pj_memcpy(zrtp_tx_buffer + (length + OFFSET_OF_MASQ_SSRC), &rtp_hdr->ssrc, SIZE_OF_MASQ_SSRC);
+    pj_memcpy(zrtp_tx_buffer + (length + OFFSET_OF_MASQ_SEQNO), &rtp_hdr->seq, SIZE_OF_MASQ_SEQNO);
+    
+    length += SIZE_OF_MASQ_OVERHEAD;
+    pj_assert(length <= sizeof(zrtp_tx_buffer));
+
+    rtp_hdr->v = 2;
+    rtp_hdr->x = 0;
+
+    LOCK_ZRTP (zrtp);
+
+    if (zrtp->masq_pt < 0) {
+	PJ_LOG(2, (zrtp->base.name, "RTP payload type not known yet, masquerading ZRTP as PCMU. ZRTP message could be lost"));
+	rtp_hdr->pt = PJMEDIA_RTP_PT_PCMU;
+    } else
+	rtp_hdr->pt = zrtp->masq_pt;
+
+    if (zrtp->masq_seq == 0xffff) {
+	PJ_LOG(2, (zrtp->base.name, "RTP media sequence number not known yet, cannot masquerade ZRTP sequence number. ZRTP message could be lost"));
+    } else {
+	rtp_hdr->seq = pj_htons(++ zrtp->masq_seq);
+	if (zrtp->masq_seq == 0xffff)
+	    zrtp->masq_seq = 0;
+    }
+
+    if (zrtp->masq_ts == 0xffffffff) {
+	PJ_LOG(2, (zrtp->base.name, "RTP media timestamp not known yet, cannot masquerade ZRTP timestamp. ZRTP message could be lost"));
+    } else {
+	rtp_hdr->ts = pj_htonl(++ zrtp->masq_ts);
+	if (zrtp->masq_ts == 0xffffffff)
+	    zrtp->masq_ts = 0;
+    }
+
+    *p_masq_only = zrtp->masq_mode == PJMEDIA_ZRTP_MASQ_ONLY;
+
+    UNLOCK_ZRTP (zrtp);
+
+    return pjmedia_transport_send_rtp(zrtp->member_tp, zrtp_tx_buffer, length);
+}
+#endif
+
+static void pjmedia_zrtp_stream_sendMessage(Zorg_Error * e, Zorg_Stream * stream, const struct Zorg_Blob * messagePacket)
+{
+    transport_zrtp *zrtp = (transport_zrtp *)Zorg_Stream_GetUserData(stream);
+
+#if defined(PJMEDIA_ZRTP_MASQUERADE) && (PJMEDIA_ZRTP_MASQUERADE != 0)
+    if (zrtp->setting.masquerade) {
+	pj_bool_t masq_only = PJ_FALSE;
+
+	/* Send a masqueraded packet first */
+	pj_status_t status = pjmedia_zrtp_send_masq_packet (zrtp, messagePacket->buffer, messagePacket->dataSize, &masq_only);
+
+	if (status != PJ_SUCCESS)
+	    ZORG_SET_ERROR(*e, Zorg_ErrorNetwork);
+
+	/* Masqueraded ZRTP only: no regular packet needed */
+	if (masq_only)
+	    return;
+    }
+#endif
+    if (pjmedia_transport_send_rtp(zrtp->member_tp, messagePacket->buffer, messagePacket->dataSize) != PJ_SUCCESS)
+	ZORG_SET_ERROR(*e, Zorg_ErrorNetwork);
+}
+
+const char * get_zrtplib_errstr(int err)
+{
+    switch(err) {
+    case Zorg_ErrorNone: return "[zrtp.org] success";
+    case Zorg_ErrorGeneral: return "[zrtp.org] general error";
+    case Zorg_ErrorInternal: return "[zrtp.org] internal error";
+    case Zorg_ErrorInternalAbort: return "[zrtp.org] internal abort";
+    case Zorg_ErrorNoMemory: return "[zrtp.org] out of memory";
+    case Zorg_ErrorArgument: return "[zrtp.org] invalid argument";
+    case Zorg_ErrorBufferSize: return "[zrtp.org] insufficient buffer size";
+    case Zorg_ErrorDataSize: return "[zrtp.org] bad data size";
+    case Zorg_ErrorHexDigit: return "[zrtp.org] bad hexadecimal digit";
+    case Zorg_ErrorKeySize: return "[zrtp.org] bad cryptographic key size";
+    case Zorg_ErrorSaltSize: return "[zrtp.org] bad cryptographic salt size";
+    case Zorg_ErrorIVSize: return "[zrtp.org] bad cryptographic initialization vector size";
+    case Zorg_ErrorCrypto: return "[zrtp.org] cryptography error";
+    case Zorg_ErrorNetwork: return "[zrtp.org] network error";
+    case Zorg_ErrorIO: return "[zrtp.org] I/O error";
+    case Zorg_ErrorFileSystem: return "[zrtp.org] filesystem error";
+    case Zorg_ErrorZRTPStopped: return "[zrtp.org] ZRTP stream is stopped";
+    case Zorg_ErrorZRTPBadProfile: return "[zrtp.org] bad ZRTP profile";
+    case Zorg_ErrorZRTPUnavailable: return "[zrtp.org] the information requested is currently unavailable";
+    case Zorg_ErrorZRTPSecretNotFound: return "[zrtp.org] ZRTP secret not found in cache";
+    case Zorg_ErrorZRTPBadSRTPProfile: return "[zrtp.org] ZRTP profile doesn't map to a supported SRTP profile";
+    case Zorg_ErrorZRTPBadMultistream: return "[zrtp.org] ZRTP multistream key agreement was not negotiated correctly";
+    case Zorg_ErrorZRTPWrongHashImage: return "[zrtp.org] computed ZRTP hash image doesn't match actual value";
+    case Zorg_ErrorZRTPBadSDPAttribute: return "[zrtp.org] malformed zrtp-hash SDP attribute";
+
+    default:
+	if(err >= Zorg_ErrorZRTPProtocolErrorLow && err <= Zorg_ErrorZRTPProtocolErrorHigh)
+	    return get_zrtpproto_errstr(err - Zorg_ErrorZRTPProtocolErrorLow);
+
+	PJ_ASSERT_RETURN(0, "[zrtp.org] unknown error");
+    }
+
+    PJ_ASSERT_RETURN(0, NULL);
+}
+
+const char * get_zrtpproto_errstr(int err)
+{
+    switch(err) {
+    case PJMEDIA_ZRTP_ERROR_MALFORMED_PACKET: return "[ZRTP] malformed packet";
+    case PJMEDIA_ZRTP_ERROR_CRITICAL_SOFTWARE_ERROR: return "[ZRTP] critical software error";
+    case PJMEDIA_ZRTP_ERROR_UNSUPPORTED_ZRTP_VERSION: return "[ZRTP] unsupported ZRTP version";
+    case PJMEDIA_ZRTP_ERROR_HELLO_COMPONENTS_MISMATCH: return "[ZRTP] Hello components mismatch";
+    case PJMEDIA_ZRTP_ERROR_HASH_TYPE_NOT_SUPPORTED: return "[ZRTP] hash type not supported";
+    case PJMEDIA_ZRTP_ERROR_CIPHER_TYPE_NOT_SUPPORTED: return "[ZRTP] cipher type not supported";
+    case PJMEDIA_ZRTP_ERROR_PUBLIC_KEY_EXCHANGE_NOT_SUPPORTED: return "[ZRTP] public key exchange not supported";
+    case PJMEDIA_ZRTP_ERROR_SRTP_AUTH_TAG_NOT_SUPPORTED: return "[ZRTP] SRTP auth. tag not supported";
+    case PJMEDIA_ZRTP_ERROR_SAS_RENDERING_SCHEME_NOT_SUPPORTED: return "[ZRTP] SAS rendering scheme not supported";
+    case PJMEDIA_ZRTP_ERROR_NO_SHARED_SECRET_AVAILABLE: return "[ZRTP] no shared secret available";
+    case PJMEDIA_ZRTP_ERROR_BAD_PV: return "[ZRTP] bad DH pvi or pvr";
+    case PJMEDIA_ZRTP_ERROR_HVI_MISMATCH: return "[ZRTP] DH hvi mismatch";
+    case PJMEDIA_ZRTP_ERROR_RELAYED_SAS_FROM_UNTRUSTED_MITM: return "[ZRTP] received relayed SAS from untrusted MiTM";
+    case PJMEDIA_ZRTP_ERROR_BAD_CONFIRM_MAC: return "[ZRTP] bad Confirm packet MAC";
+    case PJMEDIA_ZRTP_ERROR_NONCE_REUSE: return "[ZRTP] nonce reuse";
+    case PJMEDIA_ZRTP_ERROR_ZID_COLLISION: return "[ZRTP] equal ZIDs in Hello";
+    case PJMEDIA_ZRTP_ERROR_SSRC_COLLISION: return "[ZRTP] SSRC collision";
+    case PJMEDIA_ZRTP_ERROR_SERVICE_UNAVAILABLE: return "[ZRTP] service unavailable";
+    case PJMEDIA_ZRTP_ERROR_PROTOCOL_TIMEOUT: return "[ZRTP] protocol timeout";
+    case PJMEDIA_ZRTP_ERROR_CLEAR_DISALLOWED: return "[ZRTP] GoClear message received, but not allowed";
+    default: PJ_ASSERT_RETURN(0, "[ZRTP] unknown protocol error");
+    }
+
+    PJ_ASSERT_RETURN(0, NULL);
+}
+
+#endif  /* defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0) */
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/pjproject-vs8.sln zorg/pjproject-vs8.sln
--- original/pjproject-vs8.sln	2009-08-17 23:24:10.026339000 +0200
+++ zorg/pjproject-vs8.sln	2010-11-29 17:32:53.903044000 +0100
@@ -109,23 +109,24 @@
 Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libpjproject", "pjsip-apps\build\libpjproject.vcproj", "{23D7679C-764C-4E02-8B29-BB882CEEEFE2}"
 	ProjectSection(ProjectDependencies) = postProject
 		{F0DBAA03-1BA3-4E3B-A2CA-727E3D3AB858} = {F0DBAA03-1BA3-4E3B-A2CA-727E3D3AB858}
-		{2BB84911-C1B4-4747-B93D-36AA82CC5031} = {2BB84911-C1B4-4747-B93D-36AA82CC5031}
-		{2A3F241E-682C-47E1-9543-DC28708B406A} = {2A3F241E-682C-47E1-9543-DC28708B406A}
-		{4BF51C21-5A30-423B-82FE-1ED410E5769D} = {4BF51C21-5A30-423B-82FE-1ED410E5769D}
-		{A5D9AA24-08ED-48B9-BD65-F0A25E96BFC4} = {A5D9AA24-08ED-48B9-BD65-F0A25E96BFC4}
-		{4281CA5E-1D48-45D4-A991-2718A454B4BA} = {4281CA5E-1D48-45D4-A991-2718A454B4BA}
-		{FE07F272-AE7F-4549-9E9F-EF9B80CB1693} = {FE07F272-AE7F-4549-9E9F-EF9B80CB1693}
-		{6794B975-4E84-4F49-B2DC-C31F2224E03E} = {6794B975-4E84-4F49-B2DC-C31F2224E03E}
-		{7FDE3880-A4AB-49E3-B439-EBEF0A0C7A65} = {7FDE3880-A4AB-49E3-B439-EBEF0A0C7A65}
-		{3CF9FFA9-8387-4635-9D1B-E7944CBEFEAA} = {3CF9FFA9-8387-4635-9D1B-E7944CBEFEAA}
-		{4B059DBA-CD9C-4D0F-BE8C-FFB4EFD498E9} = {4B059DBA-CD9C-4D0F-BE8C-FFB4EFD498E9}
-		{855DC8C0-D3E9-4A2E-AE47-116605A7BC9B} = {855DC8C0-D3E9-4A2E-AE47-116605A7BC9B}
-		{4B5945CD-0CB3-49AA-A7FF-7612D93F82C0} = {4B5945CD-0CB3-49AA-A7FF-7612D93F82C0}
-		{B8719FD5-E8A6-4A36-943C-891D07F5DD21} = {B8719FD5-E8A6-4A36-943C-891D07F5DD21}
-		{DA0E03ED-53A7-4050-8A85-90541C5509F8} = {DA0E03ED-53A7-4050-8A85-90541C5509F8}
-		{B5FE16F8-3EDB-4110-BD80-B4238CC01E8D} = {B5FE16F8-3EDB-4110-BD80-B4238CC01E8D}
-		{9CA0FDFB-2172-41FC-B7F1-5CE915EDCB37} = {9CA0FDFB-2172-41FC-B7F1-5CE915EDCB37}
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F} = {B66C50C9-785A-4939-9B3C-C68A4EC25C1F}
 		{E53AA5FF-B737-40AA-BD13-387EFA99023D} = {E53AA5FF-B737-40AA-BD13-387EFA99023D}
+		{9CA0FDFB-2172-41FC-B7F1-5CE915EDCB37} = {9CA0FDFB-2172-41FC-B7F1-5CE915EDCB37}
+		{B5FE16F8-3EDB-4110-BD80-B4238CC01E8D} = {B5FE16F8-3EDB-4110-BD80-B4238CC01E8D}
+		{DA0E03ED-53A7-4050-8A85-90541C5509F8} = {DA0E03ED-53A7-4050-8A85-90541C5509F8}
+		{B8719FD5-E8A6-4A36-943C-891D07F5DD21} = {B8719FD5-E8A6-4A36-943C-891D07F5DD21}
+		{4B5945CD-0CB3-49AA-A7FF-7612D93F82C0} = {4B5945CD-0CB3-49AA-A7FF-7612D93F82C0}
+		{855DC8C0-D3E9-4A2E-AE47-116605A7BC9B} = {855DC8C0-D3E9-4A2E-AE47-116605A7BC9B}
+		{4B059DBA-CD9C-4D0F-BE8C-FFB4EFD498E9} = {4B059DBA-CD9C-4D0F-BE8C-FFB4EFD498E9}
+		{3CF9FFA9-8387-4635-9D1B-E7944CBEFEAA} = {3CF9FFA9-8387-4635-9D1B-E7944CBEFEAA}
+		{7FDE3880-A4AB-49E3-B439-EBEF0A0C7A65} = {7FDE3880-A4AB-49E3-B439-EBEF0A0C7A65}
+		{6794B975-4E84-4F49-B2DC-C31F2224E03E} = {6794B975-4E84-4F49-B2DC-C31F2224E03E}
+		{FE07F272-AE7F-4549-9E9F-EF9B80CB1693} = {FE07F272-AE7F-4549-9E9F-EF9B80CB1693}
+		{4281CA5E-1D48-45D4-A991-2718A454B4BA} = {4281CA5E-1D48-45D4-A991-2718A454B4BA}
+		{A5D9AA24-08ED-48B9-BD65-F0A25E96BFC4} = {A5D9AA24-08ED-48B9-BD65-F0A25E96BFC4}
+		{4BF51C21-5A30-423B-82FE-1ED410E5769D} = {4BF51C21-5A30-423B-82FE-1ED410E5769D}
+		{2A3F241E-682C-47E1-9543-DC28708B406A} = {2A3F241E-682C-47E1-9543-DC28708B406A}
+		{2BB84911-C1B4-4747-B93D-36AA82CC5031} = {2BB84911-C1B4-4747-B93D-36AA82CC5031}
 	EndProjectSection
 EndProject
 Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "python_pjsua", "pjsip-apps\build\python_pjsua.vcproj", "{0C91838B-3372-40B4-A764-DE075A4BC94B}"
@@ -138,6 +139,18 @@
 		{23D7679C-764C-4E02-8B29-BB882CEEEFE2} = {23D7679C-764C-4E02-8B29-BB882CEEEFE2}
 	EndProjectSection
 EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "zorg", "third_party\build\zorg\zorg.vcproj", "{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}"
+	ProjectSection(ProjectDependencies) = postProject
+		{F0DBAA03-1BA3-4E3B-A2CA-727E3D3AB858} = {F0DBAA03-1BA3-4E3B-A2CA-727E3D3AB858}
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B} = {5C45F819-C3C5-4130-A26E-958D52C0C33B}
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4} = {3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}
+		{DA0E03ED-53A7-4050-8A85-90541C5509F8} = {DA0E03ED-53A7-4050-8A85-90541C5509F8}
+	EndProjectSection
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libtomcrypt", "third_party\build\zorg\libtomcrypt.vcproj", "{5C45F819-C3C5-4130-A26E-958D52C0C33B}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libtommath", "third_party\build\zorg\libtommath.vcproj", "{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}"
+EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Pocket PC 2003 (ARMV4) = Debug|Pocket PC 2003 (ARMV4)
@@ -2846,6 +2859,222 @@
 		{5E507EA2-CB39-47CA-BD39-49EB58D7A0BB}.Release-Static|Windows Mobile 6 Professional SDK (ARMV4I).Build.0 = Release|Windows Mobile 6 Professional SDK (ARMV4I)
 		{5E507EA2-CB39-47CA-BD39-49EB58D7A0BB}.Release-Static|Windows Mobile 6 Professional SDK (ARMV4I).Deploy.0 = Release|Windows Mobile 6 Professional SDK (ARMV4I)
 		{5E507EA2-CB39-47CA-BD39-49EB58D7A0BB}.Release-Static|Windows Mobile 6 Standard SDK (ARMV4I).ActiveCfg = Release|Windows Mobile 6 Professional SDK (ARMV4I)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug|Pocket PC 2003 (ARMV4).ActiveCfg = Debug|Pocket PC 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug|Pocket PC 2003 (ARMV4).Build.0 = Debug|Pocket PC 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug|Pocket PC 2003 (ARMV4).Deploy.0 = Debug|Pocket PC 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug|Smartphone 2003 (ARMV4).ActiveCfg = Debug|Smartphone 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug|Smartphone 2003 (ARMV4).Build.0 = Debug|Smartphone 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug|Smartphone 2003 (ARMV4).Deploy.0 = Debug|Smartphone 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug|Win32.ActiveCfg = Debug|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug|Win32.Build.0 = Debug|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug|Windows Mobile 5.0 Pocket PC SDK (ARMV4I).ActiveCfg = Debug|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug|Windows Mobile 5.0 Smartphone SDK (ARMV4I).ActiveCfg = Debug|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug|Windows Mobile 6 Professional SDK (ARMV4I).ActiveCfg = Debug|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug|Windows Mobile 6 Standard SDK (ARMV4I).ActiveCfg = Debug|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug-Dynamic|Pocket PC 2003 (ARMV4).ActiveCfg = Debug-Dynamic|Pocket PC 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug-Dynamic|Pocket PC 2003 (ARMV4).Build.0 = Debug-Dynamic|Pocket PC 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug-Dynamic|Pocket PC 2003 (ARMV4).Deploy.0 = Debug-Dynamic|Pocket PC 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug-Dynamic|Smartphone 2003 (ARMV4).ActiveCfg = Debug-Dynamic|Smartphone 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug-Dynamic|Smartphone 2003 (ARMV4).Build.0 = Debug-Dynamic|Smartphone 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug-Dynamic|Smartphone 2003 (ARMV4).Deploy.0 = Debug-Dynamic|Smartphone 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug-Dynamic|Win32.ActiveCfg = Debug-Dynamic|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug-Dynamic|Win32.Build.0 = Debug-Dynamic|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug-Dynamic|Windows Mobile 5.0 Pocket PC SDK (ARMV4I).ActiveCfg = Debug-Dynamic|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug-Dynamic|Windows Mobile 5.0 Smartphone SDK (ARMV4I).ActiveCfg = Debug-Dynamic|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug-Dynamic|Windows Mobile 6 Professional SDK (ARMV4I).ActiveCfg = Debug-Dynamic|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug-Dynamic|Windows Mobile 6 Standard SDK (ARMV4I).ActiveCfg = Debug-Dynamic|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug-Static|Pocket PC 2003 (ARMV4).ActiveCfg = Debug-Static|Pocket PC 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug-Static|Pocket PC 2003 (ARMV4).Build.0 = Debug-Static|Pocket PC 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug-Static|Pocket PC 2003 (ARMV4).Deploy.0 = Debug-Static|Pocket PC 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug-Static|Smartphone 2003 (ARMV4).ActiveCfg = Debug-Static|Smartphone 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug-Static|Smartphone 2003 (ARMV4).Build.0 = Debug-Static|Smartphone 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug-Static|Smartphone 2003 (ARMV4).Deploy.0 = Debug-Static|Smartphone 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug-Static|Win32.ActiveCfg = Debug-Static|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug-Static|Win32.Build.0 = Debug-Static|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug-Static|Windows Mobile 5.0 Pocket PC SDK (ARMV4I).ActiveCfg = Debug-Static|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug-Static|Windows Mobile 5.0 Smartphone SDK (ARMV4I).ActiveCfg = Debug-Static|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug-Static|Windows Mobile 6 Professional SDK (ARMV4I).ActiveCfg = Debug-Static|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Debug-Static|Windows Mobile 6 Standard SDK (ARMV4I).ActiveCfg = Debug-Static|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release|Pocket PC 2003 (ARMV4).ActiveCfg = Release|Pocket PC 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release|Pocket PC 2003 (ARMV4).Build.0 = Release|Pocket PC 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release|Pocket PC 2003 (ARMV4).Deploy.0 = Release|Pocket PC 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release|Smartphone 2003 (ARMV4).ActiveCfg = Release|Smartphone 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release|Smartphone 2003 (ARMV4).Build.0 = Release|Smartphone 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release|Smartphone 2003 (ARMV4).Deploy.0 = Release|Smartphone 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release|Win32.ActiveCfg = Release|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release|Win32.Build.0 = Release|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release|Windows Mobile 5.0 Pocket PC SDK (ARMV4I).ActiveCfg = Release|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release|Windows Mobile 5.0 Smartphone SDK (ARMV4I).ActiveCfg = Release|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release|Windows Mobile 6 Professional SDK (ARMV4I).ActiveCfg = Release|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release|Windows Mobile 6 Standard SDK (ARMV4I).ActiveCfg = Release|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release-Dynamic|Pocket PC 2003 (ARMV4).ActiveCfg = Release-Dynamic|Pocket PC 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release-Dynamic|Pocket PC 2003 (ARMV4).Build.0 = Release-Dynamic|Pocket PC 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release-Dynamic|Pocket PC 2003 (ARMV4).Deploy.0 = Release-Dynamic|Pocket PC 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release-Dynamic|Smartphone 2003 (ARMV4).ActiveCfg = Release-Dynamic|Smartphone 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release-Dynamic|Smartphone 2003 (ARMV4).Build.0 = Release-Dynamic|Smartphone 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release-Dynamic|Smartphone 2003 (ARMV4).Deploy.0 = Release-Dynamic|Smartphone 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release-Dynamic|Win32.ActiveCfg = Release-Dynamic|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release-Dynamic|Win32.Build.0 = Release-Dynamic|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release-Dynamic|Windows Mobile 5.0 Pocket PC SDK (ARMV4I).ActiveCfg = Release-Dynamic|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release-Dynamic|Windows Mobile 5.0 Smartphone SDK (ARMV4I).ActiveCfg = Release-Dynamic|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release-Dynamic|Windows Mobile 6 Professional SDK (ARMV4I).ActiveCfg = Release-Dynamic|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release-Dynamic|Windows Mobile 6 Standard SDK (ARMV4I).ActiveCfg = Release-Dynamic|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release-Static|Pocket PC 2003 (ARMV4).ActiveCfg = Release-Static|Pocket PC 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release-Static|Pocket PC 2003 (ARMV4).Build.0 = Release-Static|Pocket PC 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release-Static|Pocket PC 2003 (ARMV4).Deploy.0 = Release-Static|Pocket PC 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release-Static|Smartphone 2003 (ARMV4).ActiveCfg = Release-Static|Smartphone 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release-Static|Smartphone 2003 (ARMV4).Build.0 = Release-Static|Smartphone 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release-Static|Smartphone 2003 (ARMV4).Deploy.0 = Release-Static|Smartphone 2003 (ARMV4)
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release-Static|Win32.ActiveCfg = Release-Static|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release-Static|Win32.Build.0 = Release-Static|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release-Static|Windows Mobile 5.0 Pocket PC SDK (ARMV4I).ActiveCfg = Release-Static|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release-Static|Windows Mobile 5.0 Smartphone SDK (ARMV4I).ActiveCfg = Release-Static|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release-Static|Windows Mobile 6 Professional SDK (ARMV4I).ActiveCfg = Release-Static|Win32
+		{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}.Release-Static|Windows Mobile 6 Standard SDK (ARMV4I).ActiveCfg = Release-Static|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug|Pocket PC 2003 (ARMV4).ActiveCfg = Debug|Pocket PC 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug|Pocket PC 2003 (ARMV4).Build.0 = Debug|Pocket PC 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug|Pocket PC 2003 (ARMV4).Deploy.0 = Debug|Pocket PC 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug|Smartphone 2003 (ARMV4).ActiveCfg = Debug|Smartphone 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug|Smartphone 2003 (ARMV4).Build.0 = Debug|Smartphone 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug|Smartphone 2003 (ARMV4).Deploy.0 = Debug|Smartphone 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug|Win32.ActiveCfg = Debug|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug|Win32.Build.0 = Debug|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug|Windows Mobile 5.0 Pocket PC SDK (ARMV4I).ActiveCfg = Debug|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug|Windows Mobile 5.0 Smartphone SDK (ARMV4I).ActiveCfg = Debug|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug|Windows Mobile 6 Professional SDK (ARMV4I).ActiveCfg = Debug|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug|Windows Mobile 6 Standard SDK (ARMV4I).ActiveCfg = Debug|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug-Dynamic|Pocket PC 2003 (ARMV4).ActiveCfg = Debug-Dynamic|Pocket PC 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug-Dynamic|Pocket PC 2003 (ARMV4).Build.0 = Debug-Dynamic|Pocket PC 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug-Dynamic|Pocket PC 2003 (ARMV4).Deploy.0 = Debug-Dynamic|Pocket PC 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug-Dynamic|Smartphone 2003 (ARMV4).ActiveCfg = Debug-Dynamic|Smartphone 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug-Dynamic|Smartphone 2003 (ARMV4).Build.0 = Debug-Dynamic|Smartphone 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug-Dynamic|Smartphone 2003 (ARMV4).Deploy.0 = Debug-Dynamic|Smartphone 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug-Dynamic|Win32.ActiveCfg = Debug-Dynamic|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug-Dynamic|Win32.Build.0 = Debug-Dynamic|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug-Dynamic|Windows Mobile 5.0 Pocket PC SDK (ARMV4I).ActiveCfg = Debug-Dynamic|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug-Dynamic|Windows Mobile 5.0 Smartphone SDK (ARMV4I).ActiveCfg = Debug-Dynamic|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug-Dynamic|Windows Mobile 6 Professional SDK (ARMV4I).ActiveCfg = Debug-Dynamic|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug-Dynamic|Windows Mobile 6 Standard SDK (ARMV4I).ActiveCfg = Debug-Dynamic|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug-Static|Pocket PC 2003 (ARMV4).ActiveCfg = Debug-Static|Pocket PC 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug-Static|Pocket PC 2003 (ARMV4).Build.0 = Debug-Static|Pocket PC 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug-Static|Pocket PC 2003 (ARMV4).Deploy.0 = Debug-Static|Pocket PC 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug-Static|Smartphone 2003 (ARMV4).ActiveCfg = Debug-Static|Smartphone 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug-Static|Smartphone 2003 (ARMV4).Build.0 = Debug-Static|Smartphone 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug-Static|Smartphone 2003 (ARMV4).Deploy.0 = Debug-Static|Smartphone 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug-Static|Win32.ActiveCfg = Debug-Static|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug-Static|Win32.Build.0 = Debug-Static|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug-Static|Windows Mobile 5.0 Pocket PC SDK (ARMV4I).ActiveCfg = Debug-Static|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug-Static|Windows Mobile 5.0 Smartphone SDK (ARMV4I).ActiveCfg = Debug-Static|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug-Static|Windows Mobile 6 Professional SDK (ARMV4I).ActiveCfg = Debug-Static|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Debug-Static|Windows Mobile 6 Standard SDK (ARMV4I).ActiveCfg = Debug-Static|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release|Pocket PC 2003 (ARMV4).ActiveCfg = Release|Pocket PC 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release|Pocket PC 2003 (ARMV4).Build.0 = Release|Pocket PC 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release|Pocket PC 2003 (ARMV4).Deploy.0 = Release|Pocket PC 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release|Smartphone 2003 (ARMV4).ActiveCfg = Release|Smartphone 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release|Smartphone 2003 (ARMV4).Build.0 = Release|Smartphone 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release|Smartphone 2003 (ARMV4).Deploy.0 = Release|Smartphone 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release|Win32.ActiveCfg = Release|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release|Win32.Build.0 = Release|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release|Windows Mobile 5.0 Pocket PC SDK (ARMV4I).ActiveCfg = Release|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release|Windows Mobile 5.0 Smartphone SDK (ARMV4I).ActiveCfg = Release|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release|Windows Mobile 6 Professional SDK (ARMV4I).ActiveCfg = Release|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release|Windows Mobile 6 Standard SDK (ARMV4I).ActiveCfg = Release|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release-Dynamic|Pocket PC 2003 (ARMV4).ActiveCfg = Release-Dynamic|Pocket PC 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release-Dynamic|Pocket PC 2003 (ARMV4).Build.0 = Release-Dynamic|Pocket PC 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release-Dynamic|Pocket PC 2003 (ARMV4).Deploy.0 = Release-Dynamic|Pocket PC 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release-Dynamic|Smartphone 2003 (ARMV4).ActiveCfg = Release-Dynamic|Smartphone 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release-Dynamic|Smartphone 2003 (ARMV4).Build.0 = Release-Dynamic|Smartphone 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release-Dynamic|Smartphone 2003 (ARMV4).Deploy.0 = Release-Dynamic|Smartphone 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release-Dynamic|Win32.ActiveCfg = Release-Dynamic|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release-Dynamic|Win32.Build.0 = Release-Dynamic|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release-Dynamic|Windows Mobile 5.0 Pocket PC SDK (ARMV4I).ActiveCfg = Release-Dynamic|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release-Dynamic|Windows Mobile 5.0 Smartphone SDK (ARMV4I).ActiveCfg = Release-Dynamic|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release-Dynamic|Windows Mobile 6 Professional SDK (ARMV4I).ActiveCfg = Release-Dynamic|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release-Dynamic|Windows Mobile 6 Standard SDK (ARMV4I).ActiveCfg = Release-Dynamic|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release-Static|Pocket PC 2003 (ARMV4).ActiveCfg = Release-Static|Pocket PC 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release-Static|Pocket PC 2003 (ARMV4).Build.0 = Release-Static|Pocket PC 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release-Static|Pocket PC 2003 (ARMV4).Deploy.0 = Release-Static|Pocket PC 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release-Static|Smartphone 2003 (ARMV4).ActiveCfg = Release-Static|Smartphone 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release-Static|Smartphone 2003 (ARMV4).Build.0 = Release-Static|Smartphone 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release-Static|Smartphone 2003 (ARMV4).Deploy.0 = Release-Static|Smartphone 2003 (ARMV4)
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release-Static|Win32.ActiveCfg = Release-Static|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release-Static|Win32.Build.0 = Release-Static|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release-Static|Windows Mobile 5.0 Pocket PC SDK (ARMV4I).ActiveCfg = Release-Static|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release-Static|Windows Mobile 5.0 Smartphone SDK (ARMV4I).ActiveCfg = Release-Static|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release-Static|Windows Mobile 6 Professional SDK (ARMV4I).ActiveCfg = Release-Static|Win32
+		{5C45F819-C3C5-4130-A26E-958D52C0C33B}.Release-Static|Windows Mobile 6 Standard SDK (ARMV4I).ActiveCfg = Release-Static|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug|Pocket PC 2003 (ARMV4).ActiveCfg = Debug|Pocket PC 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug|Pocket PC 2003 (ARMV4).Build.0 = Debug|Pocket PC 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug|Pocket PC 2003 (ARMV4).Deploy.0 = Debug|Pocket PC 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug|Smartphone 2003 (ARMV4).ActiveCfg = Debug|Smartphone 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug|Smartphone 2003 (ARMV4).Build.0 = Debug|Smartphone 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug|Smartphone 2003 (ARMV4).Deploy.0 = Debug|Smartphone 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug|Win32.ActiveCfg = Debug|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug|Win32.Build.0 = Debug|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug|Windows Mobile 5.0 Pocket PC SDK (ARMV4I).ActiveCfg = Debug|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug|Windows Mobile 5.0 Smartphone SDK (ARMV4I).ActiveCfg = Debug|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug|Windows Mobile 6 Professional SDK (ARMV4I).ActiveCfg = Debug|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug|Windows Mobile 6 Standard SDK (ARMV4I).ActiveCfg = Debug|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug-Dynamic|Pocket PC 2003 (ARMV4).ActiveCfg = Debug-Dynamic|Pocket PC 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug-Dynamic|Pocket PC 2003 (ARMV4).Build.0 = Debug-Dynamic|Pocket PC 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug-Dynamic|Pocket PC 2003 (ARMV4).Deploy.0 = Debug-Dynamic|Pocket PC 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug-Dynamic|Smartphone 2003 (ARMV4).ActiveCfg = Debug-Dynamic|Smartphone 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug-Dynamic|Smartphone 2003 (ARMV4).Build.0 = Debug-Dynamic|Smartphone 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug-Dynamic|Smartphone 2003 (ARMV4).Deploy.0 = Debug-Dynamic|Smartphone 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug-Dynamic|Win32.ActiveCfg = Debug-Dynamic|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug-Dynamic|Win32.Build.0 = Debug-Dynamic|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug-Dynamic|Windows Mobile 5.0 Pocket PC SDK (ARMV4I).ActiveCfg = Debug-Dynamic|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug-Dynamic|Windows Mobile 5.0 Smartphone SDK (ARMV4I).ActiveCfg = Debug-Dynamic|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug-Dynamic|Windows Mobile 6 Professional SDK (ARMV4I).ActiveCfg = Debug-Dynamic|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug-Dynamic|Windows Mobile 6 Standard SDK (ARMV4I).ActiveCfg = Debug-Dynamic|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug-Static|Pocket PC 2003 (ARMV4).ActiveCfg = Debug-Static|Pocket PC 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug-Static|Pocket PC 2003 (ARMV4).Build.0 = Debug-Static|Pocket PC 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug-Static|Pocket PC 2003 (ARMV4).Deploy.0 = Debug-Static|Pocket PC 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug-Static|Smartphone 2003 (ARMV4).ActiveCfg = Debug-Static|Smartphone 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug-Static|Smartphone 2003 (ARMV4).Build.0 = Debug-Static|Smartphone 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug-Static|Smartphone 2003 (ARMV4).Deploy.0 = Debug-Static|Smartphone 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug-Static|Win32.ActiveCfg = Debug-Static|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug-Static|Win32.Build.0 = Debug-Static|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug-Static|Windows Mobile 5.0 Pocket PC SDK (ARMV4I).ActiveCfg = Debug-Static|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug-Static|Windows Mobile 5.0 Smartphone SDK (ARMV4I).ActiveCfg = Debug-Static|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug-Static|Windows Mobile 6 Professional SDK (ARMV4I).ActiveCfg = Debug-Static|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Debug-Static|Windows Mobile 6 Standard SDK (ARMV4I).ActiveCfg = Debug-Static|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release|Pocket PC 2003 (ARMV4).ActiveCfg = Release|Pocket PC 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release|Pocket PC 2003 (ARMV4).Build.0 = Release|Pocket PC 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release|Pocket PC 2003 (ARMV4).Deploy.0 = Release|Pocket PC 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release|Smartphone 2003 (ARMV4).ActiveCfg = Release|Smartphone 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release|Smartphone 2003 (ARMV4).Build.0 = Release|Smartphone 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release|Smartphone 2003 (ARMV4).Deploy.0 = Release|Smartphone 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release|Win32.ActiveCfg = Release|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release|Win32.Build.0 = Release|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release|Windows Mobile 5.0 Pocket PC SDK (ARMV4I).ActiveCfg = Release|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release|Windows Mobile 5.0 Smartphone SDK (ARMV4I).ActiveCfg = Release|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release|Windows Mobile 6 Professional SDK (ARMV4I).ActiveCfg = Release|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release|Windows Mobile 6 Standard SDK (ARMV4I).ActiveCfg = Release|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release-Dynamic|Pocket PC 2003 (ARMV4).ActiveCfg = Release-Dynamic|Pocket PC 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release-Dynamic|Pocket PC 2003 (ARMV4).Build.0 = Release-Dynamic|Pocket PC 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release-Dynamic|Pocket PC 2003 (ARMV4).Deploy.0 = Release-Dynamic|Pocket PC 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release-Dynamic|Smartphone 2003 (ARMV4).ActiveCfg = Release-Dynamic|Smartphone 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release-Dynamic|Smartphone 2003 (ARMV4).Build.0 = Release-Dynamic|Smartphone 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release-Dynamic|Smartphone 2003 (ARMV4).Deploy.0 = Release-Dynamic|Smartphone 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release-Dynamic|Win32.ActiveCfg = Release-Dynamic|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release-Dynamic|Win32.Build.0 = Release-Dynamic|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release-Dynamic|Windows Mobile 5.0 Pocket PC SDK (ARMV4I).ActiveCfg = Release-Dynamic|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release-Dynamic|Windows Mobile 5.0 Smartphone SDK (ARMV4I).ActiveCfg = Release-Dynamic|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release-Dynamic|Windows Mobile 6 Professional SDK (ARMV4I).ActiveCfg = Release-Dynamic|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release-Dynamic|Windows Mobile 6 Standard SDK (ARMV4I).ActiveCfg = Release-Dynamic|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release-Static|Pocket PC 2003 (ARMV4).ActiveCfg = Release-Static|Pocket PC 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release-Static|Pocket PC 2003 (ARMV4).Build.0 = Release-Static|Pocket PC 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release-Static|Pocket PC 2003 (ARMV4).Deploy.0 = Release-Static|Pocket PC 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release-Static|Smartphone 2003 (ARMV4).ActiveCfg = Release-Static|Smartphone 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release-Static|Smartphone 2003 (ARMV4).Build.0 = Release-Static|Smartphone 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release-Static|Smartphone 2003 (ARMV4).Deploy.0 = Release-Static|Smartphone 2003 (ARMV4)
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release-Static|Win32.ActiveCfg = Release-Static|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release-Static|Win32.Build.0 = Release-Static|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release-Static|Windows Mobile 5.0 Pocket PC SDK (ARMV4I).ActiveCfg = Release-Static|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release-Static|Windows Mobile 5.0 Smartphone SDK (ARMV4I).ActiveCfg = Release-Static|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release-Static|Windows Mobile 6 Professional SDK (ARMV4I).ActiveCfg = Release-Static|Win32
+		{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}.Release-Static|Windows Mobile 6 Standard SDK (ARMV4I).ActiveCfg = Release-Static|Win32
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/pjsip/include/pjsua-lib/pjsua.h zorg/pjsip/include/pjsua-lib/pjsua.h
--- original/pjsip/include/pjsua-lib/pjsua.h	2010-10-12 14:45:15.802896000 +0200
+++ zorg/pjsip/include/pjsua-lib/pjsua.h	2010-11-29 17:39:02.879773000 +0100
@@ -305,6 +305,27 @@
 
 #endif
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+
+/**
+ * Default value of ZRTP mode usage. Valid values are PJMEDIA_ZRTP_DISABLED, 
+ * PJMEDIA_ZRTP_OPTIONAL, and PJMEDIA_ZRTP_MANDATORY.
+ */
+#ifndef PJSUA_DEFAULT_USE_ZRTP
+    #define PJSUA_DEFAULT_USE_ZRTP  PJMEDIA_ZRTP_OPTIONAL
+#endif
+
+/**
+ * Default value of ZRTP licensing mode. Valid values are PJMEDIA_ZRTP_PASSIVE, 
+ * PJMEDIA_ZRTP_ACTIVE, and PJMEDIA_ZRTP_UNLIMITED.
+ */
+#ifndef PJSUA_DEFAULT_LICENSE_ZRTP
+    #define PJSUA_DEFAULT_LICENSE_ZRTP  PJMEDIA_ZRTP_UNLIMITED
+#endif
+
+#endif
+
+
 /**
  * Controls whether PJSUA-LIB should add ICE media feature tag
  * parameter (the ";+sip.ice" parameter) to Contact header if ICE
@@ -918,6 +939,46 @@
     void (*on_ice_transport_error)(int index, pj_ice_strans_op op,
 				   pj_status_t status, void *param);
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+
+    /**
+     * This callback is called when the ZRTP transport notifies a protocol
+     * event. See @ref pjmedia_zrtp_event for more information on what
+     * protocol events can be notified.
+     */
+    void (*on_zrtp_protocol_event)(pjsua_call_id call_id,
+				   pjmedia_zrtp_event e);
+
+    /**
+     * This callback is called when the ZRTP transport notifies a security
+     * event. See @ref pjmedia_zrtp_security_event for more information on what
+     * protocol events can be notified.
+     */
+    void (*on_zrtp_security_event)(pjsua_call_id call_id,
+				   pjmedia_zrtp_security_event e);
+
+    /**
+     * This callback is called when the ZRTP transport enters SECURE mode.
+     */
+    void (*on_zrtp_secure)(pjsua_call_id call_id);
+
+    /**
+     * This callback is called when the ZRTP transport enters CLEAR mode.
+     */
+    void (*on_zrtp_not_secure)(pjsua_call_id call_id);
+
+#if defined(PJMEDIA_ZRTP_MASQUERADE) && (PJMEDIA_ZRTP_MASQUERADE != 0)
+    /**
+     * This callback is called when the masquerading mode of the ZRTP
+     * transport changes.
+     */
+    void (*on_zrtp_masq_mode_change)(pjsua_call_id call_id,
+				     pjmedia_zrtp_masquerade_mode old_mode,
+				     pjmedia_zrtp_masquerade_mode new_mode);
+#endif
+
+#endif
+
 } pjsua_callback;
 
 
@@ -1194,6 +1255,21 @@
     pj_bool_t	     srtp_optional_dup_offer;
 #endif
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+
+    /**
+     * Specify ZRTP settings.
+     *
+     */
+    pjmedia_zrtp_setting zrtp_setting;
+
+    /**
+     * Default ZRTP media settings.
+     */
+    pjmedia_zrtp_media_setting zrtp_media_setting;
+
+#endif
+
     /**
      * Disconnect other call legs when more than one 2xx responses for 
      * outgoing INVITE are received due to forking. Currently the library
@@ -1324,6 +1400,15 @@
 				const pjsua_media_config *media_cfg);
 
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+/**
+ * TODO
+ */
+PJ_DECL(void) pjsua_set_default_zid(pj_bool_t valid_zid,
+				    const pjmedia_zid_t *zid);
+#endif
+
+
 /**
  * Application is recommended to call this function after all initialization
  * is done, so that the library can do additional checking set up
@@ -1627,6 +1712,20 @@
  */
 PJ_DECL(void) pjsua_dump(pj_bool_t detail);
 
+
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+
+/**
+ * Accumulate data in the ZRTP library's RNG pool.
+ *
+ * @param buffer  Data to accumulate in the RNG pool
+ * @param length  Length of the buffer
+ */
+PJ_DECL(pj_status_t) pjsua_zrtp_entropy_add(const void *buffer,
+					    pj_uint32_t length);
+
+#endif
+
 /**
  * @}
  */
@@ -2432,6 +2531,10 @@
      */
     pjsua_call_hold_type call_hold_type;
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+    pjmedia_zrtp_media_setting zrtp_media_setting;
+#endif
+
 } pjsua_acc_config;
 
 
@@ -2961,6 +3064,9 @@
     /** Total call duration, including set-up time */
     pj_time_val		total_duration;
 
+    /** Active secure transport (SRTP, ZRTP, ...) */
+    int			secure_transport;
+
     /** Internal */
     struct {
 	char	local_info[128];
@@ -3027,6 +3133,35 @@
 
 
 /**
+ * Make outgoing call to the specified URI using the specified account and
+ * secure RTP transport.
+ *
+ * @param acc_id	The account to be used.
+ * @param dst_uri	URI to be put in the To header (normally is the same
+ *			as the target URI).
+ * @param options	Options (must be zero at the moment).
+ * @param secure_transport Secure RTP transport to use for the call. Can be
+ *                      PJMEDIA_TRANSPORT_TYPE_SRTP for SRTP,
+ *                      PJMEDIA_TRANSPORT_TYPE_ZRTP for ZRTP, or zero for
+ *                      unsecured RTP.
+ * @param user_data	Arbitrary user data to be attached to the call, and
+ *			can be retrieved later.
+ * @param msg_data	Optional headers etc to be added to outgoing INVITE
+ *			request, or NULL if no custom header is desired.
+ * @param p_call_id	Pointer to receive call identification.
+ *
+ * @return		PJ_SUCCESS on success, or the appropriate error code.
+ */
+PJ_DECL(pj_status_t) pjsua_call_make_secure_call(pjsua_acc_id acc_id,
+						 const pj_str_t *dst_uri,
+						 unsigned options,
+						 unsigned secure_transport,
+						 void *user_data,
+						 const pjsua_msg_data *msg_data,
+						 pjsua_call_id *p_call_id);
+
+
+/**
  * Check if the specified call has active INVITE session and the INVITE
  * session has not been disconnected.
  *
@@ -3404,6 +3539,29 @@
 					     const pjsua_msg_data *msg_data);
 
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+
+typedef struct pjsua_zrtp_sas
+{
+    char buffer[PJMEDIA_ZRTP_MAX_SAS_STRING_LEN + 1];
+} pjsua_zrtp_sas;
+
+PJ_DECL(pj_status_t) pjsua_call_zrtp_get_secure(pjsua_call_id call_id,
+						pj_bool_t * is_secure);
+
+PJ_DECL(pj_status_t) pjsua_call_zrtp_set_secure(pjsua_call_id call_id,
+						pj_bool_t is_secure);
+
+PJ_DECL(pj_status_t) pjsua_call_zrtp_set_sas_verified(pjsua_call_id call_id,
+						      pj_bool_t is_verified);
+
+PJ_DECL(pj_status_t) pjsua_call_zrtp_get_sas(pjsua_call_id call_id,
+					     pjsua_zrtp_sas * sas1,
+					     pjsua_zrtp_sas * sas2,
+					     pj_bool_t * is_verified);
+
+#endif
+
 /**
  * Terminate all calls. This will initiate #pjsua_call_hangup() for all
  * currently active calls. 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/pjsip/include/pjsua-lib/pjsua_internal.h zorg/pjsip/include/pjsua-lib/pjsua_internal.h
--- original/pjsip/include/pjsua-lib/pjsua_internal.h	2010-10-20 07:31:08.862514000 +0200
+++ zorg/pjsip/include/pjsua-lib/pjsua_internal.h	2010-11-29 17:39:02.879773000 +0100
@@ -88,6 +88,11 @@
 					    address)			    */
     pj_stun_nat_type	 rem_nat_type; /**< NAT type of remote endpoint.    */
     pjmedia_srtp_use	 rem_srtp_use; /**< Remote's SRTP usage policy.	    */
+    pjmedia_zrtp_use	 rem_zrtp_use; /**< Remote's ZRTP usage policy.	    */
+
+    int			 secure_transport; /**< Preferred secure transport to be used.  */
+
+    int			 active_transport; /**< Active secure transport used.   */
 
     char    last_text_buf_[128];    /**< Buffer for last_text.		    */
 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/pjsip/src/pjsua-lib/pjsua_call.c zorg/pjsip/src/pjsua-lib/pjsua_call.c
--- original/pjsip/src/pjsua-lib/pjsua_call.c	2010-10-20 07:31:08.862514000 +0200
+++ zorg/pjsip/src/pjsua-lib/pjsua_call.c	2010-11-29 17:39:02.879773000 +0100
@@ -350,6 +350,77 @@
 					  pjsua_call_id *p_call_id)
 {
     pj_pool_t *tmp_pool;
+    pj_str_t dup;
+    pjsip_uri *uri;
+    unsigned secure_transport = 0;
+    pj_status_t status;
+
+    tmp_pool = pjsua_pool_create("tmpcall10", 512, 256);
+
+    if (tmp_pool == NULL)
+	return PJ_ENOMEM;
+
+    if (pj_strdup_with_null (tmp_pool, &dup, dest_uri) == NULL) {
+	pj_pool_release (tmp_pool);
+	return PJ_ENOMEM;
+    }
+
+    uri = pjsip_parse_uri (tmp_pool, dup.ptr, dup.slen, 0);
+
+    if (uri == NULL) {
+	pj_pool_release (tmp_pool);
+	return PJSIP_EINVALIDREQURI;
+    }
+
+    if (PJSIP_URI_SCHEME_IS_SIP(uri) || PJSIP_URI_SCHEME_IS_SIPS(uri)) {
+	pjsip_sip_uri * sip_uri = (pjsip_sip_uri *)uri;
+	pj_str_t mediatransport_name = pj_str ("mediatransport");
+	pjsip_param *mediatransport = pjsip_param_find (&sip_uri->other_param, &mediatransport_name);
+
+	if (mediatransport) {
+	    if (pj_stricmp2 (&mediatransport->value, "SRTP") == 0)
+		secure_transport = PJMEDIA_TRANSPORT_TYPE_SRTP;
+	    else if (pj_stricmp2 (&mediatransport->value, "ZRTP") == 0)
+		secure_transport = PJMEDIA_TRANSPORT_TYPE_ZRTP;
+	    else {
+		pjsua_perror(THIS_FILE, "Unrecognized value of 'mediatransport' parameter", 
+			     PJSIP_EINVALIDREQURI);
+		pj_pool_release(tmp_pool);
+		return PJSIP_EINVALIDREQURI;
+	    }
+
+	    pj_list_erase (mediatransport);
+	    dup.slen = pjsip_uri_print (PJSIP_URI_IN_REQ_URI, sip_uri, dup.ptr, dup.slen + 1);
+	    dest_uri = &dup;
+	}
+    }
+
+    if (secure_transport == 0) {
+	pj_pool_release (tmp_pool);
+	tmp_pool = NULL;
+    }
+
+    status = pjsua_call_make_secure_call (acc_id, dest_uri, options, secure_transport, user_data, msg_data, p_call_id);
+
+    if (tmp_pool)
+	pj_pool_release (tmp_pool);
+
+    return status;
+}
+
+
+/*
+ * Make outgoing call to the specified URI using the specified account and secure RTP transport.
+ */
+PJ_DEF(pj_status_t) pjsua_call_make_secure_call( pjsua_acc_id acc_id,
+						 const pj_str_t *dest_uri,
+						 unsigned options,
+						 unsigned secure_transport,
+						 void *user_data,
+						 const pjsua_msg_data *msg_data,
+						 pjsua_call_id *p_call_id)
+{
+    pj_pool_t *tmp_pool;
     pjsip_dialog *dlg = NULL;
     pjmedia_sdp_session *offer;
     pjsip_inv_session *inv = NULL;
@@ -434,6 +505,21 @@
 	}
     }
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0) && defined(PJMEDIA_HAS_SRTP) && (PJMEDIA_HAS_SRTP != 0)
+    if (secure_transport == PJMEDIA_TRANSPORT_TYPE_SRTP) {
+	call->rem_srtp_use = PJMEDIA_SRTP_MANDATORY;
+	call->rem_zrtp_use = PJMEDIA_ZRTP_DISABLED;
+    } else if (secure_transport == PJMEDIA_TRANSPORT_TYPE_ZRTP) {
+	call->rem_zrtp_use = PJMEDIA_ZRTP_MANDATORY;
+	call->rem_srtp_use = PJMEDIA_SRTP_DISABLED;
+    } else if (secure_transport != 0) {
+	pjsua_perror(THIS_FILE, "Bad secure transport", PJ_EINVAL);
+	return PJ_EINVAL;
+    }
+    call->secure_transport = secure_transport;
+    call->active_transport = secure_transport;
+#endif
+
     PJ_LOG(4,(THIS_FILE, "Making call with acc #%d to %.*s", acc_id,
 	      (int)dest_uri->slen, dest_uri->ptr));
 
@@ -813,6 +899,32 @@
 				NULL, NULL, NULL);
 	    PJSUA_UNLOCK();
 	    return PJ_TRUE;
+	} else {
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0) && \
+	defined(PJMEDIA_HAS_SRTP) && (PJMEDIA_HAS_SRTP != 0)
+	    /* Check if incoming call requires ZRTP or SRTP. */
+	    static const pj_str_t ID_ZRTP_HASH = { "zrtp-hash", 9 };
+	    static const pj_str_t ID_SRTP_CRYPTO = { "crypto", 6 };
+	    unsigned i;
+
+	    for (i=0; i<offer->media_count; ++i) {
+    		if (pjmedia_sdp_media_find_attr(offer->media[i], &ID_ZRTP_HASH, NULL)) {
+		    PJ_LOG(4,(THIS_FILE,"Remote side requires ZRTP"));
+		    call->secure_transport = PJMEDIA_TRANSPORT_TYPE_ZRTP;
+		    call->active_transport = PJMEDIA_TRANSPORT_TYPE_ZRTP;
+		    call->rem_srtp_use = PJMEDIA_SRTP_DISABLED;
+		    call->rem_zrtp_use = PJMEDIA_ZRTP_MANDATORY;
+		    break;
+		} else if (pjmedia_sdp_media_find_attr(offer->media[i], &ID_SRTP_CRYPTO, NULL)) {
+		    PJ_LOG(4,(THIS_FILE,"Remote side requires SRTP"));
+		    call->secure_transport = PJMEDIA_TRANSPORT_TYPE_SRTP;
+		    call->active_transport = PJMEDIA_TRANSPORT_TYPE_SRTP;
+		    call->rem_srtp_use = PJMEDIA_SRTP_MANDATORY;
+		    call->rem_zrtp_use = PJMEDIA_ZRTP_DISABLED;
+		    break;
+		}
+	    }
+#endif
 	}
 
     } else {
@@ -1360,6 +1472,8 @@
 	PJ_TIME_VAL_SUB(info->total_duration, call->start_time);
     }
 
+    info->secure_transport = call->active_transport;
+
     pjsip_dlg_dec_lock(dlg);
 
     return PJ_SUCCESS;
@@ -2145,6 +2259,109 @@
 }
 
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+
+PJ_DEF(pj_status_t) pjsua_call_zrtp_get_secure(pjsua_call_id call_id, pj_bool_t * is_secure)
+{
+    pjsua_call *call;
+    pjsip_dialog *dlg;
+    pj_status_t status;
+    pjmedia_zrtp_stream_info zstream;
+
+    PJ_ASSERT_RETURN(call_id>=0 && call_id<(int)pjsua_var.ua_cfg.max_calls && is_secure,
+		     PJ_EINVAL);
+
+    status = acquire_call("pjsua_call_zrtp_get_secure", call_id, &call, &dlg);
+    if (status != PJ_SUCCESS)
+	return status;
+
+    status = pjmedia_transport_zrtp_get_info (call->med_tp, NULL, &zstream);
+    pj_assert(status == PJ_SUCCESS);
+
+    if (status == PJ_SUCCESS)
+	*is_secure = zstream.state == PJMEDIA_ZRTP_STATE_SECURE;
+
+    pjsip_dlg_dec_lock(dlg);
+    return status;
+}
+
+PJ_DEF(pj_status_t) pjsua_call_zrtp_set_secure(pjsua_call_id call_id, pj_bool_t is_secure)
+{
+    pjsua_call *call;
+    pjsip_dialog *dlg;
+    pj_status_t status;
+
+    PJ_ASSERT_RETURN(call_id>=0 && call_id<(int)pjsua_var.ua_cfg.max_calls,
+		     PJ_EINVAL);
+
+    status = acquire_call("pjsua_call_zrtp_set_secure", call_id, &call, &dlg);
+    if (status != PJ_SUCCESS)
+	return status;
+
+    if (is_secure)
+	status = pjmedia_transport_zrtp_go_secure (call->med_tp);
+    else
+	status = pjmedia_transport_zrtp_go_clear (call->med_tp);
+
+    pjsip_dlg_dec_lock(dlg);
+    return status;
+}
+
+PJ_DEF(pj_status_t) pjsua_call_zrtp_set_sas_verified(pjsua_call_id call_id, pj_bool_t is_verified)
+{
+    pjsua_call *call;
+    pjsip_dialog *dlg;
+    pj_status_t status;
+
+    PJ_ASSERT_RETURN(call_id>=0 && call_id<(int)pjsua_var.ua_cfg.max_calls,
+		     PJ_EINVAL);
+
+    status = acquire_call("pjsua_call_zrtp_set_sas_verified", call_id, &call, &dlg);
+    if (status != PJ_SUCCESS)
+	return status;
+
+    status = pjmedia_transport_zrtp_set_sas_verified (call->med_tp, is_verified);
+
+    pjsip_dlg_dec_lock(dlg);
+    return status;
+}
+
+PJ_DEF(pj_status_t) pjsua_call_zrtp_get_sas(pjsua_call_id call_id,
+					    pjsua_zrtp_sas * sas1,
+					    pjsua_zrtp_sas * sas2,
+					    pj_bool_t * is_verified)
+{
+    pjsua_call *call;
+    pjsip_dialog *dlg;
+    pj_status_t status;
+    pjmedia_zrtp_session_info zsession;
+
+    PJ_ASSERT_RETURN(call_id>=0 && call_id<(int)pjsua_var.ua_cfg.max_calls && sas1 && sas2,
+		     PJ_EINVAL);
+
+    status = acquire_call("pjsua_call_zrtp_get_sas", call_id, &call, &dlg);
+    if (status != PJ_SUCCESS)
+	return status;
+
+    status = pjmedia_transport_zrtp_get_info (call->med_tp, &zsession, NULL);
+    pj_assert (status == PJ_SUCCESS);
+
+    if (status == PJ_SUCCESS) {
+	if (zsession.sas_available) {
+	    pj_memcpy (sas1->buffer, zsession.sas1, sizeof(sas1->buffer));
+	    pj_memcpy (sas2->buffer, zsession.sas2, sizeof(sas2->buffer));
+	    
+	    if (is_verified)
+		*is_verified = !!zsession.sas_verified;
+	} else
+	    status = PJ_EUNKNOWN; /*TODO*/
+    }
+
+    pjsip_dlg_dec_lock(dlg);
+    return status;
+}
+#endif
+
 /*
  * Terminate all calls.
  */
@@ -3403,6 +3620,15 @@
 
     }
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+    /* Time to start the ZRTP stream */
+    if (call->active_transport == PJMEDIA_TRANSPORT_TYPE_ZRTP &&
+			inv->state == PJSIP_INV_STATE_CONFIRMED) {
+	PJ_LOG(3,(THIS_FILE, "Starting ZRTP on call %d", call->index));
+	pjmedia_transport_zrtp_start (call->med_tp);
+    }
+#endif
+
     PJSUA_UNLOCK();
 }
 
@@ -4182,9 +4408,10 @@
 
     /* Now make the outgoing call. */
     tmp = pj_str(uri);
-    status = pjsua_call_make_call(existing_call->acc_id, &tmp, 0,
-				  existing_call->user_data, &msg_data, 
-				  &new_call);
+    status = pjsua_call_make_secure_call(existing_call->acc_id, &tmp, 0,
+					 existing_call->secure_transport,
+					 existing_call->user_data, &msg_data, 
+					 &new_call);
     if (status != PJ_SUCCESS) {
 
 	/* Notify xferer about the error (if we have subscription) */
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/pjsip/src/pjsua-lib/pjsua_core.c zorg/pjsip/src/pjsua-lib/pjsua_core.c
--- original/pjsip/src/pjsua-lib/pjsua_core.c	2010-10-01 04:03:42.431518000 +0200
+++ zorg/pjsip/src/pjsua-lib/pjsua_core.c	2010-11-29 17:39:02.879773000 +0100
@@ -93,6 +93,18 @@
     pj_strdup_with_null(pool, &dst->log_filename, &src->log_filename);
 }
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+static void pjsua_on_zrtp_security_event(pjsua_call_id call_id, pjmedia_zrtp_security_event e)
+{
+    if (e == PJMEDIA_ZRTP_EVENT_ERROR) {
+	pj_str_t reason;
+	reason.ptr = "ZRTP protocol error";
+	reason.slen = pj_ansi_strlen(reason.ptr);
+	pjsua_call_hangup(call_id, 0, &reason, NULL);
+    }
+}
+#endif
+
 PJ_DEF(void) pjsua_config_default(pjsua_config *cfg)
 {
     pj_bzero(cfg, sizeof(*cfg));
@@ -107,6 +119,13 @@
     cfg->use_srtp = PJSUA_DEFAULT_USE_SRTP;
     cfg->srtp_secure_signaling = PJSUA_DEFAULT_SRTP_SECURE_SIGNALING;
 #endif
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+    pjmedia_zrtp_setting_default(&cfg->zrtp_setting);
+    pjmedia_zrtp_media_setting_default(&cfg->zrtp_media_setting);
+    cfg->zrtp_media_setting.close_member_tp = PJ_FALSE;
+    cfg->zrtp_media_setting.manual_start = PJ_TRUE;
+    cfg->cb.on_zrtp_security_event = pjsua_on_zrtp_security_event;
+#endif
     cfg->hangup_forked_call = PJ_TRUE;
 
     cfg->use_timer = PJSUA_SIP_TIMER_OPTIONAL;
@@ -190,6 +209,9 @@
 #endif
     pj_list_init(&cfg->reg_hdr_list);
     cfg->call_hold_type = PJSUA_CALL_HOLD_TYPE_DEFAULT;
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+    cfg->zrtp_media_setting = pjsua_var.ua_cfg.zrtp_media_setting;
+#endif
 }
 
 PJ_DEF(void) pjsua_buddy_config_default(pjsua_buddy_config *cfg)
@@ -609,16 +631,16 @@
 {
     pj_status_t status;
 
+    /* Init PJLIB: */
+    status = pj_init();
+    PJ_ASSERT_RETURN(status == PJ_SUCCESS, status);
+
     /* Init pjsua data */
     init_data();
 
     /* Set default logging settings */
     pjsua_logging_config_default(&pjsua_var.log_cfg);
 
-    /* Init PJLIB: */
-    status = pj_init();
-    PJ_ASSERT_RETURN(status == PJ_SUCCESS, status);
-
     /* Init random seed */
     init_random_seed();
 
@@ -2642,3 +2664,12 @@
     PJ_LOG(3,(THIS_FILE, "Dump complete"));
 }
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+
+PJ_DEF(pj_status_t) pjsua_zrtp_entropy_add(const void *buffer, pj_uint32_t length)
+{
+    return pjmedia_zrtp_entropy_add(buffer, length);
+}
+
+#endif
+
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/pjsip/src/pjsua-lib/pjsua_media.c zorg/pjsip/src/pjsua-lib/pjsua_media.c
--- original/pjsip/src/pjsua-lib/pjsua_media.c	2010-10-05 18:32:04.938628000 +0200
+++ zorg/pjsip/src/pjsua-lib/pjsua_media.c	2010-11-29 17:39:02.879773000 +0100
@@ -58,6 +58,64 @@
     pj_stun_auth_cred_dup(pool, &dst->turn_auth_cred, &src->turn_auth_cred);
 }
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+
+static pj_bool_t pjsua_call_by_transport(pjmedia_transport *tp, pjsua_call_id *call_id)
+{
+    pjsua_call_id i;
+    pj_bool_t found = PJ_FALSE;
+
+    PJSUA_LOCK();
+
+    for (i = 0; i < PJSUA_MAX_CALLS; ++ i) {
+	if (pjsua_var.calls[i].med_tp == tp || pjsua_var.calls[i].med_orig == tp) {
+	    found = PJ_TRUE;
+	    break;
+	}
+    }
+
+    PJSUA_UNLOCK();
+
+    if (found)
+	*call_id = i;
+
+    return found;
+}
+
+static void pjsua_on_zrtp_protocol_event(pjmedia_transport *tp, pjmedia_zrtp_event e)
+{
+    pjsua_call_id call_id;
+    PJ_ASSERT_RETURN(pjsua_call_by_transport(tp, &call_id),);
+    if (pjsua_var.ua_cfg.cb.on_zrtp_protocol_event)
+	pjsua_var.ua_cfg.cb.on_zrtp_protocol_event(call_id, e);
+}
+
+static void pjsua_on_zrtp_security_event(pjmedia_transport *tp, pjmedia_zrtp_security_event e)
+{
+    pjsua_call_id call_id;
+    PJ_ASSERT_RETURN(pjsua_call_by_transport(tp, &call_id),);
+    if (pjsua_var.ua_cfg.cb.on_zrtp_security_event)
+	pjsua_var.ua_cfg.cb.on_zrtp_security_event(call_id, e);
+}
+
+static void pjsua_on_zrtp_secure(pjmedia_transport *tp)
+{
+    pjsua_call_id call_id;
+    PJ_ASSERT_RETURN(pjsua_call_by_transport(tp, &call_id),);
+    if (pjsua_var.ua_cfg.cb.on_zrtp_secure)
+	pjsua_var.ua_cfg.cb.on_zrtp_secure(call_id);
+}
+
+static void pjsua_on_zrtp_not_secure(pjmedia_transport *tp)
+{
+    pjsua_call_id call_id;
+    PJ_ASSERT_RETURN(pjsua_call_by_transport(tp, &call_id),);
+    if (pjsua_var.ua_cfg.cb.on_zrtp_not_secure)
+	pjsua_var.ua_cfg.cb.on_zrtp_not_secure(call_id);
+}
+
+#endif
+
 /**
  * Init media subsystems.
  */
@@ -334,6 +392,33 @@
     }
 #endif
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+    /* Initialize ZRTP library. */
+    pjsua_var.ua_cfg.zrtp_setting.callbacks.on_protocol_event = pjsua_on_zrtp_protocol_event;
+    pjsua_var.ua_cfg.zrtp_setting.callbacks.on_security_event = pjsua_on_zrtp_security_event;
+    pjsua_var.ua_cfg.zrtp_setting.callbacks.on_secure = pjsua_on_zrtp_secure;
+    pjsua_var.ua_cfg.zrtp_setting.callbacks.on_not_secure = pjsua_on_zrtp_not_secure;
+    status = pjmedia_zrtp_init_lib(&pjsua_var.ua_cfg.zrtp_setting);
+
+    if (status != PJ_SUCCESS) {
+	pjsua_perror(THIS_FILE, "Error initializing ZRTP library", 
+		     status);
+	return status;
+    }
+
+    /* Generate default ZID */
+    if (pjsua_var.ua_cfg.zrtp_media_setting.valid_zid)
+	status = pjmedia_zrtp_set_default_zid(&pjsua_var.ua_cfg.zrtp_media_setting.zid);
+    else
+	status = pjmedia_zrtp_set_default_zid(NULL);
+
+    if (status != PJ_SUCCESS) {
+	pjsua_perror(THIS_FILE, "Error setting default ZID", 
+		     status);
+	return status;
+    }
+#endif
+
     return PJ_SUCCESS;
 }
 
@@ -738,6 +823,11 @@
 	//pjmedia_snd_deinit();
     }
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+    /* Deinitializate ZRTP in time. */
+    pjmedia_zrtp_deinit_lib();
+#endif
+
     /* Reset RTP port */
     next_rtp_port = 0;
 
@@ -1080,6 +1170,7 @@
     /* Set media transport auto_delete to True */
     for (i=0; i<pjsua_var.ua_cfg.max_calls; ++i) {
 	pjsua_var.calls[i].med_tp_auto_del = PJ_TRUE;
+	pjsua_var.calls[i].secure_transport = 0;
     }
 
     PJSUA_UNLOCK();
@@ -1175,11 +1266,16 @@
     pjsua_call *call = &pjsua_var.calls[call_id];
     pj_status_t status;
 
-#if defined(PJMEDIA_HAS_SRTP) && (PJMEDIA_HAS_SRTP != 0)
+#if (defined(PJMEDIA_HAS_SRTP) && (PJMEDIA_HAS_SRTP != 0)) || (defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0))
     pjsua_acc *acc = &pjsua_var.acc[call->acc_id];
+#endif
+#if defined(PJMEDIA_HAS_SRTP) && (PJMEDIA_HAS_SRTP != 0)
     pjmedia_srtp_setting srtp_opt;
     pjmedia_transport *srtp = NULL;
 #endif
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+    pjmedia_transport *zrtp = NULL;
+#endif
 
     PJ_UNUSED_ARG(role);
 
@@ -1192,19 +1288,65 @@
 	return PJ_EBUSY;
     }
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+    /* This function may be called when ZRTP transport already exists 
+     * (e.g: in re-invite, update), don't need to destroy/re-create.
+     */
+    if (
+#if defined(PJMEDIA_HAS_SRTP) && (PJMEDIA_HAS_SRTP != 0)
+	    !call->rem_srtp_use &&
+#endif
+	    ((call->secure_transport == 0 ||
+	    (call->secure_transport == PJMEDIA_TRANSPORT_TYPE_ZRTP &&
+	     call->active_transport != call->secure_transport))
+    	|| !call->med_orig || call->med_tp == call->med_orig)) {
+
+ 	if (call->med_orig && call->med_tp != call->med_orig) {
+ 	    /* XXX Release previous transport. */
+	    call->med_tp = call->med_orig;
+	}
+	/* Always create ZRTP adapter */
+	status = pjmedia_transport_zrtp_create(pjsua_var.med_endpt,
+					       call->med_tp,
+					       pjsip_endpt_get_timer_heap(pjsua_var.endpt),
+					       &acc->cfg.zrtp_media_setting, &zrtp);
+	if (status != PJ_SUCCESS) {
+	    if (sip_err_code)
+		*sip_err_code = PJSIP_SC_INTERNAL_SERVER_ERROR;
+	    return status;
+	}
+
+	/* Set ZRTP as current media transport */
+	call->med_orig = call->med_tp;
+	call->med_tp = zrtp;
+	call->secure_transport = PJMEDIA_TRANSPORT_TYPE_ZRTP;
+	call->active_transport = PJMEDIA_TRANSPORT_TYPE_ZRTP;
+    }
+#endif
 #if defined(PJMEDIA_HAS_SRTP) && (PJMEDIA_HAS_SRTP != 0)
     /* This function may be called when SRTP transport already exists 
      * (e.g: in re-invite, update), don't need to destroy/re-create.
      */
-    if (!call->med_orig || call->med_tp == call->med_orig) {
+    if (call->secure_transport == 0 ||
+	    (call->secure_transport == PJMEDIA_TRANSPORT_TYPE_SRTP &&
+	     call->active_transport != call->secure_transport)
+    	|| !call->med_orig || call->med_tp == call->med_orig) {
+
+ 	if (call->med_orig && call->med_tp != call->med_orig) {
+ 	    /* XXX Release previous transport. */
+	    call->med_tp = call->med_orig;
+	}
 
 	/* Check if SRTP requires secure signaling */
 	if (acc->cfg.use_srtp != PJMEDIA_SRTP_DISABLED) {
+	    /* Relax security rules when using with ZRTP. */
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
 	    if (security_level < acc->cfg.srtp_secure_signaling) {
 		if (sip_err_code)
 		    *sip_err_code = PJSIP_SC_NOT_ACCEPTABLE;
 		return PJSIP_ESESSIONINSECURE;
 	    }
+#endif
 	}
 
 	/* Always create SRTP adapter */
@@ -1230,9 +1372,34 @@
 	/* Set SRTP as current media transport */
 	call->med_orig = call->med_tp;
 	call->med_tp = srtp;
+	call->secure_transport = PJMEDIA_TRANSPORT_TYPE_SRTP;
+	call->active_transport = PJMEDIA_TRANSPORT_TYPE_SRTP;
+    }
+#elif defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+    /* This function may be called when ZRTP transport already exists 
+     * (e.g: in re-invite, update), don't need to destroy/re-create.
+     */
+    if (!call->med_orig || call->med_tp == call->med_orig) {
+
+	/* Always create ZRTP adapter */
+	status = pjmedia_transport_zrtp_create(pjsua_var.med_endpt,
+					       call->med_tp,
+					       pjsip_endpt_get_timer_heap(pjsua_var.endpt),
+					       &acc->cfg.zrtp_media_setting, &zrtp);
+	if (status != PJ_SUCCESS) {
+	    if (sip_err_code)
+		*sip_err_code = PJSIP_SC_INTERNAL_SERVER_ERROR;
+	    return status;
+	}
+
+	/* Set ZRTP as current media transport */
+	call->med_orig = call->med_tp;
+	call->med_tp = zrtp;
     }
 #else
     call->med_orig = call->med_tp;
+    call->secure_transport = 0;
+    call->active_transport = 0;
     PJ_UNUSED_ARG(security_level);
 #endif
 
@@ -1648,6 +1815,16 @@
 		    call->rem_srtp_use = srtp_info->peer_use;
 		    break;
 		}
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+		if (tp_info.spc_info[i].type == PJMEDIA_TRANSPORT_TYPE_ZRTP) 
+		{
+		    pjmedia_zrtp_info *zrtp_info = 
+				(pjmedia_zrtp_info*) tp_info.spc_info[i].buffer;
+
+		    call->rem_zrtp_use = zrtp_info->peer_use;
+		    break;
+		}
+#endif
 	    }
 	}
 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/pjsip-apps/src/pjsua/pjsua_app.c zorg/pjsip-apps/src/pjsua/pjsua_app.c
--- original/pjsip-apps/src/pjsua/pjsua_app.c	2010-10-12 14:45:15.802896000 +0200
+++ zorg/pjsip-apps/src/pjsua/pjsua_app.c	2010-11-29 17:44:15.035863000 +0100
@@ -154,6 +154,18 @@
 pj_bool_t 	app_restart;
 pj_log_func     *log_cb = NULL;
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+static void on_zrtp_protocol_event(pjsua_call_id call_id, pjmedia_zrtp_event e);
+static void on_zrtp_security_event(pjsua_call_id call_id, pjmedia_zrtp_security_event e);
+static void on_zrtp_secure(pjsua_call_id call_id);
+static void on_zrtp_not_secure(pjsua_call_id call_id);
+#if defined(PJMEDIA_ZRTP_MASQUERADE) && (PJMEDIA_ZRTP_MASQUERADE != 0)
+static void on_zrtp_masq_mode_change(pjsua_call_id call_id,
+				     pjmedia_zrtp_masquerade_mode old_mode,
+				     pjmedia_zrtp_masquerade_mode new_mode);
+#endif
+#endif
+
 /*****************************************************************************
  * Configuration manipulation
  */
@@ -203,6 +215,19 @@
     puts  ("                      3:optional by duplicating media offer (def:0)");
     puts  ("  --srtp-secure=N     SRTP require secure SIP? 0:no, 1:tls, 2:sips (def:1)");
 #endif
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+    puts  ("  --zrtp-use=N        Use ZRTP? 0:disabled, 1:optional, 2:mandatory (def:1)");
+    puts  ("  --zrtp-id=IN        ZRTP ZID (24 hexadecimal characters, or '*' for random)");
+    puts  ("  --zrtp-flags=FLAGS  ZRTP flags: (def:cSdO)");
+    puts  ("                      C/c enable/disable allowclear");
+    puts  ("                      S/s enable/disable autosecure");
+    puts  ("                      D/d enable/disable disclose_bit");
+    puts  ("                      O/o enable/disable discovery_optimization");
+    puts  ("  --zrtp-cachettl=S   Set TTL of cached ZRTP secrets to S seconds (def:30 days)");
+#if defined(PJMEDIA_ZRTP_MASQUERADE) && (PJMEDIA_ZRTP_MASQUERADE != 0)
+    puts  ("  --zrtp-masquerade=N Masquerade ZRTP messages as media packets? 0:no, 1:yes, 2:always (def:0)");
+#endif
+#endif
     puts  ("  --registrar=url     Set the URL of registrar server");
     puts  ("  --id=url            Set the URL of local ID (used in From header)");
     puts  ("  --contact=url       Optionally override the Contact information");
@@ -253,6 +278,12 @@
     puts  ("                      May be specified multiple times");
     puts  ("  --stun-srv=FORMAT   Set STUN server host or domain. This option may be");
     puts  ("                      specified more than once. FORMAT is hostdom[:PORT]");
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+    puts  ("  --zrtp-global-id=IN Default ZRTP ZID (24 hexadecimal characters, or '*' for random)");
+    puts  ("  --zrtp-license=N    ZRTP license: 0:passive, 1:active, 2:unlimited (def:2)");
+    puts  ("  --zrtp-clientid=ID  ZRTP peer id");
+    puts  ("  --zrtp-cache=FILE   ZRTP secrets cache file");
+#endif
     puts  ("");
     puts  ("TLS Options:");
     puts  ("  --use-tls           Enable TLS transport (default=no)");
@@ -346,6 +377,15 @@
     unsigned i;
 
     pjsua_config_default(&cfg->cfg);
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+    cfg->cfg.cb.on_zrtp_protocol_event = on_zrtp_protocol_event;
+    cfg->cfg.cb.on_zrtp_security_event = on_zrtp_security_event;
+    cfg->cfg.cb.on_zrtp_secure = on_zrtp_secure;
+    cfg->cfg.cb.on_zrtp_not_secure = on_zrtp_not_secure;
+#if defined(PJMEDIA_ZRTP_MASQUERADE) && (PJMEDIA_ZRTP_MASQUERADE != 0)
+    cfg->cfg.cb.on_zrtp_masq_mode_change = on_zrtp_masq_mode_change;
+#endif
+#endif
     pj_ansi_sprintf(tmp, "PJSUA v%s/%s", pj_get_version(), PJ_OS_NAME);
     pj_strdup2_with_null(app_config.pool, &cfg->cfg.user_agent, tmp);
 
@@ -520,6 +560,9 @@
 	   OPT_AUTO_CONF, OPT_CLOCK_RATE, OPT_SND_CLOCK_RATE, OPT_STEREO,
 	   OPT_USE_ICE, OPT_ICE_REGULAR, OPT_USE_SRTP, OPT_SRTP_SECURE,
 	   OPT_USE_TURN, OPT_ICE_MAX_HOSTS, OPT_ICE_NO_RTCP, OPT_TURN_SRV, 
+	   OPT_ZRTP_GLOBAL_ID, OPT_ZRTP_CLIENT_ID, OPT_ZRTP_CACHE_PATH,
+	   OPT_ZRTP_USE, OPT_ZRTP_ID, OPT_ZRTP_FLAGS, OPT_ZRTP_CACHE_TTL,
+	   OPT_ZRTP_MASQ,
 	   OPT_TURN_TCP, OPT_TURN_USER, OPT_TURN_PASSWD,
 	   OPT_PLAY_FILE, OPT_PLAY_TONE, OPT_RTP_PORT, OPT_ADD_CODEC, 
 	   OPT_ILBC_MODE, OPT_REC_FILE, OPT_AUTO_REC,
@@ -613,6 +656,18 @@
 	{ "use-srtp",   1, 0, OPT_USE_SRTP},
 	{ "srtp-secure",1, 0, OPT_SRTP_SECURE},
 #endif
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+	{ "zrtp-global-id",1,0,OPT_ZRTP_GLOBAL_ID},
+	{ "zrtp-clientid",1,0, OPT_ZRTP_CLIENT_ID},
+	{ "zrtp-cache",	1, 0, OPT_ZRTP_CACHE_PATH},
+	{ "zrtp-use",	1, 0, OPT_ZRTP_USE},
+	{ "zrtp-id",    1, 0, OPT_ZRTP_ID},
+	{ "zrtp-flags",	1, 0, OPT_ZRTP_FLAGS},
+	{ "zrtp-cachettl",1,0, OPT_ZRTP_CACHE_TTL},
+#if defined(PJMEDIA_ZRTP_MASQUERADE) && (PJMEDIA_ZRTP_MASQUERADE != 0)
+	{ "zrtp-masquerade",1,0, OPT_ZRTP_MASQ},
+#endif
+#endif
 	{ "add-codec",  1, 0, OPT_ADD_CODEC},
 	{ "dis-codec",  1, 0, OPT_DIS_CODEC},
 	{ "complexity",	1, 0, OPT_COMPLEXITY},
@@ -1165,6 +1220,128 @@
 	    break;
 #endif
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+	case OPT_ZRTP_CLIENT_ID:
+	    app_config.cfg.zrtp_setting.client_id.slen = strlen(pj_optarg);
+	    app_config.cfg.zrtp_setting.client_id.ptr = pj_optarg;
+	    break;
+	case OPT_ZRTP_CACHE_PATH:
+	    app_config.cfg.zrtp_setting.cache_path.slen = strlen(pj_optarg);
+	    app_config.cfg.zrtp_setting.cache_path.ptr = pj_optarg;
+	    break;
+	case OPT_ZRTP_USE:
+	    app_config.cfg.zrtp_media_setting.use = my_atoi(pj_optarg);
+	    if (!pj_isdigit(*pj_optarg) ||
+		app_config.cfg.zrtp_media_setting.use < PJMEDIA_ZRTP_DISABLED ||
+		app_config.cfg.zrtp_media_setting.use > PJMEDIA_ZRTP_MANDATORY) {
+		PJ_LOG(1,(THIS_FILE, "Invalid value for --zrtp-use option"));
+		return -1;
+	    }
+	    cur_acc->zrtp_media_setting.use = app_config.cfg.zrtp_media_setting.use;
+	    break;
+	case OPT_ZRTP_GLOBAL_ID:
+	case OPT_ZRTP_ID:
+	    {
+		pjmedia_zid_t zid;
+		if (pj_ansi_strcmp(pj_optarg, "*") == 0) {
+		    PJ_ASSERT_RETURN (pjmedia_zrtp_randzid(&zid) == PJ_SUCCESS, -1);
+		} else if (strlen(pj_optarg) != 2 * sizeof(zid)) {
+		    PJ_LOG(1,(THIS_FILE, "Invalid length for --%s option", long_options[option_index].name));
+		    return -1;
+		} else {
+		    int i;
+		    for (i = 0; i < sizeof(zid) * 2; i += 2) {
+			char n1;
+			char n2;
+			if (!pj_isxdigit(pj_optarg[i]) || !pj_isxdigit(pj_optarg[i])) {
+			    PJ_LOG(1,(THIS_FILE, "Invalid character for --%s option", long_options[option_index].name));
+			    return -1;
+			}
+			n1 = pj_hex_digit_to_val(pj_optarg[i]);
+			n2 = pj_hex_digit_to_val(pj_optarg[i + 1]);
+			zid.data[i / 2] = n1 * 16 + n2;
+		    }
+		}
+		if (c == OPT_ZRTP_GLOBAL_ID) {
+		    app_config.cfg.zrtp_media_setting.valid_zid = PJ_TRUE;
+		    pj_memcpy (&app_config.cfg.zrtp_media_setting.zid, &zid, sizeof(app_config.cfg.zrtp_media_setting.zid));
+		} else if (c == OPT_ZRTP_ID) {
+		    pj_memcpy (&cur_acc->zrtp_media_setting.zid, &zid, sizeof(cur_acc->zrtp_media_setting.zid));
+		    cur_acc->zrtp_media_setting.valid_zid = PJ_TRUE;
+		} else {
+		    PJ_ASSERT_RETURN (0, -1);
+		}
+	    }
+	    break;
+	case OPT_ZRTP_FLAGS:
+	    {
+		const char * p;
+		for (p = pj_optarg; *p; ++ p) {
+		    switch (*p) {
+		    case 's':
+		    case 'S':
+			app_config.cfg.zrtp_media_setting.profile.auto_secure =
+			    cur_acc->zrtp_media_setting.profile.auto_secure = !!pj_isupper(*p);
+			break;
+		    case 'o':
+		    case 'O':
+			app_config.cfg.zrtp_media_setting.profile.fast_discovery =
+			    cur_acc->zrtp_media_setting.profile.fast_discovery = !!pj_isupper(*p);
+			break;
+		    case 'c':
+		    case 'C':
+			app_config.cfg.zrtp_media_setting.profile.allow_clear =
+			    cur_acc->zrtp_media_setting.profile.allow_clear = !!pj_isupper(*p);
+			break;
+		    case 'd':
+		    case 'D':
+			app_config.cfg.zrtp_media_setting.profile.disclosure =
+			    cur_acc->zrtp_media_setting.profile.disclosure = !!pj_isupper(*p);
+			break;
+		    default:
+			PJ_LOG(1,(THIS_FILE, "Invalid value for --zrtp-flags option: unknown flag '%c'", *p));
+			return -1;
+		    }
+		}
+	    }
+	    break;
+	case OPT_ZRTP_CACHE_TTL:
+	    app_config.cfg.zrtp_media_setting.profile.cache_ttl = my_atoi(pj_optarg);
+	    if (!pj_isdigit(*pj_optarg)) {
+		PJ_LOG(1,(THIS_FILE, "Invalid value for --zrtp-cachettl option"));
+		return -1;
+	    }
+	    cur_acc->zrtp_media_setting.profile.cache_ttl = app_config.cfg.zrtp_media_setting.profile.cache_ttl;
+	    break;
+#if defined(PJMEDIA_ZRTP_MASQUERADE) && (PJMEDIA_ZRTP_MASQUERADE != 0)
+	case OPT_ZRTP_MASQ:	    
+	    if (!pj_isdigit(*pj_optarg)) {
+		PJ_LOG(1,(THIS_FILE, "Invalid value for --zrtp-masquerade option"));
+		return -1;
+	    }
+	    switch (my_atoi(pj_optarg)) {
+	    case 0:
+		app_config.cfg.zrtp_media_setting.masquerade = PJ_FALSE;
+		app_config.cfg.zrtp_media_setting.masquerade_only = PJ_FALSE;		
+		break;
+	    case 1:
+		app_config.cfg.zrtp_media_setting.masquerade = PJ_TRUE;
+		app_config.cfg.zrtp_media_setting.masquerade_only = PJ_FALSE;
+		break;
+	    case 2:
+		app_config.cfg.zrtp_media_setting.masquerade = PJ_TRUE;
+		app_config.cfg.zrtp_media_setting.masquerade_only = PJ_TRUE;
+		break;
+	    default:
+		PJ_LOG(1,(THIS_FILE, "Invalid value for --zrtp-masquerade option"));
+		return -1;
+	    }
+	    cur_acc->zrtp_media_setting.masquerade = app_config.cfg.zrtp_media_setting.masquerade;
+	    cur_acc->zrtp_media_setting.masquerade_only = app_config.cfg.zrtp_media_setting.masquerade_only;
+	    break;
+#endif
+#endif
+
 	case OPT_RTP_PORT:
 	    cfg->rtp_cfg.port = my_atoi(pj_optarg);
 	    if (cfg->rtp_cfg.port == 0) {
@@ -1576,6 +1753,51 @@
     }
 #endif
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+    pj_ansi_sprintf(line, "--zrtp-use=%d\n", acc_cfg->zrtp_media_setting.use);
+	pj_strcat2(result, line);
+
+    if (acc_cfg->zrtp_media_setting.valid_zid) {
+	pj_ansi_sprintf(line,
+			"--zrtp-id=%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\n",
+			acc_cfg->zrtp_media_setting.zid.data[0],
+			acc_cfg->zrtp_media_setting.zid.data[1],
+			acc_cfg->zrtp_media_setting.zid.data[2],
+			acc_cfg->zrtp_media_setting.zid.data[3],
+			acc_cfg->zrtp_media_setting.zid.data[4],
+			acc_cfg->zrtp_media_setting.zid.data[5],
+			acc_cfg->zrtp_media_setting.zid.data[6],
+			acc_cfg->zrtp_media_setting.zid.data[7],
+			acc_cfg->zrtp_media_setting.zid.data[8],
+			acc_cfg->zrtp_media_setting.zid.data[9],
+			acc_cfg->zrtp_media_setting.zid.data[10],
+			acc_cfg->zrtp_media_setting.zid.data[11]);
+	pj_strcat2(result, line);
+    }
+
+    pj_ansi_sprintf(line,
+		    "--zrtp-flags=%c%c%c%c\n",
+		    acc_cfg->zrtp_media_setting.profile.auto_secure ? 'S' : 's',
+		    acc_cfg->zrtp_media_setting.profile.fast_discovery ? 'O' : 'o',
+		    acc_cfg->zrtp_media_setting.profile.allow_clear ? 'C' : 'c',
+		    acc_cfg->zrtp_media_setting.profile.disclosure ? 'D' : 'd');
+    pj_strcat2(result, line);
+
+    pj_ansi_sprintf(line, "--zrtp-cachettl=%u\n", acc_cfg->zrtp_media_setting.profile.cache_ttl);
+    pj_strcat2(result, line);
+
+#if defined(PJMEDIA_ZRTP_MASQUERADE) && (PJMEDIA_ZRTP_MASQUERADE != 0)
+    if (acc_cfg->zrtp_media_setting.masquerade) {
+	if (acc_cfg->zrtp_media_setting.masquerade_only)
+	    pj_ansi_sprintf(line, "--zrtp-masquerade=%u\n", 2);
+	else
+	    pj_ansi_sprintf(line, "--zrtp-masquerade=%u\n", 1);
+    } else
+	pj_ansi_sprintf(line, "--zrtp-masquerade=%u\n", 0);
+    pj_strcat2(result, line);
+#endif
+#endif
+
     /* Proxy */
     for (i=0; i<acc_cfg->proxy_cnt; ++i) {
 	pj_ansi_sprintf(line, "--proxy %.*s\n",
@@ -1840,6 +2062,63 @@
     }
 #endif
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+    pj_ansi_sprintf(line,
+		    "--zrtp-clientid=%.*s\n",
+		    config->cfg.zrtp_setting.client_id.slen,
+		    config->cfg.zrtp_setting.client_id.ptr);
+    pj_strcat2(&cfg, line);
+
+    pj_ansi_sprintf(line,
+		    "--zrtp-cache=%.*s\n",
+		    config->cfg.zrtp_setting.cache_path.slen,
+		    config->cfg.zrtp_setting.cache_path.ptr);
+    pj_strcat2(&cfg, line);
+
+    pj_ansi_sprintf(line, "--zrtp-use=%d\n", config->cfg.zrtp_media_setting.use);
+    pj_strcat2(&cfg, line);
+
+    if (config->cfg.zrtp_media_setting.valid_zid) {
+	pj_ansi_sprintf(line,
+			"--zrtp-global-id=%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\n",
+			config->cfg.zrtp_media_setting.zid.data[0],
+			config->cfg.zrtp_media_setting.zid.data[1],
+			config->cfg.zrtp_media_setting.zid.data[2],
+			config->cfg.zrtp_media_setting.zid.data[3],
+			config->cfg.zrtp_media_setting.zid.data[4],
+			config->cfg.zrtp_media_setting.zid.data[5],
+			config->cfg.zrtp_media_setting.zid.data[6],
+			config->cfg.zrtp_media_setting.zid.data[7],
+			config->cfg.zrtp_media_setting.zid.data[8],
+			config->cfg.zrtp_media_setting.zid.data[9],
+			config->cfg.zrtp_media_setting.zid.data[10],
+			config->cfg.zrtp_media_setting.zid.data[11]);
+	pj_strcat2(&cfg, line);
+    }
+
+    pj_ansi_sprintf(line,
+		    "--zrtp-flags=%c%c%c%c\n",
+		    config->cfg.zrtp_media_setting.profile.auto_secure ? 'S' : 's',
+		    config->cfg.zrtp_media_setting.profile.fast_discovery ? 'O' : 'o',
+		    config->cfg.zrtp_media_setting.profile.allow_clear ? 'C' : 'c',
+		    config->cfg.zrtp_media_setting.profile.disclosure? 'D' : 'd');
+    pj_strcat2(&cfg, line);
+
+    pj_ansi_sprintf(line, "--zrtp-cachettl=%u\n", config->cfg.zrtp_media_setting.profile.cache_ttl);
+    pj_strcat2(&cfg, line);
+
+#if defined(PJMEDIA_ZRTP_MASQUERADE) && (PJMEDIA_ZRTP_MASQUERADE != 0)
+    if (config->cfg.zrtp_media_setting.masquerade) {
+	if (config->cfg.zrtp_media_setting.masquerade_only)
+	    pj_ansi_sprintf(line, "--zrtp-masquerade=%u\n", 2);
+	else
+	    pj_ansi_sprintf(line, "--zrtp-masquerade=%u\n", 1);
+    } else
+	pj_ansi_sprintf(line, "--zrtp-masquerade=%u\n", 0);
+    pj_strcat2(&cfg, line);
+#endif
+#endif
+
     /* Media Transport*/
     if (config->media_cfg.enable_ice)
 	pj_strcat2(&cfg, "--use-ice\n");
@@ -1932,6 +2211,37 @@
 	pj_strcat2(&cfg, line);
     }
 
+#if defined(PJSUA_HAS_CODEC_REMAPPING) && PJSUA_HAS_CODEC_REMAPPING
+    for (i = 0; i < config->media_cfg.remap_codec_cnt; ++ i) {
+	char from_pt[11];
+	char to_pt[11];
+
+	if (config->media_cfg.remap_codec[i].from.pt >= PJMEDIA_RTP_PT_DYNAMIC)
+	    from_pt[0] = 0;
+	else
+	    pj_utoa (config->media_cfg.remap_codec[i].from.pt, from_pt);
+
+	if (config->media_cfg.remap_codec[i].to.pt >= PJMEDIA_RTP_PT_DYNAMIC)
+	    to_pt[0] = 0;
+	else
+	    pj_utoa (config->media_cfg.remap_codec[i].to.pt, to_pt);
+
+	pj_ansi_sprintf(line, "--remap-fmt %s/%.*s/%u/%u%s%s/%.*s/%u/%u\n",
+			from_pt,
+			config->media_cfg.remap_codec[i].from.encoding_name.slen,
+			config->media_cfg.remap_codec[i].from.encoding_name.ptr,
+			config->media_cfg.remap_codec[i].from.clock_rate,
+			config->media_cfg.remap_codec[i].from.channel_cnt,
+			config->media_cfg.remap_codec[i].keep_original ? "+=" : "=",
+			to_pt,
+			config->media_cfg.remap_codec[i].to.encoding_name.slen,
+			config->media_cfg.remap_codec[i].to.encoding_name.ptr,
+			config->media_cfg.remap_codec[i].to.clock_rate,
+			config->media_cfg.remap_codec[i].to.channel_cnt);
+	pj_strcat2(&cfg, line);
+    }
+#endif
+
     /* Sound device latency */
     if (config->capture_lat != PJMEDIA_SND_DEFAULT_REC_LATENCY) {
 	pj_ansi_sprintf(line, "--capture-lat %d\n", config->capture_lat);
@@ -2741,6 +3051,152 @@
     return app_config.redir_op;
 }
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+
+static pj_status_t zrtp_sas_notification(pjsua_call_id call_id, pj_bool_t force_verify)
+{
+    pjsua_zrtp_sas sas1, sas2;
+    pj_bool_t is_verified;
+    pj_status_t status;
+
+    status = pjsua_call_zrtp_get_sas (call_id, &sas1, &sas2, &is_verified);
+    pj_assert (status == PJ_SUCCESS);
+
+    if (status == PJ_SUCCESS) {
+	if (is_verified && !force_verify) {
+	    PJ_LOG(1,(THIS_FILE,
+		      "Call %d: ZRTP SAS is \"%s %s\" (verified)",
+		      call_id,
+		      sas1.buffer,
+		      sas2.buffer));
+	} else {
+	    PJ_LOG(1,(THIS_FILE,
+		      "Call %d: ZRTP SAS is \"%s %s\", please verify",
+		      call_id,
+		      sas1.buffer,
+		      sas2.buffer));
+
+	    if (current_call != call_id) {
+		PJ_LOG(1,(THIS_FILE,
+			  "Switch to call %d using '%s' and enter 'ZV' to verify the SAS or 'Zv' to reject it",
+			  call_id,
+			  call_id < current_call ? "]" : "["));
+	    } else {
+		PJ_LOG(1,(THIS_FILE, "Enter 'ZV' to verify the SAS or 'Zv' to reject it"));
+	    }
+	}
+    } else {
+	char errmsg[PJ_ERR_MSG_SIZE];
+	pj_strerror(status, errmsg, sizeof(errmsg));
+	PJ_LOG(1,(THIS_FILE,
+		  "Call %d: cannot retrieve ZRTP SAS: %s [status=%d]",
+		  call_id,
+		  errmsg,
+		  status));
+    }
+
+    return status;
+}
+
+static void on_zrtp_protocol_event(pjsua_call_id call_id, pjmedia_zrtp_event e)
+{
+    switch(e) {
+    case PJMEDIA_ZRTP_EVENT_STOP:
+	PJ_LOG(3,(THIS_FILE, "Call %d: PJMEDIA_ZRTP_EVENT_STOP", call_id));
+	break;
+    case PJMEDIA_ZRTP_EVENT_NO_ZRTP:
+	PJ_LOG(3,(THIS_FILE, "Call %d: PJMEDIA_ZRTP_EVENT_NO_ZRTP", call_id));
+	break;
+    case PJMEDIA_ZRTP_EVENT_CLEAR:
+	PJ_LOG(3,(THIS_FILE, "Call %d: PJMEDIA_ZRTP_EVENT_CLEAR", call_id));
+	break;
+    case PJMEDIA_ZRTP_EVENT_SECURE:
+	PJ_LOG(3,(THIS_FILE, "Call %d: PJMEDIA_ZRTP_EVENT_SECURE", call_id));
+	break;
+    case PJMEDIA_ZRTP_EVENT_DISCOVERY:
+	PJ_LOG(3,(THIS_FILE, "Call %d: PJMEDIA_ZRTP_EVENT_DISCOVERY", call_id));
+	break;
+    case PJMEDIA_ZRTP_EVENT_KEY_AGREEMENT:
+	PJ_LOG(3,(THIS_FILE, "Call %d: PJMEDIA_ZRTP_EVENT_KEY_AGREEMENT", call_id));
+	break;
+    case PJMEDIA_ZRTP_EVENT_CONFIRMING:
+	PJ_LOG(3,(THIS_FILE, "Call %d: PJMEDIA_ZRTP_EVENT_CONFIRMING", call_id));
+	break;
+    case PJMEDIA_ZRTP_EVENT_LOCAL_ERROR:
+	PJ_LOG(3,(THIS_FILE, "Call %d: PJMEDIA_ZRTP_EVENT_LOCAL_ERROR", call_id));
+	break;
+    default:
+	PJ_LOG(3,(THIS_FILE, "Call %d: unknown ZRTP event %d", call_id, e));
+	break;
+    }
+}
+
+static void on_zrtp_security_event(pjsua_call_id call_id, pjmedia_zrtp_security_event e)
+{
+    switch(e) {
+    case PJMEDIA_ZRTP_EVENT_ERROR:
+	PJ_LOG(3,(THIS_FILE, "Call %d: PJMEDIA_ZRTP_EVENT_ERROR", call_id));
+	PJ_LOG(1,(THIS_FILE, "ZRTP protocol error on call %d", call_id));
+	{
+	    pj_str_t reason;
+	    reason.ptr = "ZRTP protocol error";
+	    reason.slen = pj_ansi_strlen(reason.ptr);
+	    pjsua_call_hangup(call_id, 0, &reason, NULL);
+	}
+	break;
+    case PJMEDIA_ZRTP_EVENT_BAD_HELLO_HASH:
+	PJ_LOG(3,(THIS_FILE, "Call %d: PJMEDIA_ZRTP_EVENT_BAD_HELLO_HASH", call_id));
+	PJ_LOG(1,(THIS_FILE, "ZRTP detected a DoS attack on call %d", call_id));
+	break;
+    case PJMEDIA_ZRTP_EVENT_BAD_MESSAGE_MAC:
+	PJ_LOG(3,(THIS_FILE, "Call %d: PJMEDIA_ZRTP_EVENT_BAD_MESSAGE_MAC", call_id));
+	PJ_LOG(1,(THIS_FILE, "ZRTP detected a security issue on call %d", call_id));
+	break;
+    case PJMEDIA_ZRTP_EVENT_CACHE_MISMATCH:
+	PJ_LOG(3,(THIS_FILE, "Call %d: PJMEDIA_ZRTP_EVENT_CACHE_MISMATCH", call_id));
+	PJ_LOG(1,(THIS_FILE, "ZRTP detected a MiTM attack on call %d, please verify the SAS", call_id));
+	zrtp_sas_notification(call_id, PJ_TRUE);
+	break;
+    default:
+	PJ_LOG(3,(THIS_FILE, "Call %d: unknown ZRTP security event %d", call_id, e));
+	break;
+    }
+}
+
+static void on_zrtp_secure(pjsua_call_id call_id)
+{
+    PJ_LOG(3,(THIS_FILE, "Call %d entered zrtp secure mode", call_id));
+    zrtp_sas_notification(call_id, PJ_FALSE);
+}
+
+static void on_zrtp_not_secure(pjsua_call_id call_id)
+{
+    PJ_LOG(3,(THIS_FILE, "Call %d left zrtp secure mode", call_id));
+}
+
+#if defined(PJMEDIA_ZRTP_MASQUERADE) && (PJMEDIA_ZRTP_MASQUERADE != 0)
+static void on_zrtp_masq_mode_change(pjsua_call_id call_id,
+				     pjmedia_zrtp_masquerade_mode old_mode,
+				     pjmedia_zrtp_masquerade_mode new_mode)
+{
+    PJ_UNUSED_ARG (old_mode);
+
+    switch (new_mode) {
+    case PJMEDIA_ZRTP_MASQ_NONE:
+	PJ_LOG(3,(THIS_FILE, "Call %d is now using standard ZRTP mode", call_id));
+	break;
+    case PJMEDIA_ZRTP_MASQ_COMPAT:
+	PJ_LOG(3,(THIS_FILE, "Call %d is now using compatible masqueraded ZRTP mode", call_id));
+	break;
+    case PJMEDIA_ZRTP_MASQ_ONLY:
+	PJ_LOG(3,(THIS_FILE, "Call %d is now using masquerade-only ZRTP mode", call_id));
+	break;
+    }
+}
+#endif
+
+#endif
+
 /*
  * Handler registration status has changed.
  */
@@ -3188,6 +3644,14 @@
     puts("|                              |  V  Adjust audio Volume  |  f  Save config   |");
     puts("|  S  Send arbitrary REQUEST   | Cp  Codec priorities     |  f  Save config   |");
     puts("+------------------------------+--------------------------+-------------------+");
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+    puts("|  z  Toggle ZRTP secure/clear mode     ZV Set ZRTP SAS Verified flag         |");
+    puts("|  Z  Set ZRTP secure/clear mode        Zv Unset ZRTP SAS Verified flag       |");
+#endif
+#if defined(PJMEDIA_HAS_SRTP) && (PJMEDIA_HAS_SRTP != 0) && \
+	defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+    puts("|  mz Make ZRTP call                    ms Make SRTP call                     |");
+#endif
     puts("|  q  QUIT   L  ReLoad   sleep MS   echo [0|1|txt]     n: detect NAT type     |");
     puts("+=============================================================================+");
 
@@ -3196,12 +3660,33 @@
 
     if (current_call != PJSUA_INVALID_ID) {
 	pjsua_call_info ci;
-	if (pjsua_call_get_info(current_call, &ci)==PJ_SUCCESS)
+	if (pjsua_call_get_info(current_call, &ci)==PJ_SUCCESS) {
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+	    if (ci.secure_transport == PJMEDIA_TRANSPORT_TYPE_ZRTP) {
+	    pj_bool_t is_secure, is_verified;
+	    pjsua_zrtp_sas sas1, sas2;
+	    if (pjsua_call_zrtp_get_secure(current_call, &is_secure) == PJ_SUCCESS &&
+		pjsua_call_zrtp_get_sas(current_call, &sas1, &sas2, &is_verified) == PJ_SUCCESS)
+		printf("Current call id=%d to %.*s [%.*s] [ZRTP %s - SAS \"%s %s\"%s]\n", current_call,
+		       (int)ci.remote_info.slen, ci.remote_info.ptr,
+		       (int)ci.state_text.slen, ci.state_text.ptr,
+		       is_secure ? "SECURE" : "CLEAR",
+		       sas1.buffer, sas2.buffer, is_verified ? " (V)" : "");
+	    } else
+#endif
+#if defined(PJMEDIA_HAS_SRTP) && (PJMEDIA_HAS_SRTP != 0)
+	    if (ci.secure_transport == PJMEDIA_TRANSPORT_TYPE_SRTP) {
+		printf("Current call id=%d to %.*s [%.*s] [SRTP]\n", current_call,
+			(int)ci.remote_info.slen, ci.remote_info.ptr,
+			(int)ci.state_text.slen, ci.state_text.ptr);
+	    } else
+#endif
 	    printf("Current call id=%d to %.*s [%.*s]\n", current_call,
 		   (int)ci.remote_info.slen, ci.remote_info.ptr,
 		   (int)ci.state_text.slen, ci.state_text.ptr);
     }
 }
+}
 
 
 /*
@@ -3598,7 +4083,12 @@
 	    
 	    pjsua_msg_data_init(&msg_data);
 	    TEST_MULTIPART(&msg_data);
-	    pjsua_call_make_call( current_acc, &tmp, 0, NULL, &msg_data, NULL);
+
+	    if (menuin[1] == 's' || menuin[1] == 'z')
+		pjsua_call_make_secure_call( current_acc, &tmp, 0, menuin[1] == 's' ? PJMEDIA_TRANSPORT_TYPE_SRTP : PJMEDIA_TRANSPORT_TYPE_ZRTP, NULL, &msg_data, NULL);
+	    else
+		pjsua_call_make_call( current_acc, &tmp, 0, NULL, &msg_data, NULL);
+
 	    break;
 
 	case 'M':
@@ -3791,7 +4281,59 @@
 		pjsua_call_hangup(current_call, 0, NULL, NULL);
 	    }
 	    break;
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+	case 'z':
+	    if (current_call != -1) {
+		pj_status_t status;
+		pj_bool_t is_secure;
 
+		status = pjsua_call_zrtp_get_secure(current_call, &is_secure);
+		if (status != PJ_SUCCESS) {
+		    pjsua_perror (THIS_FILE, "Cannot get current ZRTP state", status);
+		    break;
+		}
+
+		status = pjsua_call_zrtp_set_secure(current_call, !is_secure);
+		if (status != PJ_SUCCESS) {
+		    pjsua_perror (THIS_FILE, "Cannot set ZRTP state", status);
+		    break;
+		}
+	    } else {
+		PJ_LOG(3,(THIS_FILE, "No current call"));
+	    }
+	    break;
+
+	case 'Z':
+	    if (current_call != -1) {
+		pj_status_t status;
+
+		if (menuin[1] == 'V' || menuin[1] == 'v') {
+		    PJ_LOG(3,(THIS_FILE, "Call %d: setting ZRTP SAS as %s", current_call, menuin[1] == 'V' ? "verified" : "not verified"));
+		    status = pjsua_call_zrtp_set_sas_verified (current_call, menuin[1] == 'V' ? PJ_TRUE : PJ_FALSE);
+
+		    if (status != PJ_SUCCESS)
+			pjsua_perror (THIS_FILE, "Cannot set SAS Verified flag", status);
+		} else {
+		    if (!simple_input("Switch zrtp state (s=secure/c=clear; empty to cancel)", buf, sizeof(buf)))
+			break;
+
+		    if (buf[0] == 's' || buf[0] == 'S') {
+			PJ_LOG(3,(THIS_FILE, "Call %d: switching to ZRTP SECURE state", current_call));
+			status = pjsua_call_zrtp_set_secure(current_call, PJ_TRUE);
+		    } else if (buf[0] == 'c' || buf[0] == 'C') {
+			PJ_LOG(3,(THIS_FILE, "Call %d: switching to ZRTP CLEAR state", current_call));
+			status = pjsua_call_zrtp_set_secure(current_call, PJ_FALSE);
+		    } else
+			break;
+
+		    if (status != PJ_SUCCESS)
+			pjsua_perror (THIS_FILE, "Cannot switch ZRTP state", status);
+		}
+	    } else {
+		PJ_LOG(3,(THIS_FILE, "No current call"));
+	    }
+	    break;
+#endif
 	case ']':
 	case '[':
 	    /*
@@ -4656,6 +5198,11 @@
     if (status != PJ_SUCCESS)
 	return status;
 
+#if defined(PJMEDIA_HAS_ZRTP) && (PJMEDIA_HAS_ZRTP != 0)
+    /* If no --zrtp-global-id was specified, pretend the randomly-generated ZID was specified */
+    app_config.cfg.zrtp_media_setting.valid_zid = pjmedia_zrtp_get_default_zid(&app_config.cfg.zrtp_media_setting.zid);
+#endif
+
     /* Initialize our module to handle otherwise unhandled request */
     status = pjsip_endpt_register_module(pjsua_get_pjsip_endpt(),
 					 &mod_default_handler);
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/build/srtp/Makefile zorg/third_party/build/srtp/Makefile
--- original/third_party/build/srtp/Makefile	2008-07-29 13:42:20.742138000 +0200
+++ zorg/third_party/build/srtp/Makefile	2010-11-26 16:21:58.352995000 +0100
@@ -42,7 +42,7 @@
 kernel  = crypto/kernel/crypto_kernel.o  crypto/kernel/alloc.o   \
           crypto/kernel/key.o $(rng) $(err) # $(ust) 
 
-srtpobj = srtp/srtp.o 
+srtpobj = srtp/srtp.o srtp/ekt.o
 
 cryptobj =  $(ciphers) $(hashes) $(math) $(stat) $(kernel) $(replay)
 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/build/srtp/libsrtp.vcproj zorg/third_party/build/srtp/libsrtp.vcproj
--- original/third_party/build/srtp/libsrtp.vcproj	2009-07-31 11:55:13.217422000 +0200
+++ zorg/third_party/build/srtp/libsrtp.vcproj	2010-11-26 16:21:58.352995000 +0100
@@ -2761,6 +2761,10 @@
 			UniqueIdentifier="{4FC737F1-C7A5-4376-A066-2A32D752A2FF}"
 			>
 			<File
+				RelativePath="..\..\srtp\srtp\ekt.c"
+				>
+			</File>
+			<File
 				RelativePath="..\..\srtp\srtp\srtp.c"
 				>
 			</File>
@@ -2775,6 +2779,10 @@
 			UniqueIdentifier="{93995380-89BD-4b04-88EB-625FBE52EBFB}"
 			>
 			<File
+				RelativePath="..\..\srtp\include\ekt.h"
+				>
+			</File>
+			<File
 				RelativePath="..\..\srtp\include\rtp.h"
 				>
 			</File>
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/build/zorg/glue.cpp zorg/third_party/build/zorg/glue.cpp
--- original/third_party/build/zorg/glue.cpp	1970-01-01 01:00:00.000000000 +0100
+++ zorg/third_party/build/zorg/glue.cpp	2010-11-30 14:10:25.725926000 +0100
@@ -0,0 +1,333 @@
+/*
+ * zrtp.org is a ZRTP protocol implementation  
+ * Copyright (C) 2010 - PrivateWave Italia S.p.A.
+ *  
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *  
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *  
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *  
+ * For more information, please contact PrivateWave Italia S.p.A. at
+ * address zorg@privatewave.com or http://www.privatewave.com
+ */
+
+#include <memory>
+#include <deque>
+#include <queue>
+#include <functional>
+#include <algorithm>
+
+#include <zorg/zorg.h>
+#include <zorg/crypto.h>
+#include <zorg/zrtp.h>
+#include <zorg/glue.h>
+#include <zorg/snprintf.h>
+
+// FIXME: this sucks
+namespace ZORG
+{
+namespace Crypto
+{
+
+namespace Libsrtp
+{
+    CipherFunction * CreateAES1(Error& e);
+    CipherFunction * CreateAES3(Error& e);
+}
+
+namespace Impl
+{
+    HashFunction * CreateS256(Error& e);
+    HashFunction * CreateS384(Error& e);
+    SASFunction * CreateB32(Error& e);
+    SASFunction * CreateB256(Error& e);
+    RNGFunction * CreateRNGFunction(Error& e);
+    KeyExchangeFunction * CreateDH2k(Error& e, RNG * rng);
+    KeyExchangeFunction * CreateDH3k(Error& e, RNG * rng);
+    KeyExchangeFunction * CreateEC25(Error& e, RNG * rng);
+    KeyExchangeFunction * CreateEC38(Error& e, RNG * rng);
+}
+
+}
+}
+
+// FIXME: this sucks too
+namespace ZORG
+{
+namespace SRTP
+{
+namespace Libsrtp
+{
+void Init(Error& e);
+void Deinit();
+SRTPInstance * Create(Error& e);
+}
+}
+}
+
+
+namespace ZORG
+{
+namespace ZRTP
+{
+
+namespace Impl { Cache * CreateCache(::ZORG::Error& e, const char * file, CryptoSuite * cryptoSuite); }
+
+}
+}
+
+using namespace ::ZORG;
+using namespace ::ZORG::Crypto;
+using namespace ::ZORG::ZRTP;
+
+namespace
+{
+class libzorg_CryptoSuite: public CryptoSuite
+{
+private:
+    std::auto_ptr<Crypto::RNGFunction> m_rngFunction;
+    static const HashAlgorithmMask s_hashAlgorithms;
+    static const CipherAlgorithmMask s_cipherAlgorithms;
+    static const KeyAgreementTypeMask s_keyAgreementTypes;
+
+    class InvokeSelfTest
+    {
+    private:
+	libzorg_CryptoSuite * const suite;
+	::ZORG::Error& e;
+
+    public:
+	InvokeSelfTest(libzorg_CryptoSuite * suite, ::ZORG::Error& e): suite(suite), e(e) {}
+
+	void operator()(HashAlgorithm hashAlgorithm) const
+	{
+	    if(ZORG_FAILURE(e))
+		return;
+
+	    std::auto_ptr<Crypto::HashFunction> func(suite->createHashFunction(e, hashAlgorithm));
+
+	    if(func.get())
+		func->selfTest(e);
+	}
+
+	void operator()(CipherAlgorithm cipherAlgorithm) const
+	{
+	    if(ZORG_FAILURE(e))
+		return;
+
+	    std::auto_ptr<Crypto::CipherFunction> func(suite->createCipherFunction(e, cipherAlgorithm));
+
+	    if(func.get())
+		func->selfTest(e);
+	}
+
+	void operator()(KeyAgreementType keyAgreementType) const
+	{
+	    if(ZORG_FAILURE(e))
+		return;
+
+	    std::auto_ptr<Crypto::RNG> rng(suite->createRNG(e));
+
+	    if(rng.get())
+	    {
+		std::auto_ptr<Crypto::KeyExchangeFunction> func(suite->createKeyAgreementFunction(e, keyAgreementType, rng.get()));
+
+		if(func.get())
+		    func->selfTest(e);
+	    }
+	}
+    };
+
+    static void * createRNG2(Zorg_Error * e, void * context, const Zorg_Blob * seed)
+    {
+	if(ZORG_FAILURE(*e))
+	    return NULL;
+
+	return static_cast<libzorg_CryptoSuite *>(context)->m_rngFunction->Create(*e, *seed);
+    }
+
+public:
+    libzorg_CryptoSuite(::ZORG::Error& e): m_rngFunction(Crypto::Impl::CreateRNGFunction(e))
+    {
+	if(ZORG_FAILURE(e))
+	    return;
+    }
+
+    virtual void selfTest(::ZORG::Error& e)
+    {
+	if(ZORG_FAILURE(e))
+	    return;
+
+	std::for_each(s_hashAlgorithms.begin(), s_hashAlgorithms.end(), InvokeSelfTest(this, e));
+	std::for_each(s_cipherAlgorithms.begin(), s_cipherAlgorithms.end(), InvokeSelfTest(this, e));
+	std::for_each(s_keyAgreementTypes.begin(), s_keyAgreementTypes.end(), InvokeSelfTest(this, e));
+    }
+
+    virtual RNG * createRNG(::ZORG::Error& e)
+    {
+	if(ZORG_FAILURE(e))
+	    return NULL;
+
+	return static_cast<RNG *>(Zorg_Impl_RandomSeed(&e, &createRNG2, this));
+    }
+
+    virtual Crypto::HashFunction * createHashFunction(::ZORG::Error& e, HashAlgorithm hashAlgorithm)
+    {
+	if(ZORG_FAILURE(e))
+	    return NULL;
+
+	switch(hashAlgorithm)
+	{
+	case HashS256:
+	    return Crypto::Impl::CreateS256(e);
+
+	case HashS384:
+	    return Crypto::Impl::CreateS384(e);
+
+	default:
+	    ZORG_SET_ERROR(e, ErrorInternal/*TODO*/);
+	    return NULL;
+	}
+    }
+
+    virtual Crypto::CipherFunction * createCipherFunction(::ZORG::Error& e, CipherAlgorithm cipherAlgorithm)
+    {
+	if(ZORG_FAILURE(e))
+	    return NULL;
+
+	switch(cipherAlgorithm)
+	{
+	case CipherAES1:
+	    return Libsrtp::CreateAES1(e);
+
+	case CipherAES3:
+	    return Libsrtp::CreateAES3(e);
+
+	default:
+	    ZORG_SET_ERROR(e, ErrorInternal/*TODO*/);
+	    return NULL;
+	}
+    }
+
+    virtual Crypto::KeyExchangeFunction * createKeyAgreementFunction(::ZORG::Error& e, KeyAgreementType keyAgreementType, Crypto::RNG * rng)
+    {
+	if(ZORG_FAILURE(e))
+	    return NULL;
+
+	switch(keyAgreementType)
+	{
+	case KeyAgreementDH2k:
+	    return Crypto::Impl::CreateDH2k(e, rng);
+
+	case KeyAgreementDH3k:
+	    return Crypto::Impl::CreateDH3k(e, rng);
+
+	case KeyAgreementEC25:
+	    return Crypto::Impl::CreateEC25(e, rng);
+
+	case KeyAgreementEC38:
+	    return Crypto::Impl::CreateEC38(e, rng);
+
+	default:
+	    ZORG_SET_ERROR(e, ErrorInternal/*TODO*/);
+	    return NULL;
+	}
+    }
+
+    virtual Crypto::SASFunction * createSASFunction(::ZORG::Error& e, SASType sasType)
+    {
+	if(ZORG_FAILURE(e))
+	    return NULL;
+
+	switch(sasType)
+	{
+	case SASB32:
+	    return Crypto::Impl::CreateB32(e);
+
+	case SASB256:
+	    return Crypto::Impl::CreateB256(e);
+
+	default:
+	    ZORG_SET_ERROR(e, ErrorInternal/*TODO*/);
+	    return NULL;
+	}
+    }
+};
+
+const HashAlgorithmMask libzorg_CryptoSuite::s_hashAlgorithms = HashAlgorithmMask(HashS256) | HashS384;
+const CipherAlgorithmMask libzorg_CryptoSuite::s_cipherAlgorithms = CipherAlgorithmMask(CipherAES1) | CipherAES3;
+const KeyAgreementTypeMask libzorg_CryptoSuite::s_keyAgreementTypes = KeyAgreementTypeMask(KeyAgreementDH3k) | KeyAgreementEC25 | KeyAgreementEC38;
+}
+
+extern "C"
+{
+
+Zorg_CryptoSuite * Zorg_Impl_CryptoSuite_Create(Zorg_Error * e)
+{
+    return guard_new(*e, new(*e) libzorg_CryptoSuite(*e));
+}
+
+void Zorg_Impl_CryptoSuite_Destroy(Zorg_CryptoSuite * cryptoSuite)
+{
+    delete cryptoSuite;
+}
+
+Zorg_SRTP * Zorg_Impl_SRTP_Create(Zorg_Error * e)
+{
+    return SRTP::Libsrtp::Create(*e);
+}
+
+void Zorg_Impl_SRTP_Destroy(Zorg_SRTP * srtp)
+{
+    delete srtp;
+}
+
+Zorg_Cache * Zorg_Impl_Cache_Create(Zorg_Error * e, const char * file, Zorg_CryptoSuite * cryptoSuite)
+{
+    return ZRTP::Impl::CreateCache(*e, file, cryptoSuite);
+}
+
+void Zorg_Impl_Cache_Flush(Zorg_Cache * cache)
+{
+    cache->flush();
+}
+
+void Zorg_Impl_Cache_Destroy(Zorg_Cache * cache)
+{
+    delete cache;
+}
+
+}
+
+namespace ZORG
+{
+namespace Impl
+{
+extern "C"
+{
+
+int zorg_snprintf(char * str, size_t size, const char * format, ...)
+{
+    va_list ap;
+    va_start(ap, format);
+    int ret = zorg_vsnprintf(str, size, format, ap);
+    va_end(ap);
+    return ret;
+}
+
+// Provided by the application
+int zorg_vsnprintf(char * str, size_t size, const char * format, va_list ap);
+
+}
+}
+}
+
+// EOF
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/build/zorg/include/zorg/glue.h zorg/third_party/build/zorg/include/zorg/glue.h
--- original/third_party/build/zorg/include/zorg/glue.h	1970-01-01 01:00:00.000000000 +0100
+++ zorg/third_party/build/zorg/include/zorg/glue.h	2010-11-30 14:10:25.725926000 +0100
@@ -0,0 +1,52 @@
+/*
+ * zrtp.org is a ZRTP protocol implementation  
+ * Copyright (C) 2010 - PrivateWave Italia S.p.A.
+ *  
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *  
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *  
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *  
+ * For more information, please contact PrivateWave Italia S.p.A. at
+ * address zorg@privatewave.com or http://www.privatewave.com
+ */
+
+#ifndef ZORG_GLUE_H_
+#define ZORG_GLUE_H_
+
+#include <zorg/zorg.h>
+#include <zorg/zrtp.h>
+#include <zorg/srtp.h>
+
+#ifdef __cplusplus
+extern "C"
+{
+#endif
+
+Zorg_CryptoSuite * Zorg_Impl_CryptoSuite_Create(Zorg_Error * e);
+void Zorg_Impl_CryptoSuite_Destroy(Zorg_CryptoSuite * cryptoSuite);
+
+Zorg_SRTP * Zorg_Impl_SRTP_Create(Zorg_Error * e);
+void Zorg_Impl_SRTP_Destroy(Zorg_SRTP * srtp);
+
+Zorg_Cache * Zorg_Impl_Cache_Create(Zorg_Error * e, const char * file, Zorg_CryptoSuite * cryptoSuite);
+void Zorg_Impl_Cache_Flush(Zorg_Cache * cache);
+void Zorg_Impl_Cache_Destroy(Zorg_Cache * cache);
+
+extern void * Zorg_Impl_RandomSeed(Zorg_Error * e, void * (* callback)(Zorg_Error * e, void * context, const struct Zorg_Blob * seed), void * context);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
+
+// EOF
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/build/zorg/libtomcrypt.vcproj zorg/third_party/build/zorg/libtomcrypt.vcproj
--- original/third_party/build/zorg/libtomcrypt.vcproj	1970-01-01 01:00:00.000000000 +0100
+++ zorg/third_party/build/zorg/libtomcrypt.vcproj	2010-11-29 19:01:21.977396000 +0100
@@ -0,0 +1,9820 @@
+<?xml version="1.0" encoding="Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="8,00"
+	Name="libtomcrypt"
+	ProjectGUID="{5C45F819-C3C5-4130-A26E-958D52C0C33B}"
+	RootNamespace="libtomcrypt"
+	>
+	<Platforms>
+		<Platform
+			Name="Win32"
+		/>
+		<Platform
+			Name="Pocket PC 2003 (ARMV4)"
+		/>
+		<Platform
+			Name="Smartphone 2003 (ARMV4)"
+		/>
+		<Platform
+			Name="Windows Mobile 6 Standard SDK (ARMV4I)"
+		/>
+		<Platform
+			Name="Windows Mobile 6 Professional SDK (ARMV4I)"
+		/>
+		<Platform
+			Name="Windows Mobile 5.0 Pocket PC SDK (ARMV4I)"
+		/>
+		<Platform
+			Name="Windows Mobile 5.0 Smartphone SDK (ARMV4I)"
+		/>
+	</Platforms>
+	<ToolFiles>
+	</ToolFiles>
+	<Configurations>
+		<Configuration
+			Name="Release|Win32"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-win32-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="../../zorg/third_party/libtomcrypt/src/headers;../../zorg/third_party/libtommath"
+				PreprocessorDefinitions="_LIB;LTC_SOURCE"
+				PrecompiledHeaderFile=""
+				WarningLevel="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-$(PlatformName)-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Pocket PC 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm2003ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Smartphone 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm2003sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Win32"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-win32-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="../../zorg/third_party/libtomcrypt/src/headers;../../zorg/third_party/libtommath"
+				PreprocessorDefinitions="_LIB;LTC_SOURCE"
+				PrecompiledHeaderFile=""
+				WarningLevel="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-$(PlatformName)-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Pocket PC 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm2003ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Smartphone 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm2003sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Static|Win32"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-win32-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="../../zorg/third_party/libtomcrypt/src/headers;../../zorg/third_party/libtommath"
+				PreprocessorDefinitions="_LIB;LTC_SOURCE"
+				PrecompiledHeaderFile=""
+				WarningLevel="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-$(PlatformName)-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Static|Pocket PC 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm2003ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Static|Smartphone 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm2003sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Dynamic|Win32"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-win32-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="../../zorg/third_party/libtomcrypt/src/headers;../../zorg/third_party/libtommath"
+				PreprocessorDefinitions="_LIB;LTC_SOURCE"
+				PrecompiledHeaderFile=""
+				WarningLevel="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-$(PlatformName)-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Dynamic|Pocket PC 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm2003ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Dynamic|Smartphone 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm2003sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Static|Win32"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-win32-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="../../zorg/third_party/libtomcrypt/src/headers;../../zorg/third_party/libtommath"
+				PreprocessorDefinitions="_LIB;LTC_SOURCE"
+				PrecompiledHeaderFile=""
+				WarningLevel="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-$(PlatformName)-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Static|Pocket PC 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm2003ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Static|Smartphone 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm2003sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Dynamic|Win32"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-win32-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="../../zorg/third_party/libtomcrypt/src/headers;../../zorg/third_party/libtommath"
+				PreprocessorDefinitions="_LIB;LTC_SOURCE"
+				PrecompiledHeaderFile=""
+				WarningLevel="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-$(PlatformName)-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Dynamic|Pocket PC 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm2003ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Dynamic|Smartphone 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm2003sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Windows Mobile 6 Standard SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm6std-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Windows Mobile 6 Professional SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm6pro-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Windows Mobile 5.0 Pocket PC SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm5ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Windows Mobile 5.0 Smartphone SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm5sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Windows Mobile 6 Standard SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm6std-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Windows Mobile 6 Professional SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm6pro-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Windows Mobile 5.0 Pocket PC SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm5ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Windows Mobile 5.0 Smartphone SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm5sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Static|Windows Mobile 6 Standard SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm6std-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Static|Windows Mobile 6 Professional SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm6pro-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Static|Windows Mobile 5.0 Pocket PC SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm5ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Static|Windows Mobile 5.0 Smartphone SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm5sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Dynamic|Windows Mobile 6 Standard SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm6std-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Dynamic|Windows Mobile 6 Professional SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm6pro-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Dynamic|Windows Mobile 5.0 Pocket PC SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm5ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Dynamic|Windows Mobile 5.0 Smartphone SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm5sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Static|Windows Mobile 6 Standard SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm6std-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Static|Windows Mobile 6 Professional SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm6pro-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Static|Windows Mobile 5.0 Pocket PC SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm5ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Static|Windows Mobile 5.0 Smartphone SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm5sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Dynamic|Windows Mobile 6 Standard SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm6std-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Dynamic|Windows Mobile 6 Professional SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm6pro-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Dynamic|Windows Mobile 5.0 Pocket PC SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm5ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Dynamic|Windows Mobile 5.0 Smartphone SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtomcrypt\src/headers"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm5sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+	</Configurations>
+	<References>
+		<ProjectReference
+			ReferencedProjectIdentifier="{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}"
+			RelativePathToProject=".\third_party\build\zorg\libtommath.vcproj"
+		/>
+	</References>
+	<Files>
+		<Filter
+			Name="ciphers"
+			>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\ciphers\anubis.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\ciphers\blowfish.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\ciphers\cast5.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\ciphers\des.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\ciphers\kasumi.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\ciphers\khazad.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\ciphers\kseed.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\ciphers\multi2.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\ciphers\noekeon.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\ciphers\rc2.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\ciphers\rc5.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\ciphers\rc6.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\ciphers\skipjack.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\ciphers\xtea.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<Filter
+				Name="aes"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\ciphers\aes\aes.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\ciphers\aes\aes_tab.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						ExcludedFromBuild="true"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						ExcludedFromBuild="true"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="safer"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\ciphers\safer\safer.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\ciphers\safer\safer_tab.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						ExcludedFromBuild="true"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						ExcludedFromBuild="true"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\ciphers\safer\saferp.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="twofish"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\ciphers\twofish\twofish.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\ciphers\twofish\twofish_tab.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						ExcludedFromBuild="true"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						ExcludedFromBuild="true"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+		</Filter>
+		<Filter
+			Name="encauth"
+			>
+			<Filter
+				Name="ccm"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\ccm\ccm_memory.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\ccm\ccm_test.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="eax"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\eax\eax_addheader.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\eax\eax_decrypt.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\eax\eax_decrypt_verify_memory.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\eax\eax_done.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\eax\eax_encrypt.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\eax\eax_encrypt_authenticate_memory.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\eax\eax_init.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\eax\eax_test.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="gcm"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\gcm\gcm_add_aad.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\gcm\gcm_add_iv.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\gcm\gcm_done.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\gcm\gcm_gf_mult.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\gcm\gcm_init.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\gcm\gcm_memory.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\gcm\gcm_mult_h.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\gcm\gcm_process.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\gcm\gcm_reset.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\gcm\gcm_test.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="ocb"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\ocb\ocb_decrypt.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\ocb\ocb_decrypt_verify_memory.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\ocb\ocb_done_decrypt.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\ocb\ocb_done_encrypt.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\ocb\ocb_encrypt.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\ocb\ocb_encrypt_authenticate_memory.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\ocb\ocb_init.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\ocb\ocb_ntz.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\ocb\ocb_shift_xor.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\ocb\ocb_test.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\encauth\ocb\s_ocb_done.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+		</Filter>
+		<Filter
+			Name="hashes"
+			>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\hashes\chc\chc.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\hashes\md2.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\hashes\md4.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\hashes\md5.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\hashes\rmd128.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\hashes\rmd160.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\hashes\rmd256.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\hashes\rmd320.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\hashes\sha1.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\hashes\tiger.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<Filter
+				Name="helper"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\hashes\helper\hash_file.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\hashes\helper\hash_filehandle.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\hashes\helper\hash_memory.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\hashes\helper\hash_memory_multi.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="sha2"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\hashes\sha2\sha224.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						ExcludedFromBuild="true"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						ExcludedFromBuild="true"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\hashes\sha2\sha256.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\hashes\sha2\sha384.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						ExcludedFromBuild="true"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						ExcludedFromBuild="true"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\hashes\sha2\sha512.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="whirl"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\hashes\whirl\whirl.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\hashes\whirl\whirltab.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						ExcludedFromBuild="true"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						ExcludedFromBuild="true"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+		</Filter>
+		<Filter
+			Name="mac"
+			>
+			<Filter
+				Name="f9"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\f9\f9_done.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\f9\f9_file.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\f9\f9_init.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\f9\f9_memory.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\f9\f9_memory_multi.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\f9\f9_process.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\f9\f9_test.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="hmac"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\hmac\hmac_done.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\hmac\hmac_file.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\hmac\hmac_init.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\hmac\hmac_memory.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\hmac\hmac_memory_multi.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\hmac\hmac_process.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\hmac\hmac_test.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="omac"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\omac\omac_done.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\omac\omac_file.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\omac\omac_init.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\omac\omac_memory.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\omac\omac_memory_multi.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\omac\omac_process.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\omac\omac_test.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="pelican"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\pelican\pelican.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\pelican\pelican_memory.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\pelican\pelican_test.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="pmac"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\pmac\pmac_done.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\pmac\pmac_file.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\pmac\pmac_init.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\pmac\pmac_memory.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\pmac\pmac_memory_multi.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\pmac\pmac_ntz.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\pmac\pmac_process.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\pmac\pmac_shift_xor.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\pmac\pmac_test.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="xcbc"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\xcbc\xcbc_done.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\xcbc\xcbc_file.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\xcbc\xcbc_init.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\xcbc\xcbc_memory.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\xcbc\xcbc_memory_multi.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\xcbc\xcbc_process.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\mac\xcbc\xcbc_test.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+		</Filter>
+		<Filter
+			Name="math"
+			>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\math\gmp_desc.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\math\ltm_desc.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\math\multi.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\math\rand_prime.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\math\tfm_desc.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<Filter
+				Name="fp"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\math\fp\ltc_ecc_fp_mulmod.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+		</Filter>
+		<Filter
+			Name="misc"
+			>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\burn_stack.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\error_to_string.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\zeromem.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<Filter
+				Name="base64"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\base64\base64_decode.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\base64\base64_encode.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="crypt"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\crypt\crypt.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\crypt\crypt_argchk.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\crypt\crypt_cipher_descriptor.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\crypt\crypt_cipher_is_valid.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\crypt\crypt_find_cipher.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\crypt\crypt_find_cipher_any.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\crypt\crypt_find_cipher_id.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\crypt\crypt_find_hash.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\crypt\crypt_find_hash_any.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\crypt\crypt_find_hash_id.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\crypt\crypt_find_hash_oid.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\crypt\crypt_find_prng.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\crypt\crypt_fsa.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\crypt\crypt_hash_descriptor.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\crypt\crypt_hash_is_valid.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\crypt\crypt_ltc_mp_descriptor.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\crypt\crypt_prng_descriptor.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\crypt\crypt_prng_is_valid.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\crypt\crypt_register_cipher.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\crypt\crypt_register_hash.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\crypt\crypt_register_prng.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\crypt\crypt_unregister_cipher.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\crypt\crypt_unregister_hash.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\crypt\crypt_unregister_prng.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="pkcs"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\pkcs5\pkcs_5_1.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\misc\pkcs5\pkcs_5_2.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+		</Filter>
+		<Filter
+			Name="modes"
+			>
+			<Filter
+				Name="cbc"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\cbc\cbc_decrypt.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\cbc\cbc_done.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\cbc\cbc_encrypt.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\cbc\cbc_getiv.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\cbc\cbc_setiv.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\cbc\cbc_start.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="cfb"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\cfb\cfb_decrypt.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\cfb\cfb_done.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\cfb\cfb_encrypt.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\cfb\cfb_getiv.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\cfb\cfb_setiv.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\cfb\cfb_start.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="ctr"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\ctr\ctr_decrypt.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\ctr\ctr_done.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\ctr\ctr_encrypt.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\ctr\ctr_getiv.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\ctr\ctr_setiv.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\ctr\ctr_start.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\ctr\ctr_test.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="ecb"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\ecb\ecb_decrypt.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\ecb\ecb_done.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\ecb\ecb_encrypt.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\ecb\ecb_start.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="f8"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\f8\f8_decrypt.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\f8\f8_done.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\f8\f8_encrypt.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\f8\f8_getiv.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\f8\f8_setiv.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\f8\f8_start.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\f8\f8_test_mode.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="lrw"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\lrw\lrw_decrypt.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\lrw\lrw_done.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\lrw\lrw_encrypt.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\lrw\lrw_getiv.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\lrw\lrw_process.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\lrw\lrw_setiv.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\lrw\lrw_start.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\lrw\lrw_test.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="ofb"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\ofb\ofb_decrypt.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\ofb\ofb_done.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\ofb\ofb_encrypt.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\ofb\ofb_getiv.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\ofb\ofb_setiv.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\ofb\ofb_start.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="xts"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\xts\xts_decrypt.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\xts\xts_done.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\xts\xts_encrypt.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\xts\xts_init.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\xts\xts_mult_x.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\modes\xts\xts_test.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+		</Filter>
+		<Filter
+			Name="pk"
+			>
+			<Filter
+				Name="asn1"
+				>
+				<Filter
+					Name="der"
+					>
+					<Filter
+						Name="bit"
+						>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\bit\der_decode_bit_string.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\bit\der_encode_bit_string.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\bit\der_length_bit_string.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+					</Filter>
+					<Filter
+						Name="boolean"
+						>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\boolean\der_decode_boolean.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\boolean\der_encode_boolean.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\boolean\der_length_boolean.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+					</Filter>
+					<Filter
+						Name="choice"
+						>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\choice\der_decode_choice.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+					</Filter>
+					<Filter
+						Name="ia5"
+						>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\ia5\der_decode_ia5_string.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\ia5\der_encode_ia5_string.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\ia5\der_length_ia5_string.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+					</Filter>
+					<Filter
+						Name="integer"
+						>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\integer\der_decode_integer.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\integer\der_encode_integer.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\integer\der_length_integer.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+					</Filter>
+					<Filter
+						Name="object_identifier"
+						>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\object_identifier\der_decode_object_identifier.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\object_identifier\der_encode_object_identifier.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\object_identifier\der_length_object_identifier.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+					</Filter>
+					<Filter
+						Name="octet"
+						>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\octet\der_decode_octet_string.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\octet\der_encode_octet_string.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\octet\der_length_octet_string.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+					</Filter>
+					<Filter
+						Name="printable_string"
+						>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\printable_string\der_decode_printable_string.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\printable_string\der_encode_printable_string.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\printable_string\der_length_printable_string.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+					</Filter>
+					<Filter
+						Name="sequence"
+						>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\sequence\der_decode_sequence_ex.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\sequence\der_decode_sequence_flexi.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\sequence\der_decode_sequence_multi.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\sequence\der_encode_sequence_ex.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\sequence\der_encode_sequence_multi.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\sequence\der_length_sequence.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\sequence\der_sequence_free.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+					</Filter>
+					<Filter
+						Name="set"
+						>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\set\der_encode_set.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\set\der_encode_setof.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+					</Filter>
+					<Filter
+						Name="short_integer"
+						>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\short_integer\der_decode_short_integer.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\short_integer\der_encode_short_integer.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\short_integer\der_length_short_integer.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+					</Filter>
+					<Filter
+						Name="utctime"
+						>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\utctime\der_decode_utctime.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\utctime\der_encode_utctime.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\utctime\der_length_utctime.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+					</Filter>
+					<Filter
+						Name="utf8"
+						>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\utf8\der_decode_utf8_string.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\utf8\der_encode_utf8_string.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\asn1\der\utf8\der_length_utf8_string.c"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									AdditionalIncludeDirectories=""
+									PreprocessorDefinitions=""
+								/>
+							</FileConfiguration>
+						</File>
+					</Filter>
+				</Filter>
+			</Filter>
+			<Filter
+				Name="dsa"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\dsa\dsa_decrypt_key.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\dsa\dsa_encrypt_key.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\dsa\dsa_export.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\dsa\dsa_free.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\dsa\dsa_import.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\dsa\dsa_make_key.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\dsa\dsa_shared_secret.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\dsa\dsa_sign_hash.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\dsa\dsa_verify_hash.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\dsa\dsa_verify_key.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="ecc"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\ecc\ecc.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\ecc\ecc_ansi_x963_export.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\ecc\ecc_ansi_x963_import.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\ecc\ecc_decrypt_key.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\ecc\ecc_encrypt_key.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\ecc\ecc_export.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\ecc\ecc_free.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\ecc\ecc_get_size.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\ecc\ecc_import.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\ecc\ecc_make_key.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\ecc\ecc_shared_secret.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\ecc\ecc_sign_hash.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\ecc\ecc_sizes.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\ecc\ecc_test.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\ecc\ecc_verify_hash.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\ecc\ltc_ecc_is_valid_idx.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\ecc\ltc_ecc_map.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\ecc\ltc_ecc_mul2add.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\ecc\ltc_ecc_mulmod.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\ecc\ltc_ecc_mulmod_timing.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\ecc\ltc_ecc_points.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\ecc\ltc_ecc_projective_add_point.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\ecc\ltc_ecc_projective_dbl_point.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="katja"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\katja\katja_decrypt_key.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\katja\katja_encrypt_key.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\katja\katja_export.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\katja\katja_exptmod.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\katja\katja_free.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\katja\katja_import.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\katja\katja_make_key.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="pkcs1"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\pkcs1\pkcs_1_i2osp.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\pkcs1\pkcs_1_mgf1.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\pkcs1\pkcs_1_oaep_decode.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\pkcs1\pkcs_1_oaep_encode.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\pkcs1\pkcs_1_os2ip.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\pkcs1\pkcs_1_pss_decode.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\pkcs1\pkcs_1_pss_encode.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\pkcs1\pkcs_1_v1_5_decode.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\pkcs1\pkcs_1_v1_5_encode.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+			<Filter
+				Name="rsa"
+				>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\rsa\rsa_decrypt_key.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\rsa\rsa_encrypt_key.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\rsa\rsa_export.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\rsa\rsa_exptmod.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\rsa\rsa_free.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\rsa\rsa_import.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\rsa\rsa_make_key.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\rsa\rsa_sign_hash.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\..\zorg\third_party\libtomcrypt\src\pk\rsa\rsa_verify_hash.c"
+					>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCLCompilerTool"
+							AdditionalIncludeDirectories=""
+							PreprocessorDefinitions=""
+						/>
+					</FileConfiguration>
+				</File>
+			</Filter>
+		</Filter>
+		<Filter
+			Name="prngs"
+			>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\prngs\fortuna.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\prngs\rc4.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\prngs\rng_get_bytes.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\prngs\rng_make_prng.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\prngs\sober128.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\prngs\sober128tab.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\prngs\sprng.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\prngs\yarrow.c"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+		</Filter>
+		<Filter
+			Name="headers"
+			>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\headers\tomcrypt.h"
+				>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\headers\tomcrypt_argchk.h"
+				>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\headers\tomcrypt_cfg.h"
+				>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\headers\tomcrypt_cipher.h"
+				>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\headers\tomcrypt_custom.h"
+				>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\headers\tomcrypt_hash.h"
+				>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\headers\tomcrypt_mac.h"
+				>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\headers\tomcrypt_macros.h"
+				>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\headers\tomcrypt_math.h"
+				>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\headers\tomcrypt_misc.h"
+				>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\headers\tomcrypt_pk.h"
+				>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\headers\tomcrypt_pkcs.h"
+				>
+			</File>
+			<File
+				RelativePath="..\..\zorg\third_party\libtomcrypt\src\headers\tomcrypt_prng.h"
+				>
+			</File>
+		</Filter>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/build/zorg/libtommath.vcproj zorg/third_party/build/zorg/libtommath.vcproj
--- original/third_party/build/zorg/libtommath.vcproj	1970-01-01 01:00:00.000000000 +0100
+++ zorg/third_party/build/zorg/libtommath.vcproj	2010-11-29 17:32:53.903044000 +0100
@@ -0,0 +1,3345 @@
+<?xml version="1.0" encoding="Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="8,00"
+	Name="libtommath"
+	ProjectGUID="{3E6CCA62-BEC9-415B-8340-C4E9401F7BA4}"
+	RootNamespace="libtommath"
+	TargetFrameworkVersion="0"
+	>
+	<Platforms>
+		<Platform
+			Name="Win32"
+		/>
+		<Platform
+			Name="Pocket PC 2003 (ARMV4)"
+		/>
+		<Platform
+			Name="Smartphone 2003 (ARMV4)"
+		/>
+		<Platform
+			Name="Windows Mobile 6 Standard SDK (ARMV4I)"
+		/>
+		<Platform
+			Name="Windows Mobile 6 Professional SDK (ARMV4I)"
+		/>
+		<Platform
+			Name="Windows Mobile 5.0 Pocket PC SDK (ARMV4I)"
+		/>
+		<Platform
+			Name="Windows Mobile 5.0 Smartphone SDK (ARMV4I)"
+		/>
+	</Platforms>
+	<ToolFiles>
+	</ToolFiles>
+	<Configurations>
+		<Configuration
+			Name="Release|Win32"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-win32-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-$(PlatformName)-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Pocket PC 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm2003ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Smartphone 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm2003sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Win32"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-win32-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-$(PlatformName)-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Pocket PC 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm2003ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Smartphone 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm2003sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Static|Win32"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-win32-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-$(PlatformName)-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Static|Pocket PC 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm2003ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Static|Smartphone 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm2003sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Dynamic|Win32"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-win32-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-$(PlatformName)-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Dynamic|Pocket PC 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm2003ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Dynamic|Smartphone 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm2003sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Static|Win32"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-win32-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-$(PlatformName)-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Static|Pocket PC 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm2003ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Static|Smartphone 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm2003sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Dynamic|Win32"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-win32-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-$(PlatformName)-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Dynamic|Pocket PC 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm2003ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Dynamic|Smartphone 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm2003sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Windows Mobile 6 Standard SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm6std-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Windows Mobile 6 Professional SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm6pro-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Windows Mobile 5.0 Pocket PC SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm5ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Windows Mobile 5.0 Smartphone SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm5sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Windows Mobile 6 Standard SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm6std-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Windows Mobile 6 Professional SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm6pro-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Windows Mobile 5.0 Pocket PC SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm5ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Windows Mobile 5.0 Smartphone SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm5sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Static|Windows Mobile 6 Standard SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm6std-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Static|Windows Mobile 6 Professional SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm6pro-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Static|Windows Mobile 5.0 Pocket PC SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm5ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Static|Windows Mobile 5.0 Smartphone SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm5sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Dynamic|Windows Mobile 6 Standard SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm6std-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Dynamic|Windows Mobile 6 Professional SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm6pro-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Dynamic|Windows Mobile 5.0 Pocket PC SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm5ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Dynamic|Windows Mobile 5.0 Smartphone SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				Optimization="2"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm5sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Static|Windows Mobile 6 Standard SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm6std-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Static|Windows Mobile 6 Professional SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm6pro-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Static|Windows Mobile 5.0 Pocket PC SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm5ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Static|Windows Mobile 5.0 Smartphone SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm5sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Dynamic|Windows Mobile 6 Standard SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm6std-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Dynamic|Windows Mobile 6 Professional SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm6pro-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Dynamic|Windows Mobile 5.0 Pocket PC SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm5ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Dynamic|Windows Mobile 5.0 Smartphone SDK (ARMV4I)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				AdditionalIncludeDirectories="..\..\zorg\third_party\libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\..\lib\$(ProjectName)-$(TargetCPU)-wm5sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+	</Configurations>
+	<References>
+	</References>
+	<Files>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_error.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_fast_mp_invmod.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_fast_mp_montgomery_reduce.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_fast_s_mp_mul_digs.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_fast_s_mp_mul_high_digs.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_fast_s_mp_sqr.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_2expt.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_abs.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_add.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_add_d.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_addmod.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_and.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_clamp.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_clear.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_clear_multi.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_cmp.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_cmp_d.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_cmp_mag.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_cnt_lsb.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_copy.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_count_bits.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_div.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_div_2.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_div_2d.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_div_3.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_div_d.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_dr_is_modulus.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_dr_reduce.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_dr_setup.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_exch.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_expt_d.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_exptmod.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_exptmod_fast.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_exteuclid.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_fread.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_fwrite.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_gcd.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_get_int.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_grow.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_init.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_init_copy.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_init_multi.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_init_set.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_init_set_int.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_init_size.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_invmod.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_invmod_slow.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_is_square.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_jacobi.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_karatsuba_mul.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_karatsuba_sqr.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_lcm.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_lshd.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_mod.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_mod_2d.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_mod_d.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_montgomery_calc_normalization.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_montgomery_reduce.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_montgomery_setup.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_mul.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_mul_2.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_mul_2d.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_mul_d.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_mulmod.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_n_root.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_neg.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_or.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_prime_fermat.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_prime_is_divisible.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_prime_is_prime.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_prime_miller_rabin.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_prime_next_prime.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_prime_rabin_miller_trials.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_prime_random_ex.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_radix_size.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_radix_smap.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_rand.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_read_radix.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_read_signed_bin.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_read_unsigned_bin.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_reduce.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_reduce_2k.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_reduce_2k_l.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_reduce_2k_setup.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_reduce_2k_setup_l.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_reduce_is_2k.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_reduce_is_2k_l.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_reduce_setup.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_rshd.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_set.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_set_int.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_shrink.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_signed_bin_size.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_sqr.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_sqrmod.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_sqrt.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_sub.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_sub_d.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_submod.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_to_signed_bin.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_to_signed_bin_n.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_to_unsigned_bin.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_to_unsigned_bin_n.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_toom_mul.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_toom_sqr.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_toradix.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_toradix_n.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_unsigned_bin_size.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_xor.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_mp_zero.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_prime_tab.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_reverse.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_s_mp_add.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_s_mp_exptmod.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_s_mp_mul_digs.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_s_mp_mul_high_digs.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_s_mp_sqr.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bn_s_mp_sub.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\bncore.c"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\tommath.h"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\tommath_class.h"
+			>
+		</File>
+		<File
+			RelativePath="..\..\zorg\third_party\libtommath\tommath_superclass.h"
+			>
+		</File>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/build/zorg/zorg.vcproj zorg/third_party/build/zorg/zorg.vcproj
--- original/third_party/build/zorg/zorg.vcproj	1970-01-01 01:00:00.000000000 +0100
+++ zorg/third_party/build/zorg/zorg.vcproj	2010-11-29 19:01:21.977396000 +0100
@@ -0,0 +1,3184 @@
+<?xml version="1.0" encoding="Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="8,00"
+	Name="zorg"
+	ProjectGUID="{B66C50C9-785A-4939-9B3C-C68A4EC25C1F}"
+	RootNamespace="zorg"
+	>
+	<Platforms>
+		<Platform
+			Name="Win32"
+		/>
+		<Platform
+			Name="Pocket PC 2003 (ARMV4)"
+		/>
+		<Platform
+			Name="Smartphone 2003 (ARMV4)"
+		/>
+		<Platform
+			Name="Windows Mobile 6 Standard SDK (ARMV4I)"
+		/>
+		<Platform
+			Name="Windows Mobile 6 Professional SDK (ARMV4I)"
+		/>
+		<Platform
+			Name="Windows Mobile 5.0 Pocket PC SDK (ARMV4I)"
+		/>
+		<Platform
+			Name="Windows Mobile 5.0 Smartphone SDK (ARMV4I)"
+		/>
+	</Platforms>
+	<ToolFiles>
+	</ToolFiles>
+	<Configurations>
+		<Configuration
+			Name="Release|Win32"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-win32-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="../../../pjlib/include;include;../../zorg/include;../../zorg/src/include;../srtp;../../srtp/include;../../srtp/crypto/include;../../zorg/third_party/libtomcrypt/src/headers;../../zorg/third_party/libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+				WarningLevel="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Pocket PC 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-release-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm2003ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Smartphone 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-release-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm2003sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Win32"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-win32-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="../../../pjlib/include;include;../../zorg/include;../../zorg/src/include;../srtp;../../srtp/include;../../srtp/crypto/include;../../zorg/third_party/libtomcrypt/src/headers;../../zorg/third_party/libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+				WarningLevel="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Pocket PC 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-common-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm2003ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Smartphone 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-common-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm2003sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Static|Win32"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-win32-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="../../../pjlib/include;include;../../zorg/include;../../zorg/src/include;../srtp;../../srtp/include;../../srtp/crypto/include;../../zorg/third_party/libtomcrypt/src/headers;../../zorg/third_party/libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+				WarningLevel="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Static|Pocket PC 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-common-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm2003ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Static|Smartphone 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-common-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm2003sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Dynamic|Win32"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-win32-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="../../../pjlib/include;include;../../zorg/include;../../zorg/src/include;../srtp;../../srtp/include;../../srtp/crypto/include;../../zorg/third_party/libtomcrypt/src/headers;../../zorg/third_party/libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+				WarningLevel="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Dynamic|Pocket PC 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-release-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm2003ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Dynamic|Smartphone 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-release-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm2003sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Dynamic|Win32"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-win32-common-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="../../../pjlib/include;include;../../zorg/include;../../zorg/src/include;../srtp;../../srtp/include;../../srtp/crypto/include;../../zorg/third_party/libtomcrypt/src/headers;../../zorg/third_party/libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+				WarningLevel="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Dynamic|Pocket PC 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-common-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm2003ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Dynamic|Smartphone 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-common-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm2003sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Static|Win32"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-win32-release-defaults.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="../../../pjlib/include;include;../../zorg/include;../../zorg/src/include;../srtp;../../srtp/include;../../srtp/crypto/include;../../zorg/third_party/libtomcrypt/src/headers;../../zorg/third_party/libtommath"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+				WarningLevel="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Static|Pocket PC 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-release-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm2003ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Static|Smartphone 2003 (ARMV4)"
+			ConfigurationType="4"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm2003-release-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				ExecutionBucket="7"
+				PreprocessorDefinitions="_LIB;"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm2003sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Windows Mobile 6 Standard SDK (ARMV4I)"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-release-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			ConfigurationType="4"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				PreprocessorDefinitions="_LIB;"
+				ExecutionBucket="7"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm6std-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Windows Mobile 6 Professional SDK (ARMV4I)"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-release-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			ConfigurationType="4"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				PreprocessorDefinitions="_LIB;"
+				ExecutionBucket="7"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm6pro-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Windows Mobile 6 Standard SDK (ARMV4I)"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-common-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			ConfigurationType="4"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				PreprocessorDefinitions="_LIB;"
+				ExecutionBucket="7"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm6std-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Windows Mobile 6 Professional SDK (ARMV4I)"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-common-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			ConfigurationType="4"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				PreprocessorDefinitions="_LIB;"
+				ExecutionBucket="7"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm6pro-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Static|Windows Mobile 6 Standard SDK (ARMV4I)"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-common-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			ConfigurationType="4"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				PreprocessorDefinitions="_LIB;"
+				ExecutionBucket="7"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm6std-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Static|Windows Mobile 6 Professional SDK (ARMV4I)"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-common-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			ConfigurationType="4"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				PreprocessorDefinitions="_LIB;"
+				ExecutionBucket="7"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm6pro-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Dynamic|Windows Mobile 6 Standard SDK (ARMV4I)"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-release-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			ConfigurationType="4"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				PreprocessorDefinitions="_LIB;"
+				ExecutionBucket="7"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm6std-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Dynamic|Windows Mobile 6 Professional SDK (ARMV4I)"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-release-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			ConfigurationType="4"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				PreprocessorDefinitions="_LIB;"
+				ExecutionBucket="7"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm6pro-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Dynamic|Windows Mobile 6 Standard SDK (ARMV4I)"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-common-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			ConfigurationType="4"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				PreprocessorDefinitions="_LIB;"
+				ExecutionBucket="7"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm6std-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Dynamic|Windows Mobile 6 Professional SDK (ARMV4I)"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-common-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			ConfigurationType="4"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				PreprocessorDefinitions="_LIB;"
+				ExecutionBucket="7"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm6pro-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Static|Windows Mobile 6 Standard SDK (ARMV4I)"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-release-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			ConfigurationType="4"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				PreprocessorDefinitions="_LIB;"
+				ExecutionBucket="7"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm6std-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Static|Windows Mobile 6 Professional SDK (ARMV4I)"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm6-release-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			ConfigurationType="4"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				PreprocessorDefinitions="_LIB;"
+				ExecutionBucket="7"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm6pro-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Windows Mobile 5.0 Pocket PC SDK (ARMV4I)"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-release-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			ConfigurationType="4"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				PreprocessorDefinitions="_LIB;"
+				ExecutionBucket="7"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm5ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Windows Mobile 5.0 Pocket PC SDK (ARMV4I)"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-common-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			ConfigurationType="4"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				PreprocessorDefinitions="_LIB;"
+				ExecutionBucket="7"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm5ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Static|Windows Mobile 5.0 Pocket PC SDK (ARMV4I)"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-common-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			ConfigurationType="4"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				PreprocessorDefinitions="_LIB;"
+				ExecutionBucket="7"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm5ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Dynamic|Windows Mobile 5.0 Pocket PC SDK (ARMV4I)"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-release-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			ConfigurationType="4"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				PreprocessorDefinitions="_LIB;"
+				ExecutionBucket="7"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm5ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Dynamic|Windows Mobile 5.0 Pocket PC SDK (ARMV4I)"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-common-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			ConfigurationType="4"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				PreprocessorDefinitions="_LIB;"
+				ExecutionBucket="7"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm5ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Static|Windows Mobile 5.0 Pocket PC SDK (ARMV4I)"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-release-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			ConfigurationType="4"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				PreprocessorDefinitions="_LIB;"
+				ExecutionBucket="7"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm5ppc-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Windows Mobile 5.0 Smartphone SDK (ARMV4I)"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-release-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			ConfigurationType="4"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				PreprocessorDefinitions="_LIB;"
+				ExecutionBucket="7"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm5sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Windows Mobile 5.0 Smartphone SDK (ARMV4I)"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-common-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			ConfigurationType="4"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				PreprocessorDefinitions="_LIB;"
+				ExecutionBucket="7"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm5sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Static|Windows Mobile 5.0 Smartphone SDK (ARMV4I)"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-common-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			ConfigurationType="4"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				PreprocessorDefinitions="_LIB;"
+				ExecutionBucket="7"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm5sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Dynamic|Windows Mobile 5.0 Smartphone SDK (ARMV4I)"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-release-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			ConfigurationType="4"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				PreprocessorDefinitions="_LIB;"
+				ExecutionBucket="7"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm5sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug-Dynamic|Windows Mobile 5.0 Smartphone SDK (ARMV4I)"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-debug-dynamic-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-common-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			ConfigurationType="4"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				PreprocessorDefinitions="_LIB;"
+				ExecutionBucket="7"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm5sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release-Static|Windows Mobile 5.0 Smartphone SDK (ARMV4I)"
+			InheritedPropertySheets="..\..\..\build\vs\pjproject-vs8-release-static-defaults.vsprops;..\..\..\build\vs\pjproject-vs8-wm5-release-defaults.vsprops"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="1"
+			ConfigurationType="4"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				PreprocessorDefinitions="_LIB;"
+				ExecutionBucket="7"
+				PrecompiledHeaderFile=""
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="..\lib\$(ProjectName)-$(TargetCPU)-wm5sp-vc$(VSVer)-$(ConfigurationName).lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCCodeSignTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+			<DeploymentTool
+				ForceDirty="-1"
+				RemoteDirectory=""
+				RegisterOutput="0"
+				AdditionalFiles=""
+			/>
+			<DebuggerTool
+			/>
+		</Configuration>
+	</Configurations>
+	<References>
+	</References>
+	<Files>
+		<Filter
+			Name="Source Files"
+			>
+			<File
+				RelativePath=".\glue.cpp"
+				>
+			</File>
+			<Filter
+				Name="zorg"
+				>
+				<File
+					RelativePath="..\..\zorg\src\cache-builtin.cpp"
+					>
+				</File>
+				<File
+					RelativePath="..\..\zorg\src\capi.cpp"
+					>
+				</File>
+				<File
+					RelativePath="..\..\zorg\src\crc32c.cpp"
+					>
+				</File>
+				<File
+					RelativePath="..\..\zorg\src\crypto.cpp"
+					>
+				</File>
+				<File
+					RelativePath="..\..\zorg\src\libtomcrypt.cpp"
+					>
+				</File>
+				<File
+					RelativePath="..\..\zorg\src\log.cpp"
+					>
+				</File>
+				<File
+					RelativePath="..\..\zorg\src\pgpwordlist.cpp"
+					>
+				</File>
+				<File
+					RelativePath="..\..\zorg\src\rfc3526.cpp"
+					>
+				</File>
+				<File
+					RelativePath="..\..\zorg\src\zorg.cpp"
+					>
+				</File>
+				<File
+					RelativePath="..\..\zorg\src\zrtp.cpp"
+					>
+				</File>
+				<Filter
+					Name="crypto"
+					>
+					<File
+						RelativePath="..\..\zorg\src\crypto\sas.cpp"
+						>
+					</File>
+					<Filter
+						Name="libsrtp"
+						>
+						<File
+							RelativePath="..\..\zorg\src\crypto\libsrtp\aes.cpp"
+							>
+						</File>
+					</Filter>
+					<Filter
+						Name="tomcrypt"
+						>
+						<File
+							RelativePath="..\..\zorg\src\crypto\tomcrypt\dh.cpp"
+							>
+						</File>
+						<File
+							RelativePath="..\..\zorg\src\crypto\tomcrypt\ecc.cpp"
+							>
+						</File>
+						<File
+							RelativePath="..\..\zorg\src\crypto\tomcrypt\hash.cpp"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									ObjectFile="$(IntDir)\$(InputName)1.obj"
+									XMLDocumentationFileName="$(IntDir)\$(InputName)1.xdc"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Release|Pocket PC 2003 (ARMV4)"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									ObjectFile="$(IntDir)/$(InputName)1.obj"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Release|Smartphone 2003 (ARMV4)"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									ObjectFile="$(IntDir)/$(InputName)1.obj"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									ObjectFile="$(IntDir)\$(InputName)1.obj"
+									XMLDocumentationFileName="$(IntDir)\$(InputName)1.xdc"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Pocket PC 2003 (ARMV4)"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									ObjectFile="$(IntDir)/$(InputName)1.obj"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Smartphone 2003 (ARMV4)"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									ObjectFile="$(IntDir)/$(InputName)1.obj"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug-Static|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									ObjectFile="$(IntDir)\$(InputName)1.obj"
+									XMLDocumentationFileName="$(IntDir)\$(InputName)1.xdc"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug-Static|Pocket PC 2003 (ARMV4)"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									ObjectFile="$(IntDir)/$(InputName)1.obj"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug-Static|Smartphone 2003 (ARMV4)"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									ObjectFile="$(IntDir)/$(InputName)1.obj"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Release-Dynamic|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									ObjectFile="$(IntDir)\$(InputName)1.obj"
+									XMLDocumentationFileName="$(IntDir)\$(InputName)1.xdc"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Release-Dynamic|Pocket PC 2003 (ARMV4)"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									ObjectFile="$(IntDir)/$(InputName)1.obj"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Release-Dynamic|Smartphone 2003 (ARMV4)"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									ObjectFile="$(IntDir)/$(InputName)1.obj"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug-Dynamic|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									ObjectFile="$(IntDir)\$(InputName)1.obj"
+									XMLDocumentationFileName="$(IntDir)\$(InputName)1.xdc"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug-Dynamic|Pocket PC 2003 (ARMV4)"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									ObjectFile="$(IntDir)/$(InputName)1.obj"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug-Dynamic|Smartphone 2003 (ARMV4)"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									ObjectFile="$(IntDir)/$(InputName)1.obj"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Release-Static|Win32"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									ObjectFile="$(IntDir)\$(InputName)1.obj"
+									XMLDocumentationFileName="$(IntDir)\$(InputName)1.xdc"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Release-Static|Pocket PC 2003 (ARMV4)"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									ObjectFile="$(IntDir)/$(InputName)1.obj"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Release-Static|Smartphone 2003 (ARMV4)"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+									ObjectFile="$(IntDir)/$(InputName)1.obj"
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\src\crypto\tomcrypt\rng.cpp"
+							>
+						</File>
+					</Filter>
+					<Filter
+						Name="openssl"
+						>
+						<File
+							RelativePath="..\..\zorg\src\crypto\openssl\cipher.cpp"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								ExcludedFromBuild="true"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								ExcludedFromBuild="true"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug-Static|Win32"
+								ExcludedFromBuild="true"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Release-Dynamic|Win32"
+								ExcludedFromBuild="true"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug-Dynamic|Win32"
+								ExcludedFromBuild="true"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Release-Static|Win32"
+								ExcludedFromBuild="true"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\src\crypto\openssl\hash.cpp"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								ExcludedFromBuild="true"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								ExcludedFromBuild="true"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug-Static|Win32"
+								ExcludedFromBuild="true"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Release-Dynamic|Win32"
+								ExcludedFromBuild="true"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug-Dynamic|Win32"
+								ExcludedFromBuild="true"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Release-Static|Win32"
+								ExcludedFromBuild="true"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+								/>
+							</FileConfiguration>
+						</File>
+						<File
+							RelativePath="..\..\zorg\src\crypto\openssl\keyexchange.cpp"
+							>
+							<FileConfiguration
+								Name="Release|Win32"
+								ExcludedFromBuild="true"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug|Win32"
+								ExcludedFromBuild="true"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug-Static|Win32"
+								ExcludedFromBuild="true"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Release-Dynamic|Win32"
+								ExcludedFromBuild="true"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Debug-Dynamic|Win32"
+								ExcludedFromBuild="true"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+								/>
+							</FileConfiguration>
+							<FileConfiguration
+								Name="Release-Static|Win32"
+								ExcludedFromBuild="true"
+								>
+								<Tool
+									Name="VCCLCompilerTool"
+								/>
+							</FileConfiguration>
+						</File>
+					</Filter>
+				</Filter>
+				<Filter
+					Name="srtp"
+					>
+					<File
+						RelativePath="..\..\zorg\src\srtp\libsrtp.cpp"
+						>
+					</File>
+				</Filter>
+			</Filter>
+		</Filter>
+		<Filter
+			Name="Header Files"
+			>
+			<File
+				RelativePath="..\..\zorg\src\crc32c.h"
+				>
+			</File>
+			<Filter
+				Name="zorg"
+				>
+				<File
+					RelativePath="..\..\zorg\include\zorg\crypto.h"
+					>
+				</File>
+				<File
+					RelativePath=".\include\zorg\glue.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\zorg\include\zorg\log.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\zorg\include\zorg\snprintf.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\zorg\include\zorg\srtp.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\zorg\include\zorg\zorg.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\zorg\include\zorg\zrtp.h"
+					>
+				</File>
+				<Filter
+					Name="internal"
+					>
+					<File
+						RelativePath="..\..\zorg\src\include\zorg\internal\libtomcrypt.h"
+						>
+					</File>
+				</Filter>
+			</Filter>
+		</Filter>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/Makefile.in zorg/third_party/srtp/Makefile.in
--- original/third_party/srtp/Makefile.in	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/Makefile.in	2010-11-26 16:21:58.352995000 +0100
@@ -26,7 +26,7 @@
 	test/roc_driver$(EXE) -v >/dev/null
 	test/replay_driver$(EXE) -v >/dev/null
 	test/dtls_srtp_driver$(EXE) >/dev/null
-	cd test; ./rtpw_test.sh >/dev/null	
+	cd test; $(abspath $(srcdir))/test/rtpw_test.sh >/dev/null	
 	@echo "libsrtp test applications passed."
 	$(MAKE) -C crypto runtest
 
@@ -99,7 +99,7 @@
 
 # libsrtp.a (implements srtp processing)
 
-srtpobj = srtp/srtp.o 
+srtpobj = srtp/srtp.o srtp/ekt.o
 
 libsrtp.a: $(srtpobj) $(cryptobj) $(gdoi)
 	ar cr libsrtp.a $^
@@ -186,21 +186,23 @@
 libsrtpdoc:
 	$(MAKE) -C doc
 
-.PHONY: clean superclean install
+.PHONY: clean superclean distclean install
 
 install:
-	@if [ -d $(DESTDIR)$(includedir)/srtp ]; then \
+	@if [ -r $(DESTDIR)$(includedir)/srtp/srtp.h ]; then \
 	   echo "you should run 'make uninstall' first"; exit 1;  \
 	fi
 	$(INSTALL) -d $(DESTDIR)$(includedir)/srtp
 	$(INSTALL) -d $(DESTDIR)$(libdir)
-	cp include/*.h $(DESTDIR)$(includedir)/srtp  
-	cp crypto/include/*.h $(DESTDIR)$(includedir)/srtp
+	cp $(srcdir)/include/*.h $(DESTDIR)$(includedir)/srtp  
+	cp $(srcdir)/crypto/include/*.h $(DESTDIR)$(includedir)/srtp
+	if [ "$(srcdir)" != "." ]; then cp crypto/include/*.h $(DESTDIR)$(includedir)/srtp; fi
 	if [ -f libsrtp.a ]; then cp libsrtp.a $(DESTDIR)$(libdir)/; fi
 
 uninstall:
-	rm -rf $(DESTDIR)$(includedir)/srtp
-	rm -rf $(DESTDIR)$(libdir)/libsrtp.a
+	rm -f $(DESTDIR)$(includedir)/srtp/*.h
+	rm -f $(DESTDIR)$(libdir)/libsrtp.a
+	-rmdir $(DESTDIR)$(includedir)/srtp
 
 clean:
 	rm -rf $(cryptobj) $(srtpobj) $(cryptomath) TAGS \
@@ -217,9 +219,12 @@
 
 superclean: clean
 	rm -rf crypto/include/config.h config.log config.cache config.status \
-               Makefile .gdb_history test/.gdb_history .DS_Store
+               Makefile crypto/Makefile doc/Makefile \
+               .gdb_history test/.gdb_history .DS_Store
 	rm -rf autom4te.cache
 
+distclean: superclean
+
 distname = srtp-$(shell cat VERSION)
 
 distribution: runtest superclean 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/config.h_win32vc7 zorg/third_party/srtp/config.h_win32vc7
--- original/third_party/srtp/config.h_win32vc7	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/config.h_win32vc7	2010-11-26 16:21:58.352995000 +0100
@@ -1,5 +1,9 @@
 /* Hacked config.h for Windows XP 32-bit & VC7  */
 
+#ifdef (_MSC_VER >= 1400)
+# define HAVE_RAND_S	1
+#endif
+
 /* Define if building for a CISC machine (e.g. Intel). */
 #define CPU_CISC 1
 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/config.hw zorg/third_party/srtp/config.hw
--- original/third_party/srtp/config.hw	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/config.hw	2010-11-26 16:21:58.352995000 +0100
@@ -1,6 +1,10 @@
 /* crypto/include/config.h.  Generated by configure.  */
 /* config_in.h.  Generated from configure.in by autoheader.  */
 
+#if (_MSC_VER >= 1400)
+# define HAVE_RAND_S	1
+#endif
+
 /* Define if building for a CISC machine (e.g. Intel). */
 #define CPU_CISC 1
 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/config_in.h zorg/third_party/srtp/config_in.h
--- original/third_party/srtp/config_in.h	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/config_in.h	2010-11-26 16:21:58.352995000 +0100
@@ -54,6 +54,9 @@
 /* Define to 1 if you have the <netinet/in.h> header file. */
 #undef HAVE_NETINET_IN_H
 
+/* Define to 1 if you have the `sigaction' function. */
+#undef HAVE_SIGACTION
+
 /* Define to 1 if you have the `socket' function. */
 #undef HAVE_SOCKET
 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/configure zorg/third_party/srtp/configure
--- original/third_party/srtp/configure	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/configure	2010-11-26 16:21:58.352995000 +0100
@@ -309,7 +309,7 @@
 # include <unistd.h>
 #endif"
 
-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS RANLIB ac_ct_RANLIB CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA RNG_OBJS CPP EGREP build build_cpu build_vendor build_os host host_cpu host_vendor host_os EXE GDOI_OBJS LIBOBJS LTLIBOBJS'
+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS RANLIB ac_ct_RANLIB CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA build build_cpu build_vendor build_os host host_cpu host_vendor host_os EXE RNG_OBJS CPP EGREP GDOI_OBJS LIBOBJS LTLIBOBJS'
 ac_subst_files=''
 
 # Initialize some variables set by options.
@@ -2420,6 +2420,333 @@
 
 
 
+echo "$as_me:$LINENO: checking whether byte ordering is bigendian" >&5
+echo $ECHO_N "checking whether byte ordering is bigendian... $ECHO_C" >&6
+if test "${ac_cv_c_bigendian+set}" = set; then
+  echo $ECHO_N "(cached) $ECHO_C" >&6
+else
+  # See if sys/param.h defines the BYTE_ORDER macro.
+cat >conftest.$ac_ext <<_ACEOF
+/* confdefs.h.  */
+_ACEOF
+cat confdefs.h >>conftest.$ac_ext
+cat >>conftest.$ac_ext <<_ACEOF
+/* end confdefs.h.  */
+#include <sys/types.h>
+#include <sys/param.h>
+
+int
+main ()
+{
+#if !BYTE_ORDER || !BIG_ENDIAN || !LITTLE_ENDIAN
+ bogus endian macros
+#endif
+
+  ;
+  return 0;
+}
+_ACEOF
+rm -f conftest.$ac_objext
+if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
+  (eval $ac_compile) 2>conftest.er1
+  ac_status=$?
+  grep -v '^ *+' conftest.er1 >conftest.err
+  rm -f conftest.er1
+  cat conftest.err >&5
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); } &&
+	 { ac_try='test -z "$ac_c_werror_flag"
+			 || test ! -s conftest.err'
+  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
+  (eval $ac_try) 2>&5
+  ac_status=$?
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); }; } &&
+	 { ac_try='test -s conftest.$ac_objext'
+  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
+  (eval $ac_try) 2>&5
+  ac_status=$?
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); }; }; then
+  # It does; now see whether it defined to BIG_ENDIAN or not.
+cat >conftest.$ac_ext <<_ACEOF
+/* confdefs.h.  */
+_ACEOF
+cat confdefs.h >>conftest.$ac_ext
+cat >>conftest.$ac_ext <<_ACEOF
+/* end confdefs.h.  */
+#include <sys/types.h>
+#include <sys/param.h>
+
+int
+main ()
+{
+#if BYTE_ORDER != BIG_ENDIAN
+ not big endian
+#endif
+
+  ;
+  return 0;
+}
+_ACEOF
+rm -f conftest.$ac_objext
+if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
+  (eval $ac_compile) 2>conftest.er1
+  ac_status=$?
+  grep -v '^ *+' conftest.er1 >conftest.err
+  rm -f conftest.er1
+  cat conftest.err >&5
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); } &&
+	 { ac_try='test -z "$ac_c_werror_flag"
+			 || test ! -s conftest.err'
+  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
+  (eval $ac_try) 2>&5
+  ac_status=$?
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); }; } &&
+	 { ac_try='test -s conftest.$ac_objext'
+  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
+  (eval $ac_try) 2>&5
+  ac_status=$?
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); }; }; then
+  ac_cv_c_bigendian=yes
+else
+  echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
+
+ac_cv_c_bigendian=no
+fi
+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext
+else
+  echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
+
+# It does not; compile a test program.
+if test "$cross_compiling" = yes; then
+  # try to guess the endianness by grepping values into an object file
+  ac_cv_c_bigendian=unknown
+  cat >conftest.$ac_ext <<_ACEOF
+/* confdefs.h.  */
+_ACEOF
+cat confdefs.h >>conftest.$ac_ext
+cat >>conftest.$ac_ext <<_ACEOF
+/* end confdefs.h.  */
+short ascii_mm[] = { 0x4249, 0x4765, 0x6E44, 0x6961, 0x6E53, 0x7953, 0 };
+short ascii_ii[] = { 0x694C, 0x5454, 0x656C, 0x6E45, 0x6944, 0x6E61, 0 };
+void _ascii () { char *s = (char *) ascii_mm; s = (char *) ascii_ii; }
+short ebcdic_ii[] = { 0x89D3, 0xE3E3, 0x8593, 0x95C5, 0x89C4, 0x9581, 0 };
+short ebcdic_mm[] = { 0xC2C9, 0xC785, 0x95C4, 0x8981, 0x95E2, 0xA8E2, 0 };
+void _ebcdic () { char *s = (char *) ebcdic_mm; s = (char *) ebcdic_ii; }
+int
+main ()
+{
+ _ascii (); _ebcdic ();
+  ;
+  return 0;
+}
+_ACEOF
+rm -f conftest.$ac_objext
+if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
+  (eval $ac_compile) 2>conftest.er1
+  ac_status=$?
+  grep -v '^ *+' conftest.er1 >conftest.err
+  rm -f conftest.er1
+  cat conftest.err >&5
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); } &&
+	 { ac_try='test -z "$ac_c_werror_flag"
+			 || test ! -s conftest.err'
+  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
+  (eval $ac_try) 2>&5
+  ac_status=$?
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); }; } &&
+	 { ac_try='test -s conftest.$ac_objext'
+  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
+  (eval $ac_try) 2>&5
+  ac_status=$?
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); }; }; then
+  if grep BIGenDianSyS conftest.$ac_objext >/dev/null ; then
+  ac_cv_c_bigendian=yes
+fi
+if grep LiTTleEnDian conftest.$ac_objext >/dev/null ; then
+  if test "$ac_cv_c_bigendian" = unknown; then
+    ac_cv_c_bigendian=no
+  else
+    # finding both strings is unlikely to happen, but who knows?
+    ac_cv_c_bigendian=unknown
+  fi
+fi
+else
+  echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
+
+fi
+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext
+else
+  cat >conftest.$ac_ext <<_ACEOF
+/* confdefs.h.  */
+_ACEOF
+cat confdefs.h >>conftest.$ac_ext
+cat >>conftest.$ac_ext <<_ACEOF
+/* end confdefs.h.  */
+int
+main ()
+{
+  /* Are we little or big endian?  From Harbison&Steele.  */
+  union
+  {
+    long l;
+    char c[sizeof (long)];
+  } u;
+  u.l = 1;
+  exit (u.c[sizeof (long) - 1] == 1);
+}
+_ACEOF
+rm -f conftest$ac_exeext
+if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
+  (eval $ac_link) 2>&5
+  ac_status=$?
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); } && { ac_try='./conftest$ac_exeext'
+  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
+  (eval $ac_try) 2>&5
+  ac_status=$?
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); }; }; then
+  ac_cv_c_bigendian=no
+else
+  echo "$as_me: program exited with status $ac_status" >&5
+echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
+
+( exit $ac_status )
+ac_cv_c_bigendian=yes
+fi
+rm -f core *.core gmon.out bb.out conftest$ac_exeext conftest.$ac_objext conftest.$ac_ext
+fi
+fi
+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext
+fi
+echo "$as_me:$LINENO: result: $ac_cv_c_bigendian" >&5
+echo "${ECHO_T}$ac_cv_c_bigendian" >&6
+case $ac_cv_c_bigendian in
+  yes)
+
+cat >>confdefs.h <<\_ACEOF
+#define WORDS_BIGENDIAN 1
+_ACEOF
+ ;;
+  no)
+     ;;
+  *)
+    { { echo "$as_me:$LINENO: error: unknown endianness
+presetting ac_cv_c_bigendian=no (or yes) will help" >&5
+echo "$as_me: error: unknown endianness
+presetting ac_cv_c_bigendian=no (or yes) will help" >&2;}
+   { (exit 1); exit 1; }; } ;;
+esac
+
+
+# Make sure we can run config.sub.
+$ac_config_sub sun4 >/dev/null 2>&1 ||
+  { { echo "$as_me:$LINENO: error: cannot run $ac_config_sub" >&5
+echo "$as_me: error: cannot run $ac_config_sub" >&2;}
+   { (exit 1); exit 1; }; }
+
+echo "$as_me:$LINENO: checking build system type" >&5
+echo $ECHO_N "checking build system type... $ECHO_C" >&6
+if test "${ac_cv_build+set}" = set; then
+  echo $ECHO_N "(cached) $ECHO_C" >&6
+else
+  ac_cv_build_alias=$build_alias
+test -z "$ac_cv_build_alias" &&
+  ac_cv_build_alias=`$ac_config_guess`
+test -z "$ac_cv_build_alias" &&
+  { { echo "$as_me:$LINENO: error: cannot guess build type; you must specify one" >&5
+echo "$as_me: error: cannot guess build type; you must specify one" >&2;}
+   { (exit 1); exit 1; }; }
+ac_cv_build=`$ac_config_sub $ac_cv_build_alias` ||
+  { { echo "$as_me:$LINENO: error: $ac_config_sub $ac_cv_build_alias failed" >&5
+echo "$as_me: error: $ac_config_sub $ac_cv_build_alias failed" >&2;}
+   { (exit 1); exit 1; }; }
+
+fi
+echo "$as_me:$LINENO: result: $ac_cv_build" >&5
+echo "${ECHO_T}$ac_cv_build" >&6
+build=$ac_cv_build
+build_cpu=`echo $ac_cv_build | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\1/'`
+build_vendor=`echo $ac_cv_build | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\2/'`
+build_os=`echo $ac_cv_build | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\3/'`
+
+
+echo "$as_me:$LINENO: checking host system type" >&5
+echo $ECHO_N "checking host system type... $ECHO_C" >&6
+if test "${ac_cv_host+set}" = set; then
+  echo $ECHO_N "(cached) $ECHO_C" >&6
+else
+  ac_cv_host_alias=$host_alias
+test -z "$ac_cv_host_alias" &&
+  ac_cv_host_alias=$ac_cv_build_alias
+ac_cv_host=`$ac_config_sub $ac_cv_host_alias` ||
+  { { echo "$as_me:$LINENO: error: $ac_config_sub $ac_cv_host_alias failed" >&5
+echo "$as_me: error: $ac_config_sub $ac_cv_host_alias failed" >&2;}
+   { (exit 1); exit 1; }; }
+
+fi
+echo "$as_me:$LINENO: result: $ac_cv_host" >&5
+echo "${ECHO_T}$ac_cv_host" >&6
+host=$ac_cv_host
+host_cpu=`echo $ac_cv_host | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\1/'`
+host_vendor=`echo $ac_cv_host | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\2/'`
+host_os=`echo $ac_cv_host | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\3/'`
+
+
+
+case $host_cpu in
+     i*86 )
+
+cat >>confdefs.h <<\_ACEOF
+#define CPU_CISC 1
+_ACEOF
+
+
+cat >>confdefs.h <<\_ACEOF
+#define HAVE_X86 1
+_ACEOF
+;;
+	* )
+	# CPU_RISC is only supported for big endian machines.
+	if test "$ac_cv_c_bigendian" = "yes"; then
+
+cat >>confdefs.h <<\_ACEOF
+#define CPU_RISC 1
+_ACEOF
+
+	else
+	   cat >>confdefs.h <<\_ACEOF
+#define CPU_CISC 1
+_ACEOF
+
+	fi
+	;;
+esac
+
+case $host_os in
+    *cygwin*|*mingw* )
+	EXE=.exe
+	HOST_IS_WINDOWS=yes
+	;;
+    * )
+	EXE=""
+	;;
+esac
+   # define executable suffix; this is needed for `make clean'
+
+
 # Check whether --enable-kernel-linux or --disable-kernel-linux was given.
 if test "${enable_kernel_linux+set}" = set; then
   enableval="$enable_kernel_linux"
@@ -2444,7 +2771,7 @@
 echo "$as_me:$LINENO: result: $enable_kernel_linux" >&5
 echo "${ECHO_T}$enable_kernel_linux" >&6
 
-if test "$cross_compiling" != yes; then
+if test "$cross_compiling" != yes -a "$HOST_IS_WINDOWS" != yes; then
       echo "$as_me:$LINENO: checking for /dev/urandom" >&5
 echo $ECHO_N "checking for /dev/urandom... $ECHO_C" >&6
 if test "${ac_cv_file__dev_urandom+set}" = set; then
@@ -2514,7 +2841,6 @@
 
 
 
-
 ac_ext=c
 ac_cpp='$CPP $CPPFLAGS'
 ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
@@ -6483,7 +6809,8 @@
 
 
 
-for ac_func in socket inet_aton usleep
+
+for ac_func in socket inet_aton usleep sigaction
 do
 as_ac_var=`echo "ac_cv_func_$ac_func" | $as_tr_sh`
 echo "$as_me:$LINENO: checking for $ac_func" >&5
@@ -6720,329 +7047,6 @@
       conftest$ac_exeext conftest.$ac_ext
 fi
 
-echo "$as_me:$LINENO: checking whether byte ordering is bigendian" >&5
-echo $ECHO_N "checking whether byte ordering is bigendian... $ECHO_C" >&6
-if test "${ac_cv_c_bigendian+set}" = set; then
-  echo $ECHO_N "(cached) $ECHO_C" >&6
-else
-  # See if sys/param.h defines the BYTE_ORDER macro.
-cat >conftest.$ac_ext <<_ACEOF
-/* confdefs.h.  */
-_ACEOF
-cat confdefs.h >>conftest.$ac_ext
-cat >>conftest.$ac_ext <<_ACEOF
-/* end confdefs.h.  */
-#include <sys/types.h>
-#include <sys/param.h>
-
-int
-main ()
-{
-#if !BYTE_ORDER || !BIG_ENDIAN || !LITTLE_ENDIAN
- bogus endian macros
-#endif
-
-  ;
-  return 0;
-}
-_ACEOF
-rm -f conftest.$ac_objext
-if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
-  (eval $ac_compile) 2>conftest.er1
-  ac_status=$?
-  grep -v '^ *+' conftest.er1 >conftest.err
-  rm -f conftest.er1
-  cat conftest.err >&5
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); } &&
-	 { ac_try='test -z "$ac_c_werror_flag"
-			 || test ! -s conftest.err'
-  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
-  (eval $ac_try) 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; } &&
-	 { ac_try='test -s conftest.$ac_objext'
-  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
-  (eval $ac_try) 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; }; then
-  # It does; now see whether it defined to BIG_ENDIAN or not.
-cat >conftest.$ac_ext <<_ACEOF
-/* confdefs.h.  */
-_ACEOF
-cat confdefs.h >>conftest.$ac_ext
-cat >>conftest.$ac_ext <<_ACEOF
-/* end confdefs.h.  */
-#include <sys/types.h>
-#include <sys/param.h>
-
-int
-main ()
-{
-#if BYTE_ORDER != BIG_ENDIAN
- not big endian
-#endif
-
-  ;
-  return 0;
-}
-_ACEOF
-rm -f conftest.$ac_objext
-if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
-  (eval $ac_compile) 2>conftest.er1
-  ac_status=$?
-  grep -v '^ *+' conftest.er1 >conftest.err
-  rm -f conftest.er1
-  cat conftest.err >&5
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); } &&
-	 { ac_try='test -z "$ac_c_werror_flag"
-			 || test ! -s conftest.err'
-  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
-  (eval $ac_try) 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; } &&
-	 { ac_try='test -s conftest.$ac_objext'
-  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
-  (eval $ac_try) 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; }; then
-  ac_cv_c_bigendian=yes
-else
-  echo "$as_me: failed program was:" >&5
-sed 's/^/| /' conftest.$ac_ext >&5
-
-ac_cv_c_bigendian=no
-fi
-rm -f conftest.err conftest.$ac_objext conftest.$ac_ext
-else
-  echo "$as_me: failed program was:" >&5
-sed 's/^/| /' conftest.$ac_ext >&5
-
-# It does not; compile a test program.
-if test "$cross_compiling" = yes; then
-  # try to guess the endianness by grepping values into an object file
-  ac_cv_c_bigendian=unknown
-  cat >conftest.$ac_ext <<_ACEOF
-/* confdefs.h.  */
-_ACEOF
-cat confdefs.h >>conftest.$ac_ext
-cat >>conftest.$ac_ext <<_ACEOF
-/* end confdefs.h.  */
-short ascii_mm[] = { 0x4249, 0x4765, 0x6E44, 0x6961, 0x6E53, 0x7953, 0 };
-short ascii_ii[] = { 0x694C, 0x5454, 0x656C, 0x6E45, 0x6944, 0x6E61, 0 };
-void _ascii () { char *s = (char *) ascii_mm; s = (char *) ascii_ii; }
-short ebcdic_ii[] = { 0x89D3, 0xE3E3, 0x8593, 0x95C5, 0x89C4, 0x9581, 0 };
-short ebcdic_mm[] = { 0xC2C9, 0xC785, 0x95C4, 0x8981, 0x95E2, 0xA8E2, 0 };
-void _ebcdic () { char *s = (char *) ebcdic_mm; s = (char *) ebcdic_ii; }
-int
-main ()
-{
- _ascii (); _ebcdic ();
-  ;
-  return 0;
-}
-_ACEOF
-rm -f conftest.$ac_objext
-if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
-  (eval $ac_compile) 2>conftest.er1
-  ac_status=$?
-  grep -v '^ *+' conftest.er1 >conftest.err
-  rm -f conftest.er1
-  cat conftest.err >&5
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); } &&
-	 { ac_try='test -z "$ac_c_werror_flag"
-			 || test ! -s conftest.err'
-  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
-  (eval $ac_try) 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; } &&
-	 { ac_try='test -s conftest.$ac_objext'
-  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
-  (eval $ac_try) 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; }; then
-  if grep BIGenDianSyS conftest.$ac_objext >/dev/null ; then
-  ac_cv_c_bigendian=yes
-fi
-if grep LiTTleEnDian conftest.$ac_objext >/dev/null ; then
-  if test "$ac_cv_c_bigendian" = unknown; then
-    ac_cv_c_bigendian=no
-  else
-    # finding both strings is unlikely to happen, but who knows?
-    ac_cv_c_bigendian=unknown
-  fi
-fi
-else
-  echo "$as_me: failed program was:" >&5
-sed 's/^/| /' conftest.$ac_ext >&5
-
-fi
-rm -f conftest.err conftest.$ac_objext conftest.$ac_ext
-else
-  cat >conftest.$ac_ext <<_ACEOF
-/* confdefs.h.  */
-_ACEOF
-cat confdefs.h >>conftest.$ac_ext
-cat >>conftest.$ac_ext <<_ACEOF
-/* end confdefs.h.  */
-int
-main ()
-{
-  /* Are we little or big endian?  From Harbison&Steele.  */
-  union
-  {
-    long l;
-    char c[sizeof (long)];
-  } u;
-  u.l = 1;
-  exit (u.c[sizeof (long) - 1] == 1);
-}
-_ACEOF
-rm -f conftest$ac_exeext
-if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
-  (eval $ac_link) 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); } && { ac_try='./conftest$ac_exeext'
-  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
-  (eval $ac_try) 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; }; then
-  ac_cv_c_bigendian=no
-else
-  echo "$as_me: program exited with status $ac_status" >&5
-echo "$as_me: failed program was:" >&5
-sed 's/^/| /' conftest.$ac_ext >&5
-
-( exit $ac_status )
-ac_cv_c_bigendian=yes
-fi
-rm -f core *.core gmon.out bb.out conftest$ac_exeext conftest.$ac_objext conftest.$ac_ext
-fi
-fi
-rm -f conftest.err conftest.$ac_objext conftest.$ac_ext
-fi
-echo "$as_me:$LINENO: result: $ac_cv_c_bigendian" >&5
-echo "${ECHO_T}$ac_cv_c_bigendian" >&6
-case $ac_cv_c_bigendian in
-  yes)
-
-cat >>confdefs.h <<\_ACEOF
-#define WORDS_BIGENDIAN 1
-_ACEOF
- ;;
-  no)
-     ;;
-  *)
-    { { echo "$as_me:$LINENO: error: unknown endianness
-presetting ac_cv_c_bigendian=no (or yes) will help" >&5
-echo "$as_me: error: unknown endianness
-presetting ac_cv_c_bigendian=no (or yes) will help" >&2;}
-   { (exit 1); exit 1; }; } ;;
-esac
-
-
-# Make sure we can run config.sub.
-$ac_config_sub sun4 >/dev/null 2>&1 ||
-  { { echo "$as_me:$LINENO: error: cannot run $ac_config_sub" >&5
-echo "$as_me: error: cannot run $ac_config_sub" >&2;}
-   { (exit 1); exit 1; }; }
-
-echo "$as_me:$LINENO: checking build system type" >&5
-echo $ECHO_N "checking build system type... $ECHO_C" >&6
-if test "${ac_cv_build+set}" = set; then
-  echo $ECHO_N "(cached) $ECHO_C" >&6
-else
-  ac_cv_build_alias=$build_alias
-test -z "$ac_cv_build_alias" &&
-  ac_cv_build_alias=`$ac_config_guess`
-test -z "$ac_cv_build_alias" &&
-  { { echo "$as_me:$LINENO: error: cannot guess build type; you must specify one" >&5
-echo "$as_me: error: cannot guess build type; you must specify one" >&2;}
-   { (exit 1); exit 1; }; }
-ac_cv_build=`$ac_config_sub $ac_cv_build_alias` ||
-  { { echo "$as_me:$LINENO: error: $ac_config_sub $ac_cv_build_alias failed" >&5
-echo "$as_me: error: $ac_config_sub $ac_cv_build_alias failed" >&2;}
-   { (exit 1); exit 1; }; }
-
-fi
-echo "$as_me:$LINENO: result: $ac_cv_build" >&5
-echo "${ECHO_T}$ac_cv_build" >&6
-build=$ac_cv_build
-build_cpu=`echo $ac_cv_build | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\1/'`
-build_vendor=`echo $ac_cv_build | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\2/'`
-build_os=`echo $ac_cv_build | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\3/'`
-
-
-echo "$as_me:$LINENO: checking host system type" >&5
-echo $ECHO_N "checking host system type... $ECHO_C" >&6
-if test "${ac_cv_host+set}" = set; then
-  echo $ECHO_N "(cached) $ECHO_C" >&6
-else
-  ac_cv_host_alias=$host_alias
-test -z "$ac_cv_host_alias" &&
-  ac_cv_host_alias=$ac_cv_build_alias
-ac_cv_host=`$ac_config_sub $ac_cv_host_alias` ||
-  { { echo "$as_me:$LINENO: error: $ac_config_sub $ac_cv_host_alias failed" >&5
-echo "$as_me: error: $ac_config_sub $ac_cv_host_alias failed" >&2;}
-   { (exit 1); exit 1; }; }
-
-fi
-echo "$as_me:$LINENO: result: $ac_cv_host" >&5
-echo "${ECHO_T}$ac_cv_host" >&6
-host=$ac_cv_host
-host_cpu=`echo $ac_cv_host | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\1/'`
-host_vendor=`echo $ac_cv_host | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\2/'`
-host_os=`echo $ac_cv_host | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\3/'`
-
-
-
-case $host_cpu in
-     i*86 )
-
-cat >>confdefs.h <<\_ACEOF
-#define CPU_CISC 1
-_ACEOF
-
-
-cat >>confdefs.h <<\_ACEOF
-#define HAVE_X86 1
-_ACEOF
-;;
-	* )
-	# CPU_RISC is only supported for big endian machines.
-	if test "$ac_cv_c_bigendian" = "yes"; then
-
-cat >>confdefs.h <<\_ACEOF
-#define CPU_RISC 1
-_ACEOF
-
-	else
-	   cat >>confdefs.h <<\_ACEOF
-#define CPU_CISC 1
-_ACEOF
-
-	fi
-	;;
-esac
-
-case $host_os in
-  *cygwin*|*mingw* )
-	      EXE=.exe;;
-         * )  EXE="";;
-esac
-
-   # define executable suffix; this is needed for `make clean'
-
 echo "$as_me:$LINENO: checking whether to compile in debugging" >&5
 echo $ECHO_N "checking whether to compile in debugging... $ECHO_C" >&6
 # Check whether --enable-debug or --disable-debug was given.
@@ -7793,9 +7797,6 @@
 s,@INSTALL_PROGRAM@,$INSTALL_PROGRAM,;t t
 s,@INSTALL_SCRIPT@,$INSTALL_SCRIPT,;t t
 s,@INSTALL_DATA@,$INSTALL_DATA,;t t
-s,@RNG_OBJS@,$RNG_OBJS,;t t
-s,@CPP@,$CPP,;t t
-s,@EGREP@,$EGREP,;t t
 s,@build@,$build,;t t
 s,@build_cpu@,$build_cpu,;t t
 s,@build_vendor@,$build_vendor,;t t
@@ -7805,6 +7806,9 @@
 s,@host_vendor@,$host_vendor,;t t
 s,@host_os@,$host_os,;t t
 s,@EXE@,$EXE,;t t
+s,@RNG_OBJS@,$RNG_OBJS,;t t
+s,@CPP@,$CPP,;t t
+s,@EGREP@,$EGREP,;t t
 s,@GDOI_OBJS@,$GDOI_OBJS,;t t
 s,@LIBOBJS@,$LIBOBJS,;t t
 s,@LTLIBOBJS@,$LTLIBOBJS,;t t
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/configure.in zorg/third_party/srtp/configure.in
--- original/third_party/srtp/configure.in	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/configure.in	2010-11-26 16:21:58.352995000 +0100
@@ -12,6 +12,41 @@
 AC_PROG_CC
 AC_PROG_INSTALL
 
+dnl Check the byte order
+AC_C_BIGENDIAN
+
+AC_CANONICAL_HOST
+
+dnl check host_cpu type, set defines appropriately
+case $host_cpu in
+     i*86 )
+	AC_DEFINE(CPU_CISC, 1,
+	   [Define if building for a CISC machine (e.g. Intel).])
+        AC_DEFINE(HAVE_X86, 1,
+	   [Define to use X86 inlined assembly code]);; 
+	* )
+	# CPU_RISC is only supported for big endian machines.
+	if test "$ac_cv_c_bigendian" = "yes"; then
+	   AC_DEFINE(CPU_RISC, 1,
+	    [Define if building for a RISC machine (assume slow byte access).])
+	else
+	   AC_DEFINE(CPU_CISC, 1)
+	fi
+	;;
+esac	
+
+dnl Check if we are on a Windows platform.
+case $host_os in
+    *cygwin*|*mingw* ) 
+	EXE=.exe
+	HOST_IS_WINDOWS=yes
+	;;
+    * )
+	EXE=""
+	;;
+esac
+AC_SUBST(EXE)   # define executable suffix; this is needed for `make clean'
+
 
 AC_ARG_ENABLE(kernel-linux,
   [AS_HELP_STRING([--enable-kernel-linux],
@@ -26,7 +61,7 @@
 fi
 AC_MSG_RESULT($enable_kernel_linux)
 
-if test "$cross_compiling" != yes; then
+if test "$cross_compiling" != yes -a "$HOST_IS_WINDOWS" != yes; then
    dnl Check for /dev/urandom
    AC_CHECK_FILE(/dev/urandom, DEV_URANDOM=/dev/urandom,
       [AC_CHECK_FILE(/dev/random, DEV_URANDOM=/dev/random)])
@@ -76,7 +111,7 @@
 AC_TYPE_SIZE_T
 
 dnl Checks for library functions.
-AC_CHECK_FUNCS(socket inet_aton usleep)
+AC_CHECK_FUNCS(socket inet_aton usleep sigaction)
 
 dnl Find socket function if not found yet.
 if test "x$ac_cv_func_socket" = "xno"; then
@@ -95,38 +130,6 @@
     AC_MSG_RESULT(no))
 fi
 
-dnl Check the byte order
-AC_C_BIGENDIAN
-
-AC_CANONICAL_HOST
-
-dnl check host_cpu type, set defines appropriately
-case $host_cpu in
-     i*86 )
-	AC_DEFINE(CPU_CISC, 1,
-	   [Define if building for a CISC machine (e.g. Intel).])
-        AC_DEFINE(HAVE_X86, 1,
-	   [Define to use X86 inlined assembly code]);; 
-	* )
-	# CPU_RISC is only supported for big endian machines.
-	if test "$ac_cv_c_bigendian" = "yes"; then
-	   AC_DEFINE(CPU_RISC, 1,
-	    [Define if building for a RISC machine (assume slow byte access).])
-	else
-	   AC_DEFINE(CPU_CISC, 1)
-	fi
-	;;
-esac	
-
-dnl Check if we're on a Windows platform.
-case $host_os in
-  *cygwin*|*mingw* ) 
-	      EXE=.exe;;
-         * )  EXE="";;
-esac
-
-AC_SUBST(EXE)   # define executable suffix; this is needed for `make clean'
-
 AC_MSG_CHECKING(whether to compile in debugging)
 AC_ARG_ENABLE(debug,
   [AS_HELP_STRING([--disable-debug],
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/Makefile.in zorg/third_party/srtp/crypto/Makefile.in
--- original/third_party/srtp/crypto/Makefile.in	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/Makefile.in	2010-11-26 16:21:58.352995000 +0100
@@ -46,16 +46,23 @@
 	  test/kernel_driver$(EXE) test/aes_calc$(EXE) test/rand_gen$(EXE) \
 	  test/env$(EXE)
 
-# data values used to test the aes_calc application
+# data values used to test the aes_calc application for AES-128
+k128=000102030405060708090a0b0c0d0e0f
+p128=00112233445566778899aabbccddeeff
+c128=69c4e0d86a7b0430d8cdb78070b4c55a
+
+
+# data values used to test the aes_calc application for AES-256
+k256=000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f
+p256=00112233445566778899aabbccddeeff
+c256=8ea2b7ca516745bfeafc49904b496089
 
-k=000102030405060708090a0b0c0d0e0f
-p=00112233445566778899aabbccddeeff
-c=69c4e0d86a7b0430d8cdb78070b4c55a
 
 runtest: libcryptomodule.a $(testapp)
 	test/env$(EXE) # print out information on the build environment
 	@echo "running libcryptomodule test applications..."
-	test `test/aes_calc $k $p` = $c
+	test `test/aes_calc $(k128) $(p128)` = $(c128)
+	test `test/aes_calc $(k256) $(p256)` = $(c256)
 	test/cipher_driver$(EXE) -v >/dev/null
 	test/datatypes_driver$(EXE) -v >/dev/null
 	test/stat_driver$(EXE) >/dev/null
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/ae_xfm/xfm.c zorg/third_party/srtp/crypto/ae_xfm/xfm.c
--- original/third_party/srtp/crypto/ae_xfm/xfm.c	2008-01-24 11:23:43.399988000 +0100
+++ zorg/third_party/srtp/crypto/ae_xfm/xfm.c	2010-11-26 16:21:58.352995000 +0100
@@ -49,12 +49,12 @@
   } else {
 
     /* derive encryption and authentication keys from the input key */
-    status = hmac_init(&hmac_ctx, key, KEY_LEN);
+    status = libsrtp_hmac_init(&hmac_ctx, key, KEY_LEN);
     if (status) return status;
     status = hmac_compute(&hmac_ctx, "ENC", 3, ENC_KEY_LEN, enc_key);
     if (status) return status;
 
-    status = hmac_init(&hmac_ctx, key, KEY_LEN);
+    status = libsrtp_hmac_init(&hmac_ctx, key, KEY_LEN);
     if (status) return status;
     status = hmac_compute(&hmac_ctx, "MAC", 3, MAC_KEY_LEN, mac_key);
     if (status) return status;
@@ -63,7 +63,7 @@
     /* perform encryption and authentication */
 
     /* set aes key */
-    status = aes_cbc_context_init(&aes_ctx, key, direction_encrypt);
+    status = aes_cbc_context_init(&aes_ctx, key, ENC_KEY_LEN, direction_encrypt);
     if (status) return status;
 
     /* set iv */
@@ -76,7 +76,7 @@
     if (status) return status;
 
     /* authenticate clear and opaque data */
-    status = hmac_init(&hmac_ctx, mac_key, MAC_KEY_LEN);
+    status = libsrtp_hmac_init(&hmac_ctx, mac_key, MAC_KEY_LEN);
     if (status) return status;
 
     status = hmac_start(&hmac_ctx);
@@ -126,12 +126,12 @@
   } else {
 
     /* derive encryption and authentication keys from the input key */
-    status = hmac_init(&hmac_ctx, key, KEY_LEN);
+    status = libsrtp_hmac_init(&hmac_ctx, key, KEY_LEN);
     if (status) return status;
     status = hmac_compute(&hmac_ctx, "ENC", 3, ENC_KEY_LEN, enc_key);
     if (status) return status;
 
-    status = hmac_init(&hmac_ctx, key, KEY_LEN);
+    status = libsrtp_hmac_init(&hmac_ctx, key, KEY_LEN);
     if (status) return status;
     status = hmac_compute(&hmac_ctx, "MAC", 3, MAC_KEY_LEN, mac_key);
     if (status) return status;
@@ -139,7 +139,7 @@
     /* perform encryption and authentication */
 
     /* set aes key */
-    status = aes_cbc_context_init(&aes_ctx, key, direction_decrypt);
+    status = aes_cbc_context_init(&aes_ctx, key, ENC_KEY_LEN, direction_decrypt);
     if (status) return status;
 
     /* set iv */
@@ -152,7 +152,7 @@
     if (status) return status;
 
     /* authenticate clear and opaque data */
-    status = hmac_init(&hmac_ctx, mac_key, MAC_KEY_LEN);
+    status = libsrtp_hmac_init(&hmac_ctx, mac_key, MAC_KEY_LEN);
     if (status) return status;
 
     status = hmac_start(&hmac_ctx);
@@ -216,12 +216,12 @@
 #endif
 
     /* derive encryption and authentication keys from the input key */
-    status = hmac_init(&hmac_ctx, key, KEY_LEN);
+    status = libsrtp_hmac_init(&hmac_ctx, key, KEY_LEN);
     if (status) return status;
     status = hmac_compute(&hmac_ctx, "ENC", 3, ENC_KEY_LEN, enc_key);
     if (status) return status;
 
-    status = hmac_init(&hmac_ctx, key, KEY_LEN);
+    status = libsrtp_hmac_init(&hmac_ctx, key, KEY_LEN);
     if (status) return status;
     status = hmac_compute(&hmac_ctx, "MAC", 3, MAC_KEY_LEN, mac_key);
     if (status) return status;
@@ -230,7 +230,7 @@
     /* perform encryption and authentication */
 
     /* set aes key */
-    status = aes_cbc_context_init(&aes_ctx, key, direction_encrypt);
+    status = aes_cbc_context_init(&aes_ctx, key, ENC_KEY_LEN, direction_encrypt);
     if (status) return status;
 
     /* set iv */
@@ -261,7 +261,7 @@
      * authentication tag to the location immediately following the
      * ciphertext
      */
-    status = hmac_init(&hmac_ctx, mac_key, MAC_KEY_LEN);
+    status = libsrtp_hmac_init(&hmac_ctx, mac_key, MAC_KEY_LEN);
     if (status) return status;
 
     status = hmac_start(&hmac_ctx);
@@ -329,12 +329,12 @@
 #endif
 
     /* derive encryption and authentication keys from the input key */
-    status = hmac_init(&hmac_ctx, key, KEY_LEN);
+    status = libsrtp_hmac_init(&hmac_ctx, key, KEY_LEN);
     if (status) return status;
     status = hmac_compute(&hmac_ctx, "ENC", 3, ENC_KEY_LEN, enc_key);
     if (status) return status;
 
-    status = hmac_init(&hmac_ctx, key, KEY_LEN);
+    status = libsrtp_hmac_init(&hmac_ctx, key, KEY_LEN);
     if (status) return status;
     status = hmac_compute(&hmac_ctx, "MAC", 3, MAC_KEY_LEN, mac_key);
     if (status) return status;
@@ -359,7 +359,7 @@
      * compute the authentication tag for the clear and opaque data,
      * and write it to a temporary location
      */
-    status = hmac_init(&hmac_ctx, mac_key, MAC_KEY_LEN);
+    status = libsrtp_hmac_init(&hmac_ctx, mac_key, MAC_KEY_LEN);
     if (status) return status;
 
     status = hmac_start(&hmac_ctx);
@@ -400,7 +400,7 @@
     *opaque_len -= TAG_LEN;
 
     /* decrypt the confidential data */
-    status = aes_cbc_context_init(&aes_ctx, key, direction_decrypt);
+    status = aes_cbc_context_init(&aes_ctx, key, ENC_KEY_LEN, direction_decrypt);
     if (status) return status;
     status = aes_cbc_set_iv(&aes_ctx, iv);
     if (status) return status;
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/cipher/aes.c zorg/third_party/srtp/crypto/cipher/aes.c
--- original/third_party/srtp/crypto/cipher/aes.c	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/cipher/aes.c	2010-11-26 16:21:58.352995000 +0100
@@ -1358,51 +1358,50 @@
 
 extern debug_module_t mod_aes_icm;
 
-void
-aes_expand_encryption_key(const v128_t *key, 
-			  aes_expanded_key_t expanded_key) {
+static void
+aes_128_expand_encryption_key(const uint8_t *key, 
+			      aes_expanded_key_t *expanded_key) {
   int i;
   gf2_8 rc;
 
   /* initialize round constant */
   rc = 1;
 
-  expanded_key[0].v32[0] = key->v32[0];
-  expanded_key[0].v32[1] = key->v32[1];
-  expanded_key[0].v32[2] = key->v32[2];
-  expanded_key[0].v32[3] = key->v32[3];
+  expanded_key->num_rounds = 10;
+
+  v128_copy_octet_string(&expanded_key->round[0], key);
 
 #if 0
   debug_print(mod_aes_icm, 
-	      "expanded key[0]:  %s", v128_hex_string(&expanded_key[0])); 
+	      "expanded key[0]:  %s", v128_hex_string(&expanded_key->round[0])); 
 #endif
 
   /* loop over round keys */
   for (i=1; i < 11; i++) {
 
     /* munge first word of round key */
-    expanded_key[i].v8[0] = aes_sbox[expanded_key[i-1].v8[13]] ^ rc;
-    expanded_key[i].v8[1] = aes_sbox[expanded_key[i-1].v8[14]];
-    expanded_key[i].v8[2] = aes_sbox[expanded_key[i-1].v8[15]];
-    expanded_key[i].v8[3] = aes_sbox[expanded_key[i-1].v8[12]];
+    expanded_key->round[i].v8[0] = aes_sbox[expanded_key->round[i-1].v8[13]] ^ rc;
+    expanded_key->round[i].v8[1] = aes_sbox[expanded_key->round[i-1].v8[14]];
+    expanded_key->round[i].v8[2] = aes_sbox[expanded_key->round[i-1].v8[15]];
+    expanded_key->round[i].v8[3] = aes_sbox[expanded_key->round[i-1].v8[12]];
 
-    expanded_key[i].v32[0] ^=  expanded_key[i-1].v32[0];
+    expanded_key->round[i].v32[0] ^=  expanded_key->round[i-1].v32[0];
 
     /* set remaining 32 bit words to the exor of the one previous with
      * the one four words previous */
 
-    expanded_key[i].v32[1] =
-      expanded_key[i].v32[0] ^ expanded_key[i-1].v32[1];
+    expanded_key->round[i].v32[1] =
+      expanded_key->round[i].v32[0] ^ expanded_key->round[i-1].v32[1];
 
-    expanded_key[i].v32[2] =
-      expanded_key[i].v32[1] ^ expanded_key[i-1].v32[2];
+    expanded_key->round[i].v32[2] =
+      expanded_key->round[i].v32[1] ^ expanded_key->round[i-1].v32[2];
 
-    expanded_key[i].v32[3] =
-      expanded_key[i].v32[2] ^ expanded_key[i-1].v32[3];
+    expanded_key->round[i].v32[3] =
+      expanded_key->round[i].v32[2] ^ expanded_key->round[i-1].v32[3];
 
 #if 0
 	debug_print2(mod_aes_icm, 
-				"expanded key[%d]:  %s", i,v128_hex_string(&expanded_key[i])); 
+				"expanded key[%d]:  %s", i,v128_hex_string(&expanded_key->round[i])); 
 #endif
 
     /* modify round constant */
@@ -1411,19 +1410,107 @@
   }
 }
 
-void
-aes_expand_decryption_key(const v128_t *key, 
-			  aes_expanded_key_t expanded_key) {
+static void
+aes_256_expand_encryption_key(const unsigned char *key, 
+			      aes_expanded_key_t *expanded_key) {
   int i;
+  gf2_8 rc;
 
-  aes_expand_encryption_key(key, expanded_key);
+  /* initialize round constant */
+  rc = 1;
+
+  expanded_key->num_rounds = 14;
+
+  v128_copy_octet_string(&expanded_key->round[0], key);
+  v128_copy_octet_string(&expanded_key->round[1], key+16);
+
+#if 0
+  debug_print(mod_aes_icm, 
+	      "expanded key[0]:  %s", v128_hex_string(&expanded_key->round[0])); 
+  debug_print(mod_aes_icm, 
+	      "expanded key[1]:  %s", v128_hex_string(&expanded_key->round[1])); 
+#endif
+
+  /* loop over rest of round keys */
+  for (i=2; i < 15; i++) {
+
+    /* munge first word of round key */
+    if ((i & 1) == 0) {
+      expanded_key->round[i].v8[0] = aes_sbox[expanded_key->round[i-1].v8[13]] ^ rc;
+      expanded_key->round[i].v8[1] = aes_sbox[expanded_key->round[i-1].v8[14]];
+      expanded_key->round[i].v8[2] = aes_sbox[expanded_key->round[i-1].v8[15]];
+      expanded_key->round[i].v8[3] = aes_sbox[expanded_key->round[i-1].v8[12]];
+
+      /* modify round constant */
+      rc = gf2_8_shift(rc);
+    }
+    else {
+      expanded_key->round[i].v8[0] = aes_sbox[expanded_key->round[i-1].v8[12]];
+      expanded_key->round[i].v8[1] = aes_sbox[expanded_key->round[i-1].v8[13]];
+      expanded_key->round[i].v8[2] = aes_sbox[expanded_key->round[i-1].v8[14]];
+      expanded_key->round[i].v8[3] = aes_sbox[expanded_key->round[i-1].v8[15]];
+    }
+
+    expanded_key->round[i].v32[0] ^=  expanded_key->round[i-2].v32[0];
+
+    /* set remaining 32 bit words to the exor of the one previous with
+     * the one eight words previous */
+
+    expanded_key->round[i].v32[1] =
+      expanded_key->round[i].v32[0] ^ expanded_key->round[i-2].v32[1];
+
+    expanded_key->round[i].v32[2] =
+      expanded_key->round[i].v32[1] ^ expanded_key->round[i-2].v32[2];
+
+    expanded_key->round[i].v32[3] =
+      expanded_key->round[i].v32[2] ^ expanded_key->round[i-2].v32[3];
+
+#if 0
+    debug_print2(mod_aes_icm, 
+		 "expanded key[%d]:  %s", i,v128_hex_string(&expanded_key->round[i])); 
+#endif
+
+  }
+}
+
+err_status_t
+aes_expand_encryption_key(const uint8_t *key, 
+			  int key_len,
+			  aes_expanded_key_t *expanded_key) {
+  if (key_len == 16) {
+    aes_128_expand_encryption_key(key, expanded_key);
+    return err_status_ok;
+  }
+  else if (key_len == 24) {
+    /* AES-192 not yet supported */
+    return err_status_bad_param;
+  }
+  else if (key_len == 32) {
+    aes_256_expand_encryption_key(key, expanded_key);
+    return err_status_ok;
+  }
+  else
+    return err_status_bad_param;
+}
+
+err_status_t
+aes_expand_decryption_key(const uint8_t *key, 
+			  int key_len,
+			  aes_expanded_key_t *expanded_key) {
+  int i;
+  err_status_t status;
+  int num_rounds = expanded_key->num_rounds;
+
+  status = aes_expand_encryption_key(key, key_len, expanded_key);
+  if (status)
+    return status;
 
   /* invert the order of the round keys */
-  for (i=0; i < 5; i++) {
+  for (i=0; i < num_rounds/2; i++) {
     v128_t tmp;
-    v128_copy(&tmp, &expanded_key[10-i]);
-    v128_copy(&expanded_key[10-i], &expanded_key[i]);
-    v128_copy(&expanded_key[i], &tmp);
+    v128_copy(&tmp, &expanded_key->round[num_rounds-i]);
+    v128_copy(&expanded_key->round[num_rounds-i], &expanded_key->round[i]);
+    v128_copy(&expanded_key->round[i], &tmp);
   }
 
   /* 
@@ -1434,33 +1521,33 @@
    * followed by the T4 table (which cancels out the use of the sbox
    * in the U-tables)
    */
-  for (i=1; i < 10; i++) {
+  for (i=1; i < num_rounds; i++) {
 #ifdef CPU_RISC
     uint32_t tmp;
 
-    tmp = expanded_key[i].v32[0];
-    expanded_key[i].v32[0] = 
+    tmp = expanded_key->round[i].v32[0];
+    expanded_key->round[i].v32[0] = 
       U0[T4[(tmp >> 24)       ] & 0xff] ^ 
       U1[T4[(tmp >> 16) & 0xff] & 0xff] ^ 
       U2[T4[(tmp >> 8)  & 0xff] & 0xff] ^ 
       U3[T4[(tmp)       & 0xff] & 0xff];
 
-    tmp = expanded_key[i].v32[1];
-    expanded_key[i].v32[1] = 
+    tmp = expanded_key->round[i].v32[1];
+    expanded_key->round[i].v32[1] = 
       U0[T4[(tmp >> 24)       ] & 0xff] ^ 
       U1[T4[(tmp >> 16) & 0xff] & 0xff] ^ 
       U2[T4[(tmp >> 8)  & 0xff] & 0xff] ^ 
       U3[T4[(tmp)       & 0xff] & 0xff];
 
-    tmp = expanded_key[i].v32[2];
-    expanded_key[i].v32[2] = 
+    tmp = expanded_key->round[i].v32[2];
+    expanded_key->round[i].v32[2] = 
       U0[T4[(tmp >> 24)       ] & 0xff] ^ 
       U1[T4[(tmp >> 16) & 0xff] & 0xff] ^ 
       U2[T4[(tmp >> 8)  & 0xff] & 0xff] ^ 
       U3[T4[(tmp)       & 0xff] & 0xff];
 
-    tmp = expanded_key[i].v32[3];
-    expanded_key[i].v32[3] = 
+    tmp = expanded_key->round[i].v32[3];
+    expanded_key->round[i].v32[3] = 
       U0[T4[(tmp >> 24)       ] & 0xff] ^ 
       U1[T4[(tmp >> 16) & 0xff] & 0xff] ^ 
       U2[T4[(tmp >> 8)  & 0xff] & 0xff] ^ 
@@ -1469,33 +1556,35 @@
 
     uint32_t c0, c1, c2, c3;
 
-    c0 = U0[aes_sbox[expanded_key[i].v8[0]]] 
-       ^ U1[aes_sbox[expanded_key[i].v8[1]]] 
-       ^ U2[aes_sbox[expanded_key[i].v8[2]]] 
-       ^ U3[aes_sbox[expanded_key[i].v8[3]]];
+    c0 = U0[aes_sbox[expanded_key->round[i].v8[0]]] 
+       ^ U1[aes_sbox[expanded_key->round[i].v8[1]]] 
+       ^ U2[aes_sbox[expanded_key->round[i].v8[2]]] 
+       ^ U3[aes_sbox[expanded_key->round[i].v8[3]]];
 
-    c1 = U0[aes_sbox[expanded_key[i].v8[4]]] 
-       ^ U1[aes_sbox[expanded_key[i].v8[5]]] 
-       ^ U2[aes_sbox[expanded_key[i].v8[6]]] 
-       ^ U3[aes_sbox[expanded_key[i].v8[7]]];
+    c1 = U0[aes_sbox[expanded_key->round[i].v8[4]]] 
+       ^ U1[aes_sbox[expanded_key->round[i].v8[5]]] 
+       ^ U2[aes_sbox[expanded_key->round[i].v8[6]]] 
+       ^ U3[aes_sbox[expanded_key->round[i].v8[7]]];
 
-    c2 = U0[aes_sbox[expanded_key[i].v8[8]]] 
-       ^ U1[aes_sbox[expanded_key[i].v8[9]]] 
-       ^ U2[aes_sbox[expanded_key[i].v8[10]]] 
-       ^ U3[aes_sbox[expanded_key[i].v8[11]]];
+    c2 = U0[aes_sbox[expanded_key->round[i].v8[8]]] 
+       ^ U1[aes_sbox[expanded_key->round[i].v8[9]]] 
+       ^ U2[aes_sbox[expanded_key->round[i].v8[10]]] 
+       ^ U3[aes_sbox[expanded_key->round[i].v8[11]]];
 
-    c3 = U0[aes_sbox[expanded_key[i].v8[12]]] 
-       ^ U1[aes_sbox[expanded_key[i].v8[13]]] 
-       ^ U2[aes_sbox[expanded_key[i].v8[14]]] 
-       ^ U3[aes_sbox[expanded_key[i].v8[15]]];
+    c3 = U0[aes_sbox[expanded_key->round[i].v8[12]]] 
+       ^ U1[aes_sbox[expanded_key->round[i].v8[13]]] 
+       ^ U2[aes_sbox[expanded_key->round[i].v8[14]]] 
+       ^ U3[aes_sbox[expanded_key->round[i].v8[15]]];
 
-    expanded_key[i].v32[0] = c0;
-    expanded_key[i].v32[1] = c1;
-    expanded_key[i].v32[2] = c2;
-    expanded_key[i].v32[3] = c3;
+    expanded_key->round[i].v32[0] = c0;
+    expanded_key->round[i].v32[1] = c1;
+    expanded_key->round[i].v32[2] = c2;
+    expanded_key->round[i].v32[3] = c3;
 
 #endif     
   }
+
+  return err_status_ok;
 }
 
 #ifdef CPU_CISC
@@ -1910,42 +1999,67 @@
 
 
 void
-aes_encrypt(v128_t *plaintext, const aes_expanded_key_t exp_key) {
+aes_encrypt(v128_t *plaintext, const aes_expanded_key_t *exp_key) {
 
   /* add in the subkey */
-  v128_xor_eq(plaintext, exp_key + 0);
-
-  /* now do nine rounds */
-  aes_round(plaintext, exp_key + 1);
-  aes_round(plaintext, exp_key + 2);
-  aes_round(plaintext, exp_key + 3);
-  aes_round(plaintext, exp_key + 4);
-  aes_round(plaintext, exp_key + 5);
-  aes_round(plaintext, exp_key + 6);
-  aes_round(plaintext, exp_key + 7);
-  aes_round(plaintext, exp_key + 8);  
-  aes_round(plaintext, exp_key + 9);
-  /* the last round is different */
+  v128_xor_eq(plaintext, &exp_key->round[0]);
 
- aes_final_round(plaintext, exp_key + 10);  
+  /* now do the rounds */
+  aes_round(plaintext, &exp_key->round[1]);
+  aes_round(plaintext, &exp_key->round[2]);
+  aes_round(plaintext, &exp_key->round[3]);
+  aes_round(plaintext, &exp_key->round[4]);
+  aes_round(plaintext, &exp_key->round[5]);
+  aes_round(plaintext, &exp_key->round[6]);
+  aes_round(plaintext, &exp_key->round[7]);
+  aes_round(plaintext, &exp_key->round[8]);  
+  aes_round(plaintext, &exp_key->round[9]);
+  if (exp_key->num_rounds == 10) {
+    aes_final_round(plaintext, &exp_key->round[10]);
+  }
+  else if (exp_key->num_rounds == 12) {
+    aes_round(plaintext, &exp_key->round[10]);  
+    aes_round(plaintext, &exp_key->round[11]);
+    aes_final_round(plaintext, &exp_key->round[12]);
+  }
+  else if (exp_key->num_rounds == 14) {
+    aes_round(plaintext, &exp_key->round[10]);  
+    aes_round(plaintext, &exp_key->round[11]);
+    aes_round(plaintext, &exp_key->round[12]);  
+    aes_round(plaintext, &exp_key->round[13]);
+    aes_final_round(plaintext, &exp_key->round[14]);  
+  }
 }
 
 void
-aes_decrypt(v128_t *plaintext, const aes_expanded_key_t exp_key) {
+aes_decrypt(v128_t *plaintext, const aes_expanded_key_t *exp_key) {
 
   /* add in the subkey */
-  v128_xor_eq(plaintext, exp_key + 0);
+  v128_xor_eq(plaintext, &exp_key->round[0]);
 
-  /* now do nine rounds */
-  aes_inv_round(plaintext, exp_key + 1);
-  aes_inv_round(plaintext, exp_key + 2);
-  aes_inv_round(plaintext, exp_key + 3);
-  aes_inv_round(plaintext, exp_key + 4);
-  aes_inv_round(plaintext, exp_key + 5);
-  aes_inv_round(plaintext, exp_key + 6);
-  aes_inv_round(plaintext, exp_key + 7);
-  aes_inv_round(plaintext, exp_key + 8);  
-  aes_inv_round(plaintext, exp_key + 9);
-  /* the last round is different */
-  aes_inv_final_round(plaintext, exp_key + 10);  
+  /* now do the rounds */
+  aes_inv_round(plaintext, &exp_key->round[1]);
+  aes_inv_round(plaintext, &exp_key->round[2]);
+  aes_inv_round(plaintext, &exp_key->round[3]);
+  aes_inv_round(plaintext, &exp_key->round[4]);
+  aes_inv_round(plaintext, &exp_key->round[5]);
+  aes_inv_round(plaintext, &exp_key->round[6]);
+  aes_inv_round(plaintext, &exp_key->round[7]);
+  aes_inv_round(plaintext, &exp_key->round[8]);  
+  aes_inv_round(plaintext, &exp_key->round[9]);
+  if (exp_key->num_rounds == 10) {
+    aes_inv_final_round(plaintext, &exp_key->round[10]);  
+  }
+  else if (exp_key->num_rounds == 12) {
+    aes_inv_round(plaintext, &exp_key->round[10]);  
+    aes_inv_round(plaintext, &exp_key->round[11]);
+    aes_inv_final_round(plaintext, &exp_key->round[12]);  
+  }
+  else if (exp_key->num_rounds == 14) {
+    aes_inv_round(plaintext, &exp_key->round[10]);  
+    aes_inv_round(plaintext, &exp_key->round[11]);
+    aes_inv_round(plaintext, &exp_key->round[12]);  
+    aes_inv_round(plaintext, &exp_key->round[13]);
+    aes_inv_final_round(plaintext, &exp_key->round[14]);  
+  }
 }
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/cipher/aes_cbc.c zorg/third_party/srtp/crypto/cipher/aes_cbc.c
--- original/third_party/srtp/crypto/cipher/aes_cbc.c	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/cipher/aes_cbc.c	2010-11-26 16:21:58.352995000 +0100
@@ -63,10 +63,10 @@
   debug_print(mod_aes_cbc, 
 	      "allocating cipher with key length %d", key_len);
 
-  if (key_len != 16)
+  if (key_len != 16 && key_len != 24 && key_len != 32)
     return err_status_bad_param;
   
-  /* allocate memory a cipher of type aes_icm */
+  /* allocate memory a cipher of type aes_cbc */
   tmp = (sizeof(aes_cbc_ctx_t) + sizeof(cipher_t));
   pointer = (uint8_t*)crypto_alloc(tmp);
   if (pointer == NULL) 
@@ -104,23 +104,24 @@
 }
 
 err_status_t
-aes_cbc_context_init(aes_cbc_ctx_t *c, const uint8_t *key, 
+aes_cbc_context_init(aes_cbc_ctx_t *c, const uint8_t *key, int key_len,
 		     cipher_direction_t dir) {
-  v128_t tmp_key;
-
-  /* set tmp_key (for alignment) */
-  v128_copy_octet_string(&tmp_key, key);
+  err_status_t status;
 
   debug_print(mod_aes_cbc, 
-	      "key:  %s", v128_hex_string(&tmp_key)); 
+	      "key:  %s", octet_string_hex_string(key, key_len)); 
 
   /* expand key for the appropriate direction */
   switch (dir) {
   case (direction_encrypt):
-    aes_expand_encryption_key(&tmp_key, c->expanded_key);
+    status = aes_expand_encryption_key(key, key_len, &c->expanded_key);
+    if (status)
+      return status;
     break;
   case (direction_decrypt):
-    aes_expand_decryption_key(&tmp_key, c->expanded_key);
+    status = aes_expand_decryption_key(key, key_len, &c->expanded_key);
+    if (status)
+      return status;
     break;
   default:
     return err_status_bad_param;
@@ -181,7 +182,7 @@
     debug_print(mod_aes_cbc, "inblock:  %s", 
 	      v128_hex_string(&c->state));
 
-    aes_encrypt(&c->state, c->expanded_key);
+    aes_encrypt(&c->state, &c->expanded_key);
 
     debug_print(mod_aes_cbc, "outblock: %s", 
 	      v128_hex_string(&c->state));
@@ -236,7 +237,7 @@
 	      v128_hex_string(&state));
     
     /* decrypt state */
-    aes_decrypt(&state, c->expanded_key);
+    aes_decrypt(&state, &c->expanded_key);
 
     debug_print(mod_aes_cbc, "outblock: %s", 
 	      v128_hex_string(&state));
@@ -332,7 +333,7 @@
 aes_cbc_description[] = "aes cipher block chaining (cbc) mode";
 
 /*
- * Test case 0 is derived from FIPS 197 Appendix A; it uses an
+ * Test case 0 is derived from FIPS 197 Appendix C; it uses an
  * all-zero IV, so that the first block encryption matches the test
  * case in that appendix.  This property provides a check of the base
  * AES encryption and decryption algorithms; if CBC fails on some
@@ -428,6 +429,100 @@
   &aes_cbc_test_case_0                    /* pointer to next testcase */
 };
 
+/*
+ * Test case 2 is like test case 0, but for 256-bit keys. (FIPS 197 
+ * appendix C.3).
+ */
+
+
+uint8_t aes_cbc_test_case_2_key[32] = {
+  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
+  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
+  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 
+  0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
+};
+
+uint8_t aes_cbc_test_case_2_plaintext[64] =  {
+  0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
+  0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff 
+};
+
+uint8_t aes_cbc_test_case_2_ciphertext[80] = {
+  0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf,
+  0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89,  
+  0x72, 0x72, 0x6e, 0xe7, 0x71, 0x39, 0xbf, 0x11,
+  0xe5, 0x40, 0xe2, 0x7c, 0x54, 0x65, 0x1d, 0xee
+};
+
+uint8_t aes_cbc_test_case_2_iv[16] = {
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+};
+
+cipher_test_case_t aes_cbc_test_case_2 = {
+  32,                                    /* octets in key            */
+  aes_cbc_test_case_2_key,               /* key                      */
+  aes_cbc_test_case_2_iv,                /* initialization vector    */
+  16,                                    /* octets in plaintext      */
+  aes_cbc_test_case_2_plaintext,         /* plaintext                */
+  32,                                    /* octets in ciphertext     */
+  aes_cbc_test_case_2_ciphertext,        /* ciphertext               */
+  &aes_cbc_test_case_1                   /* pointer to next testcase */
+};
+
+
+/*
+ * this test case is taken directly from Appendix F.2 of NIST Special
+ * Publication SP 800-38A
+ */
+
+uint8_t aes_cbc_test_case_3_key[32] = {
+  0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
+  0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
+  0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
+  0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
+};
+
+uint8_t aes_cbc_test_case_3_plaintext[64] =  {
+  0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 
+  0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
+  0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 
+  0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
+  0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
+  0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
+  0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 
+  0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
+};
+
+uint8_t aes_cbc_test_case_3_ciphertext[80] = {
+  0xf5, 0x8c, 0x4c, 0x04, 0xd6, 0xe5, 0xf1, 0xba,
+  0x77, 0x9e, 0xab, 0xfb, 0x5f, 0x7b, 0xfb, 0xd6,
+  0x9c, 0xfc, 0x4e, 0x96, 0x7e, 0xdb, 0x80, 0x8d,
+  0x67, 0x9f, 0x77, 0x7b, 0xc6, 0x70, 0x2c, 0x7d,
+  0x39, 0xf2, 0x33, 0x69, 0xa9, 0xd9, 0xba, 0xcf,
+  0xa5, 0x30, 0xe2, 0x63, 0x04, 0x23, 0x14, 0x61,
+  0xb2, 0xeb, 0x05, 0xe2, 0xc3, 0x9b, 0xe9, 0xfc,
+  0xda, 0x6c, 0x19, 0x07, 0x8c, 0x6a, 0x9d, 0x1b,
+  0xfb, 0x98, 0x20, 0x2c, 0x45, 0xb2, 0xe4, 0xa0,
+  0x63, 0xc4, 0x68, 0xba, 0x84, 0x39, 0x16, 0x5a
+};
+
+uint8_t aes_cbc_test_case_3_iv[16] = {
+  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
+  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
+};
+
+cipher_test_case_t aes_cbc_test_case_3 = {
+  32,                                    /* octets in key            */
+  aes_cbc_test_case_3_key,               /* key                      */
+  aes_cbc_test_case_3_iv,                /* initialization vector    */
+  64,                                    /* octets in plaintext      */
+  aes_cbc_test_case_3_plaintext,         /* plaintext                */
+  80,                                    /* octets in ciphertext     */
+  aes_cbc_test_case_3_ciphertext,        /* ciphertext               */
+  &aes_cbc_test_case_2                    /* pointer to next testcase */
+};
+
 cipher_type_t aes_cbc = {
   (cipher_alloc_func_t)          aes_cbc_alloc,
   (cipher_dealloc_func_t)        aes_cbc_dealloc,  
@@ -437,8 +532,9 @@
   (cipher_set_iv_func_t)         aes_cbc_set_iv,
   (char *)                       aes_cbc_description,
   (int)                          0,   /* instance count */
-  (cipher_test_case_t *)        &aes_cbc_test_case_0,
-  (debug_module_t *)            &mod_aes_cbc
+  (cipher_test_case_t *)        &aes_cbc_test_case_3,
+  (debug_module_t *)            &mod_aes_cbc,
+  (cipher_type_id_t)             AES_CBC
 };
 
 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/cipher/aes_icm.c zorg/third_party/srtp/crypto/cipher/aes_icm.c
--- original/third_party/srtp/crypto/cipher/aes_icm.c	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/cipher/aes_icm.c	2010-11-26 16:21:58.352995000 +0100
@@ -101,12 +101,13 @@
   /*
    * Ismacryp, for example, uses 16 byte key + 8 byte 
    * salt  so this function is called with key_len = 24.
-   * The check for key_len = 30 does not apply. Our usage
+   * The check for key_len = 30/38/46 does not apply. Our usage
    * of aes functions with key_len = values other than 30
    * has not broken anything. Don't know what would be the
    * effect of skipping this check for srtp in general.
    */
-  if (!forIsmacryp && key_len != 30)
+  if (!(forIsmacryp && key_len > 16 && key_len < 30) &&
+      key_len != 30 && key_len != 38 && key_len != 46)
     return err_status_bad_param;
 
   /* allocate memory a cipher of type aes_icm */
@@ -162,30 +163,38 @@
  */
 
 err_status_t
-aes_icm_context_init(aes_icm_ctx_t *c, const uint8_t *key) {
-  v128_t tmp_key;
+aes_icm_context_init(aes_icm_ctx_t *c, const uint8_t *key, int key_len) {
+  err_status_t status;
+  int base_key_len;
+
+  if (key_len > 16 && key_len < 30) /* Ismacryp */
+    base_key_len = 16;
+  else if (key_len == 30 || key_len == 38 || key_len == 46)
+    base_key_len = key_len - 14;
+  else
+    return err_status_bad_param;
 
   /* set counter and initial values to 'offset' value */
-  /* FIX!!! this assumes the salt is at key + 16, and thus that the */
-  /* FIX!!! cipher key length is 16!  Also note this copies past the
-            end of the 'key' array by 2 bytes! */
-  v128_copy_octet_string(&c->counter, key + 16);
-  v128_copy_octet_string(&c->offset, key + 16);
+  /* Note this copies past the end of the 'key' array by 2 bytes! */
+  v128_copy_octet_string(&c->counter, key + base_key_len);
+  v128_copy_octet_string(&c->offset, key + base_key_len);
 
   /* force last two octets of the offset to zero (for srtp compatibility) */
   c->offset.v8[14] = c->offset.v8[15] = 0;
   c->counter.v8[14] = c->counter.v8[15] = 0;
   
-  /* set tmp_key (for alignment) */
-  v128_copy_octet_string(&tmp_key, key);
-
   debug_print(mod_aes_icm, 
-	      "key:  %s", v128_hex_string(&tmp_key)); 
+	      "key:  %s", octet_string_hex_string(key, base_key_len)); 
   debug_print(mod_aes_icm, 
 	      "offset: %s", v128_hex_string(&c->offset)); 
 
   /* expand key */
-  aes_expand_encryption_key(&tmp_key, c->expanded_key);
+  status = aes_expand_encryption_key(key, base_key_len, &c->expanded_key);
+  if (status) {
+    v128_set_to_zero(&c->counter);
+    v128_set_to_zero(&c->offset);
+    return status;
+  }
 
   /* indicate that the keystream_buffer is empty */
   c->bytes_in_buffer = 0;
@@ -210,7 +219,7 @@
 							  ((high32(octet_num) & 0x0f)<<(32-4)) |
 							   (low32(octet_num) >> 4));
 #else
-  int tail_num       = octet_num % 16;
+  int tail_num       = (int)(octet_num % 16);
   uint64_t block_num = octet_num / 16;
 #endif
   
@@ -231,7 +240,7 @@
   /* fill keystream buffer, if needed */
   if (tail_num) {
     v128_copy(&c->keystream_buffer, &c->counter);
-    aes_encrypt(&c->keystream_buffer, c->expanded_key);
+    aes_encrypt(&c->keystream_buffer, &c->expanded_key);
     c->bytes_in_buffer = sizeof(v128_t);
 
     debug_print(mod_aes_icm, "counter:    %s", 
@@ -287,7 +296,7 @@
 aes_icm_advance_ismacryp(aes_icm_ctx_t *c, uint8_t forIsmacryp) {
   /* fill buffer with new keystream */
   v128_copy(&c->keystream_buffer, &c->counter);
-  aes_encrypt(&c->keystream_buffer, c->expanded_key);
+  aes_encrypt(&c->keystream_buffer, &c->expanded_key);
   c->bytes_in_buffer = sizeof(v128_t);
 
   debug_print(mod_aes_icm, "counter:    %s", 
@@ -491,6 +500,46 @@
   NULL                                   /* pointer to next testcase */
 };
 
+uint8_t aes_icm_test_case_1_key[46] = {
+  0x57, 0xf8, 0x2f, 0xe3, 0x61, 0x3f, 0xd1, 0x70,
+  0xa8, 0x5e, 0xc9, 0x3c, 0x40, 0xb1, 0xf0, 0x92,
+  0x2e, 0xc4, 0xcb, 0x0d, 0xc0, 0x25, 0xb5, 0x82,
+  0x72, 0x14, 0x7c, 0xc4, 0x38, 0x94, 0x4a, 0x98,
+  0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
+  0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd
+};
+
+uint8_t aes_icm_test_case_1_nonce[16] = {
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+};
+
+uint8_t aes_icm_test_case_1_plaintext[32] =  {
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+};
+
+uint8_t aes_icm_test_case_1_ciphertext[32] = {
+  0x92, 0xbd, 0xd2, 0x8a, 0x93, 0xc3, 0xf5, 0x25,
+  0x11, 0xc6, 0x77, 0xd0, 0x8b, 0x55, 0x15, 0xa4,
+  0x9d, 0xa7, 0x1b, 0x23, 0x78, 0xa8, 0x54, 0xf6,
+  0x70, 0x50, 0x75, 0x6d, 0xed, 0x16, 0x5b, 0xac
+};
+
+cipher_test_case_t aes_icm_test_case_1 = {
+  46,                                    /* octets in key            */
+  aes_icm_test_case_1_key,               /* key                      */
+  aes_icm_test_case_1_nonce,             /* packet index             */
+  32,                                    /* octets in plaintext      */
+  aes_icm_test_case_1_plaintext,         /* plaintext                */
+  32,                                    /* octets in ciphertext     */
+  aes_icm_test_case_1_ciphertext,        /* ciphertext               */
+  &aes_icm_test_case_0                   /* pointer to next testcase */
+};
+
+
 
 /*
  * note: the encrypt function is identical to the decrypt function
@@ -505,7 +554,8 @@
   (cipher_set_iv_func_t)         aes_icm_set_iv,
   (char *)                       aes_icm_description,
   (int)                          0,   /* instance count */
-  (cipher_test_case_t *)        &aes_icm_test_case_0,
-  (debug_module_t *)            &mod_aes_icm
+  (cipher_test_case_t *)        &aes_icm_test_case_1,
+  (debug_module_t *)            &mod_aes_icm,
+  (cipher_type_id_t)             AES_ICM
 };
 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/cipher/cipher.c zorg/third_party/srtp/crypto/cipher/cipher.c
--- original/third_party/srtp/crypto/cipher/cipher.c	2009-04-28 21:38:43.971077000 +0200
+++ zorg/third_party/srtp/crypto/cipher/cipher.c	2010-11-26 16:21:58.352995000 +0100
@@ -71,8 +71,8 @@
 }
 
 /* 
- * cipher_type_self_test(ct) tests a cipher of type ct against test cases
- * provided in an array of values of key, salt, xtd_seq_num_t,
+ * cipher_type_test(ct, test_data) tests a cipher of type ct against
+ * test cases provided in a list test_data of values of key, salt, iv,
  * plaintext, and ciphertext that is known to be good
  */
 
@@ -81,8 +81,8 @@
 #define MAX_KEY_LEN          64
 
 err_status_t
-cipher_type_self_test(const cipher_type_t *ct) {
-  const cipher_test_case_t *test_case = ct->test_data;
+cipher_type_test(const cipher_type_t *ct, const cipher_test_case_t *test_data) {
+  const cipher_test_case_t *test_case = test_data;
   cipher_t *c;
   err_status_t status;
   uint8_t buffer[SELF_TEST_BUF_OCTETS];
@@ -260,7 +260,7 @@
   /* now run some random invertibility tests */
 
   /* allocate cipher, using paramaters from the first test case */
-  test_case = ct->test_data;
+  test_case = test_data;
   status = cipher_type_alloc(ct, &c, test_case->key_length_octets);
   if (status)
       return status;
@@ -360,12 +360,24 @@
         
   }
 
-  cipher_dealloc(c);
+  status = cipher_dealloc(c);
+  if (status)
+    return status;
 
   return err_status_ok;
 }
 
 
+/* 
+ * cipher_type_self_test(ct) performs cipher_type_test on ct's internal
+ * list of test data.
+ */
+
+err_status_t
+cipher_type_self_test(const cipher_type_t *ct) {
+  return cipher_type_test(ct, ct->test_data);
+}
+
 /*
  * cipher_bits_per_second(c, l, t) computes (an estimate of) the
  * number of bits that a cipher implementation can encrypt in a second
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/cipher/null_cipher.c zorg/third_party/srtp/crypto/cipher/null_cipher.c
--- original/third_party/srtp/crypto/cipher/null_cipher.c	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/cipher/null_cipher.c	2010-11-26 16:21:58.352995000 +0100
@@ -99,7 +99,7 @@
 }
 
 err_status_t
-null_cipher_init(null_cipher_ctx_t *ctx, const uint8_t *key) {
+null_cipher_init(null_cipher_ctx_t *ctx, const uint8_t *key, int key_len) {
 
   debug_print(mod_cipher, "initializing null cipher", NULL);
 
@@ -147,6 +147,7 @@
   (char *)                      null_cipher_description,
   (int)                         0,
   (cipher_test_case_t *)       &null_cipher_test_0,
-  (debug_module_t *)            NULL
+  (debug_module_t *)            NULL,
+  (cipher_type_id_t)            NULL_CIPHER
 };
 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/hash/auth.c zorg/third_party/srtp/crypto/hash/auth.c
--- original/third_party/srtp/crypto/hash/auth.c	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/hash/auth.c	2010-11-26 16:21:58.352995000 +0100
@@ -74,8 +74,8 @@
 }
 
 /*
- * auth_type_self_test() tests an auth function of type ct against
- * test cases provided in an array of values of key, data, and tag
+ * auth_type_test() tests an auth function of type ct against
+ * test cases provided in a list test_data of values of key, data, and tag
  * that is known to be good
  */
 
@@ -83,8 +83,8 @@
 #define SELF_TEST_TAG_BUF_OCTETS 32
 
 err_status_t
-auth_type_self_test(const auth_type_t *at) {
-  auth_test_case_t *test_case = at->test_data;
+auth_type_test(const auth_type_t *at, const auth_test_case_t *test_data) {
+  const auth_test_case_t *test_case = test_data;
   auth_t *a;
   err_status_t status;
   uint8_t tag[SELF_TEST_TAG_BUF_OCTETS];
@@ -171,3 +171,13 @@
 }
 
 
+/* 
+ * auth_type_self_test(at) performs auth_type_test on at's internal
+ * list of test data.
+ */
+
+err_status_t
+auth_type_self_test(const auth_type_t *at) {
+  return auth_type_test(at, at->test_data);
+}
+
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/hash/hmac.c zorg/third_party/srtp/crypto/hash/hmac.c
--- original/third_party/srtp/crypto/hash/hmac.c	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/hash/hmac.c	2010-11-26 16:21:58.352995000 +0100
@@ -109,7 +109,7 @@
 }
 
 err_status_t
-hmac_init(hmac_ctx_t *state, const uint8_t *key, int key_len) {
+libsrtp_hmac_init(hmac_ctx_t *state, const uint8_t *key, int key_len) {
   int i;
   uint8_t ipad[64]; 
   
@@ -137,7 +137,7 @@
   debug_print(mod_hmac, "ipad: %s", octet_string_hex_string(ipad, 64));
   
   /* initialize sha1 context */
-  sha1_init(&state->init_ctx);
+  libsrtp_sha1_init(&state->init_ctx);
 
   /* hash ipad ^ key */
   sha1_update(&state->init_ctx, ipad, 64);
@@ -189,7 +189,7 @@
 	      octet_string_hex_string((uint8_t *)H, 20));
 
   /* re-initialize hash context */
-  sha1_init(&state->ctx);
+  libsrtp_sha1_init(&state->ctx);
   
   /* hash opad ^ key  */
   sha1_update(&state->ctx, (uint8_t *)state->opad, 64);
@@ -255,13 +255,14 @@
 hmac  = {
   (auth_alloc_func)      hmac_alloc,
   (auth_dealloc_func)    hmac_dealloc,
-  (auth_init_func)       hmac_init,
+  (auth_init_func)       libsrtp_hmac_init,
   (auth_compute_func)    hmac_compute,
   (auth_update_func)     hmac_update,
   (auth_start_func)      hmac_start,
   (char *)               hmac_description,
   (int)                  0,  /* instance count */
   (auth_test_case_t *)  &hmac_test_case_0,
-  (debug_module_t *)    &mod_hmac
+  (debug_module_t *)    &mod_hmac,
+  (auth_type_id_t)       HMAC_SHA1
 };
 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/hash/null_auth.c zorg/third_party/srtp/crypto/hash/null_auth.c
--- original/third_party/srtp/crypto/hash/null_auth.c	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/hash/null_auth.c	2010-11-26 16:21:58.352995000 +0100
@@ -155,6 +155,8 @@
   (auth_start_func)      null_auth_start,
   (char *)               null_auth_description,
   (int)                  0,  /* instance count */
-  (auth_test_case_t *)   &null_auth_test_case_0
+  (auth_test_case_t *)   &null_auth_test_case_0,
+  (debug_module_t *)     NULL,
+  (auth_type_id_t)       NULL_AUTH
 };
 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/hash/sha1.c zorg/third_party/srtp/crypto/hash/sha1.c
--- original/third_party/srtp/crypto/hash/sha1.c	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/hash/sha1.c	2010-11-26 16:21:58.352995000 +0100
@@ -77,7 +77,7 @@
 sha1(const uint8_t *msg,  int octets_in_msg, uint32_t hash_value[5]) {
   sha1_ctx_t ctx;
 
-  sha1_init(&ctx);
+  libsrtp_sha1_init(&ctx);
   sha1_update(&ctx, msg, octets_in_msg);
   sha1_final(&ctx, hash_value);
 
@@ -114,7 +114,7 @@
   H4 = hash_value[4];
 
   /* copy/xor message into array */
-    
+
   W[0]  = be32_to_cpu(M[0]);
   W[1]  = be32_to_cpu(M[1]);
   W[2]  = be32_to_cpu(M[2]);
@@ -183,8 +183,8 @@
 }
 
 void
-sha1_init(sha1_ctx_t *ctx) {
- 
+libsrtp_sha1_init(sha1_ctx_t *ctx) {
+
   /* initialize state vector */
   ctx->H[0] = 0x67452301;
   ctx->H[1] = 0xefcdab89;
@@ -210,7 +210,7 @@
 
   /* loop over 16-word blocks of M */
   while (octets_in_msg > 0) {
-    
+
     if (octets_in_msg + ctx->octets_in_buffer >= 64) {
 
       /* 
@@ -260,7 +260,7 @@
    */
   {
     int tail = ctx->octets_in_buffer % 4;
-    
+
     /* copy/xor message into array */
     for (i=0; i < (ctx->octets_in_buffer+3)/4; i++) 
       W[i]  = be32_to_cpu(ctx->M[i]);
@@ -283,7 +283,7 @@
       W[i] = 0x80000000;
       break;
     }
-    
+
     /* zeroize remaining words */
     for (i++   ; i < 15; i++)
       W[i] = 0x0;
@@ -299,7 +299,8 @@
     else if (ctx->octets_in_buffer < 60)
       W[15] = 0x0;
 
-    /* process the word array */    for (t=16; t < 80; t++) {
+    /* process the word array */
+    for (t=16; t < 80; t++) {
       TEMP = W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16];
       W[t] = S1(TEMP);
     }
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/include/aes.h zorg/third_party/srtp/crypto/include/aes.h
--- original/third_party/srtp/crypto/include/aes.h	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/include/aes.h	2010-11-26 16:21:58.352995000 +0100
@@ -50,24 +50,30 @@
 
 #include "datatypes.h"
 #include "gf2_8.h"
+#include "err.h"
 
 /* aes internals */
 
-typedef v128_t aes_expanded_key_t[11];
+typedef struct {
+  v128_t round[15];
+  int num_rounds;
+} aes_expanded_key_t;
 
-void
-aes_expand_encryption_key(const v128_t *key,
-			  aes_expanded_key_t expanded_key);
+err_status_t
+aes_expand_encryption_key(const uint8_t *key,
+			  int key_len,
+			  aes_expanded_key_t *expanded_key);
 
-void
-aes_expand_decryption_key(const v128_t *key,
-			  aes_expanded_key_t expanded_key);
+err_status_t
+aes_expand_decryption_key(const uint8_t *key,
+			  int key_len,
+			  aes_expanded_key_t *expanded_key);
 
 void
-aes_encrypt(v128_t *plaintext, const aes_expanded_key_t exp_key);
+aes_encrypt(v128_t *plaintext, const aes_expanded_key_t *exp_key);
 
 void
-aes_decrypt(v128_t *plaintext, const aes_expanded_key_t exp_key);
+aes_decrypt(v128_t *plaintext, const aes_expanded_key_t *exp_key);
 
 #if 0
 /*
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/include/aes_cbc.h zorg/third_party/srtp/crypto/include/aes_cbc.h
--- original/third_party/srtp/crypto/include/aes_cbc.h	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/include/aes_cbc.h	2010-11-26 16:21:58.352995000 +0100
@@ -31,7 +31,7 @@
 
 err_status_t
 aes_cbc_context_init(aes_cbc_ctx_t *c, const uint8_t *key, 
-		     cipher_direction_t dir);
+		     int key_len, cipher_direction_t dir);
 
 err_status_t
 aes_cbc_set_iv(aes_cbc_ctx_t *c, void *iv);
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/include/aes_icm.h zorg/third_party/srtp/crypto/include/aes_icm.h
--- original/third_party/srtp/crypto/include/aes_icm.h	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/include/aes_icm.h	2010-11-26 16:21:58.352995000 +0100
@@ -25,7 +25,8 @@
 
 err_status_t
 aes_icm_context_init(aes_icm_ctx_t *c,
-		     const unsigned char *key); 
+		     const unsigned char *key,
+		     int key_len); 
 
 err_status_t
 aes_icm_set_iv(aes_icm_ctx_t *c, void *iv);
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/include/auth.h zorg/third_party/srtp/crypto/include/auth.h
--- original/third_party/srtp/crypto/include/auth.h	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/include/auth.h	2010-11-26 16:21:58.352995000 +0100
@@ -48,6 +48,8 @@
 
 #include "datatypes.h"          
 #include "err.h"                /* error codes    */
+#include "crypto.h"		/* for auth_type_id_t */
+#include "crypto_types.h"	/* for values of auth_type_id_t */
 
 typedef struct auth_type_t *auth_type_pointer;
 typedef struct auth_t      *auth_pointer_t;
@@ -129,6 +131,7 @@
   int                  ref_count;
   auth_test_case_t    *test_data;
   debug_module_t      *debug;
+  auth_type_id_t       id;
 } auth_type_t;
 
 typedef struct auth_t {
@@ -148,6 +151,15 @@
 err_status_t
 auth_type_self_test(const auth_type_t *at);
 
+/* 
+ * auth_type_test() tests an auth_type against external test cases
+ * provided in an array of values of key/message/tag that is known to
+ * be good
+ */
+
+err_status_t
+auth_type_test(const auth_type_t *at, const auth_test_case_t *test_data);
+
 /*
  * auth_type_get_ref_count(at) returns the reference count (the number
  * of instantiations) of the auth_type_t at
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/include/cipher.h zorg/third_party/srtp/crypto/include/cipher.h
--- original/third_party/srtp/crypto/include/cipher.h	2009-04-28 21:38:43.971077000 +0200
+++ zorg/third_party/srtp/crypto/include/cipher.h	2010-11-26 16:21:58.352995000 +0100
@@ -49,6 +49,8 @@
 #include "datatypes.h"          
 #include "rdbx.h"               /* for xtd_seq_num_t */
 #include "err.h"                /* for error codes  */
+#include "crypto.h"		/* for cipher_type_id_t */
+#include "crypto_types.h"	/* for values of cipher_type_id_t */
 
 
 /**
@@ -86,7 +88,7 @@
  */
 
 typedef err_status_t (*cipher_init_func_t)
-  (void *state, const uint8_t *key, cipher_direction_t dir);
+(void *state, const uint8_t *key, int key_len, cipher_direction_t dir);
 
 /* a cipher_dealloc_func_t de-allocates a cipher_t */
 
@@ -108,8 +110,7 @@
      (void *state, uint8_t *buffer, unsigned int *octets_to_decrypt);
 
 /* 
- * a cipher_set_nonce_seq_func_t function sets both the nonce
- * and the extended sequence number
+ * a cipher_set_iv_func_t function sets the current initialization vector
  */
 
 typedef err_status_t (*cipher_set_iv_func_t)
@@ -147,6 +148,7 @@
   int                         ref_count;
   cipher_test_case_t         *test_data;
   debug_module_t             *debug;
+  cipher_type_id_t            id;
 } cipher_type_t;
 
 /*
@@ -169,7 +171,7 @@
 
 #define cipher_dealloc(c) (((c)->type)->dealloc(c))
 
-#define cipher_init(c, k, dir) (((c)->type)->init(((c)->state), (k), (dir)))
+#define cipher_init(c, k, dir) (((c)->type)->init(((c)->state), (k), ((c)->key_len), (dir)))
 
 #define cipher_encrypt(c, buf, len) \
         (((c)->type)->encrypt(((c)->state), (buf), (len)))
@@ -201,6 +203,16 @@
 cipher_type_self_test(const cipher_type_t *ct);
 
 
+/* 
+ * cipher_type_test() tests a cipher against external test cases provided in 
+ * an array of values of key/xtd_seq_num_t/plaintext/ciphertext 
+ * that is known to be good
+ */
+
+err_status_t
+cipher_type_test(const cipher_type_t *ct, const cipher_test_case_t *test_data);
+
+
 /*
  * cipher_bits_per_second(c, l, t) computes (and estimate of) the
  * number of bits that a cipher implementation can encrypt in a second
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/include/crypto_kernel.h zorg/third_party/srtp/crypto/include/crypto_kernel.h
--- original/third_party/srtp/crypto/include/crypto_kernel.h	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/include/crypto_kernel.h	2010-11-26 16:21:58.352995000 +0100
@@ -182,6 +182,28 @@
 err_status_t
 crypto_kernel_load_auth_type(auth_type_t *ct, auth_type_id_t id);
 
+/*
+ * crypto_kernel_replace_cipher_type(ct, id)
+ * 
+ * replaces the crypto kernel's existing cipher for the cipher_type id
+ * with a new one passed in externally.  The new cipher must pass all the
+ * existing cipher_type's self tests as well as its own.
+ */
+err_status_t
+crypto_kernel_replace_cipher_type(cipher_type_t *ct, cipher_type_id_t id);
+
+
+/*
+ * crypto_kernel_replace_auth_type(ct, id)
+ * 
+ * replaces the crypto kernel's existing cipher for the auth_type id
+ * with a new one passed in externally.  The new auth type must pass all the
+ * existing auth_type's self tests as well as its own.
+ */
+err_status_t
+crypto_kernel_replace_auth_type(auth_type_t *ct, auth_type_id_t id);
+
+
 err_status_t
 crypto_kernel_load_debug_module(debug_module_t *new_dm);
 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/include/crypto_math.h zorg/third_party/srtp/crypto/include/crypto_math.h
--- original/third_party/srtp/crypto/include/crypto_math.h	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/include/crypto_math.h	2010-11-26 16:21:58.352995000 +0100
@@ -233,40 +233,6 @@
 octet_string_set_to_zero(uint8_t *s, int len);
 
 
-/*
- * functions manipulating bit_vector_t 
- *
- * A bitvector_t consists of an array of words and an integer
- * representing the number of significant bits stored in the array.
- * The bits are packed as follows: the least significant bit is that
- * of word[0], while the most significant bit is the nth most
- * significant bit of word[m], where length = bits_per_word * m + n.
- * 
- */
-
-#define bits_per_word  32
-#define bytes_per_word 4
-
-typedef struct {
-  uint32_t length;   
-  uint32_t *word;
-} bitvector_t;
-
-int
-bitvector_alloc(bitvector_t *v, unsigned long length);
-
-void
-bitvector_set_bit(bitvector_t *v, int bit_index);
-
-int
-bitvector_get_bit(const bitvector_t *v, int bit_index);
-
-int
-bitvector_print_hex(const bitvector_t *v, FILE *stream);
-
-int
-bitvector_set_from_hex(bitvector_t *v, char *string);
-
 #endif /* MATH_H */
 
 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/include/crypto_types.h zorg/third_party/srtp/crypto/include/crypto_types.h
--- original/third_party/srtp/crypto/include/crypto_types.h	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/include/crypto_types.h	2010-11-26 16:21:58.352995000 +0100
@@ -97,12 +97,19 @@
 #define NULL_CIPHER        0            
 
 /** 
- * @brief AES-128 Integer Counter Mode (AES ICM)             
+ * @brief AES Integer Counter Mode (AES ICM)             
  *
- * AES-128 ICM is the variant of counter mode that is used by Secure RTP.  
- * This cipher uses a 16-octet key and a 30-octet offset (or salt) value.
+ * AES ICM is the variant of counter mode that is used by Secure RTP.  
+ * This cipher uses a 16-, 24-, or 32-octet key concatenated with a
+ * 14-octet offset (or salt) value.
  */
-#define AES_128_ICM        1            
+#define AES_ICM            1            
+
+/** 
+ * @brief AES-128 Integer Counter Mode (AES ICM)             
+ * AES-128 ICM is a deprecated alternate name for AES ICM.
+ */
+#define AES_128_ICM        AES_ICM
 
 /**
  * @brief SEAL 3.0 
@@ -113,19 +120,26 @@
 #define SEAL               2            
 
 /** 
- * @brief AES-128 Integer Counter Mode (AES ICM)             
+ * @brief AES Cipher Block Chaining mode (AES CBC)             
  *
- * AES-128 ICM is the variant of counter mode that is used by Secure RTP.  
- * This cipher uses a 16-octet key and a 30-octet offset (or salt) value.
+ * AES CBC is the AES Cipher Block Chaining mode.
+ * This cipher uses a 16-, 24-, or 32-octet key.
  */
-#define AES_128_CBC        3            
+#define AES_CBC            3            
+
+/** 
+ * @brief AES-128 Cipher Block Chaining mode (AES CBC)             
+ *
+ * AES-128 CBC is a deprecated alternate name for AES CBC.
+ */
+#define AES_128_CBC        AES_CBC            
 
 /**
  * @brief Strongest available cipher.
  *
  * This identifier resolves to the strongest cipher type available.
  */
-#define STRONGHOLD_CIPHER  AES_128_ICM  
+#define STRONGHOLD_CIPHER  AES_ICM  
 
 /**
  * @}
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/include/datatypes.h zorg/third_party/srtp/crypto/include/datatypes.h
--- original/third_party/srtp/crypto/include/datatypes.h	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/include/datatypes.h	2010-11-26 16:21:58.352995000 +0100
@@ -155,10 +155,10 @@
 v128_copy_octet_string(v128_t *x, const uint8_t s[16]);
 
 void
-v128_left_shift(v128_t *x, int index);
+v128_left_shift(v128_t *x, int shift_index);
 
 void
-v128_right_shift(v128_t *x, int index);
+v128_right_shift(v128_t *x, int shift_index);
 
 /*
  * the following macros define the data manipulation functions
@@ -424,4 +424,83 @@
 
 #endif /* WORDS_BIGENDIAN */
 
+/*
+ * functions manipulating bitvector_t 
+ *
+ * A bitvector_t consists of an array of words and an integer
+ * representing the number of significant bits stored in the array.
+ * The bits are packed as follows: the least significant bit is that
+ * of word[0], while the most significant bit is the nth most
+ * significant bit of word[m], where length = bits_per_word * m + n.
+ * 
+ */
+
+#define bits_per_word  32
+#define bytes_per_word 4
+
+typedef struct {
+  uint32_t length;   
+  uint32_t *word;
+} bitvector_t;
+
+
+#define _bitvector_get_bit(v, bit_index)				\
+(									\
+ ((((v)->word[((bit_index) >> 5)]) >> ((bit_index) & 31)) & 1)		\
+)
+
+
+#define _bitvector_set_bit(v, bit_index)				\
+(									\
+ (((v)->word[((bit_index) >> 5)] |= ((uint32_t)1 << ((bit_index) & 31)))) \
+)
+
+#define _bitvector_clear_bit(v, bit_index)				\
+(									\
+ (((v)->word[((bit_index) >> 5)] &= ~((uint32_t)1 << ((bit_index) & 31)))) \
+)
+
+#define _bitvector_get_length(v)					\
+(									\
+ ((v)->length)								\
+)
+
+#ifdef DATATYPES_USE_MACROS  /* little functions are really macros */
+
+#define bitvector_get_bit(v, bit_index) _bitvector_get_bit(v, bit_index)
+#define bitvector_set_bit(v, bit_index) _bitvector_set_bit(v, bit_index)
+#define bitvector_clear_bit(v, bit_index) _bitvector_clear_bit(v, bit_index)
+#define bitvector_get_length(v) _bitvector_get_length(v)
+
+#else
+
+int
+bitvector_get_bit(const bitvector_t *v, int bit_index);
+
+void
+bitvector_set_bit(bitvector_t *v, int bit_index);
+
+void
+bitvector_clear_bit(bitvector_t *v, int bit_index);
+
+unsigned long
+bitvector_get_length(const bitvector_t *v);
+
+#endif
+
+int
+bitvector_alloc(bitvector_t *v, unsigned long length);
+
+void
+bitvector_dealloc(bitvector_t *v);
+
+void
+bitvector_set_to_zero(bitvector_t *x);
+
+void
+bitvector_left_shift(bitvector_t *x, int index);
+
+char *
+bitvector_bit_string(bitvector_t *x, char* buf, int len);
+
 #endif /* _DATATYPES_H */
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/include/hmac.h zorg/third_party/srtp/crypto/include/hmac.h
--- original/third_party/srtp/crypto/include/hmac.h	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/include/hmac.h	2010-11-26 16:21:58.352995000 +0100
@@ -62,7 +62,7 @@
 hmac_dealloc(auth_t *a);
 
 err_status_t
-hmac_init(hmac_ctx_t *state, const uint8_t *key, int key_len);
+libsrtp_hmac_init(hmac_ctx_t *state, const uint8_t *key, int key_len);
 
 err_status_t
 hmac_start(hmac_ctx_t *state);
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/include/null_cipher.h zorg/third_party/srtp/crypto/include/null_cipher.h
--- original/third_party/srtp/crypto/include/null_cipher.h	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/include/null_cipher.h	2010-11-26 16:21:58.352995000 +0100
@@ -62,11 +62,11 @@
  */
 
 err_status_t
-null_cipher_init(null_cipher_ctx_t *c, const uint8_t *key);
+null_cipher_init(null_cipher_ctx_t *c, const uint8_t *key, int key_len);
 
 err_status_t
 null_cipher_set_segment(null_cipher_ctx_t *c,
-			unsigned long index);
+			unsigned long segment_index);
 
 err_status_t
 null_cipher_encrypt(null_cipher_ctx_t *c,
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/include/rdb.h zorg/third_party/srtp/crypto/include/rdb.h
--- original/third_party/srtp/crypto/include/rdb.h	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/include/rdb.h	2010-11-26 16:21:58.352995000 +0100
@@ -49,7 +49,7 @@
  */
 
 err_status_t
-rdb_check(const rdb_t *rdb, uint32_t index);  
+rdb_check(const rdb_t *rdb, uint32_t rdb_index);  
 
 /*
  * rdb_add_index
@@ -61,7 +61,7 @@
  */
 
 err_status_t
-rdb_add_index(rdb_t *rdb, uint32_t index);
+rdb_add_index(rdb_t *rdb, uint32_t rdb_index);
 
 /*
  * the functions rdb_increment() and rdb_get_value() are for use by 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/include/rdbx.h zorg/third_party/srtp/crypto/include/rdbx.h
--- original/third_party/srtp/crypto/include/rdbx.h	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/include/rdbx.h	2010-11-26 16:21:58.352995000 +0100
@@ -46,19 +46,29 @@
 
 typedef struct {
   xtd_seq_num_t index;
-  v128_t bitmask;
+  bitvector_t bitmask;
 } rdbx_t;
 
 
 /*
- * rdbx_init(rdbx_ptr)
+ * rdbx_init(rdbx_ptr, ws)
  *
- * initializes the rdbx pointed to by its argument, setting the
- * rollover counter and sequence number to zero
+ * initializes the rdbx pointed to by its argument with the window size ws,
+ * setting the rollover counter and sequence number to zero
  */
 
 err_status_t
-rdbx_init(rdbx_t *rdbx);
+rdbx_init(rdbx_t *rdbx, unsigned long ws);
+
+
+/*
+ * rdbx_dealloc(rdbx_ptr)
+ *
+ * frees memory associated with the rdbx
+ */
+
+err_status_t
+rdbx_dealloc(rdbx_t *rdbx);
 
 
 /*
@@ -100,12 +110,42 @@
 err_status_t
 rdbx_add_index(rdbx_t *rdbx, int delta);
 
+
+/*
+ * rdbx_set_roc(rdbx, roc) initalizes the rdbx_t at the location rdbx
+ * to have the rollover counter value roc.  If that value is less than
+ * the current rollover counter value, then the function returns
+ * err_status_replay_old; otherwise, err_status_ok is returned.
+ * 
+ */
+
+err_status_t
+rdbx_set_roc(rdbx_t *rdbx, uint32_t roc);
+
+/*
+ * rdbx_get_roc(rdbx) returns the value of the rollover counter for
+ * the rdbx_t pointed to by rdbx
+ * 
+ */
+
+xtd_seq_num_t
+rdbx_get_packet_index(const rdbx_t *rdbx);
+
 /*
  * xtd_seq_num_t functions - these are *internal* functions of rdbx, and
  * shouldn't be used to manipulate rdbx internal values.  use the rdbx
  * api instead!
  */
 
+/*
+ * rdbx_get_ws(rdbx_ptr)
+ *
+ * gets the window size which was used to initialize the rdbx
+ */
+
+unsigned long
+rdbx_get_window_size(const rdbx_t *rdbx);
+
 
 /* index_init(&pi) initializes a packet index pi (sets it to zero) */
 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/include/sha1.h zorg/third_party/srtp/crypto/include/sha1.h
--- original/third_party/srtp/crypto/include/sha1.h	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/include/sha1.h	2010-11-26 16:21:58.352995000 +0100
@@ -68,7 +68,7 @@
 sha1(const uint8_t *message,  int octets_in_msg, uint32_t output[5]);
 
 /*
- * sha1_init(&ctx) initializes the SHA1 context ctx
+ * libsrtp_sha1_init(&ctx) initializes the SHA1 context ctx
  * 
  * sha1_update(&ctx, msg, len) hashes the len octets starting at msg
  * into the SHA1 context
@@ -79,7 +79,7 @@
  */
 
 void
-sha1_init(sha1_ctx_t *ctx);
+libsrtp_sha1_init(sha1_ctx_t *ctx);
 
 void
 sha1_update(sha1_ctx_t *ctx, const uint8_t *M, int octets_in_msg);
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/kernel/crypto_kernel.c zorg/third_party/srtp/crypto/kernel/crypto_kernel.c
--- original/third_party/srtp/crypto/kernel/crypto_kernel.c	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/kernel/crypto_kernel.c	2010-11-26 16:21:58.352995000 +0100
@@ -151,10 +151,10 @@
   status = crypto_kernel_load_cipher_type(&null_cipher, NULL_CIPHER);
   if (status) 
     return status;
-  status = crypto_kernel_load_cipher_type(&aes_icm, AES_128_ICM);
+  status = crypto_kernel_load_cipher_type(&aes_icm, AES_ICM);
   if (status) 
     return status;
-  status = crypto_kernel_load_cipher_type(&aes_cbc, AES_128_CBC);
+  status = crypto_kernel_load_cipher_type(&aes_cbc, AES_CBC);
   if (status) 
     return status;
 
@@ -297,8 +297,9 @@
   return err_status_ok;
 }
 
-err_status_t
-crypto_kernel_load_cipher_type(cipher_type_t *new_ct, cipher_type_id_t id) {
+inline err_status_t
+crypto_kernel_do_load_cipher_type(cipher_type_t *new_ct, cipher_type_id_t id,
+				  int replace) {
   kernel_cipher_type_t *ctype, *new_ctype;
   err_status_t status;
 
@@ -306,6 +307,9 @@
   if (new_ct == NULL)
     return err_status_bad_param;
 
+  if (new_ct->id != id)
+    return err_status_bad_param;
+
   /* check cipher type by running self-test */
   status = cipher_type_self_test(new_ct);
   if (status) {
@@ -315,24 +319,35 @@
   /* walk down list, checking if this type is in the list already  */
   ctype = crypto_kernel.cipher_type_list;
   while (ctype != NULL) {
-    if ((new_ct == ctype->cipher_type) || (id == ctype->id))
+    if (id == ctype->id) {
+      if (!replace)
+	return err_status_bad_param;
+      status = cipher_type_test(new_ct, ctype->cipher_type->test_data);
+      if (status)
+	return status;
+      new_ctype = ctype;
+      break;
+    }
+    else if (new_ct == ctype->cipher_type)
       return err_status_bad_param;    
     ctype = ctype->next;
   }
 
-  /* put new_ct at the head of the list */
+  /* if not found, put new_ct at the head of the list */
+  if (ctype == NULL) {
   /* allocate memory */
-  new_ctype = (kernel_cipher_type_t *) crypto_alloc(sizeof(kernel_cipher_type_t));
-  if (new_ctype == NULL)
-    return err_status_alloc_fail;
+    new_ctype = (kernel_cipher_type_t *) crypto_alloc(sizeof(kernel_cipher_type_t));
+    if (new_ctype == NULL)
+      return err_status_alloc_fail;
+    new_ctype->next = crypto_kernel.cipher_type_list;
+
+    /* set head of list to new cipher type */
+    crypto_kernel.cipher_type_list = new_ctype;    
+  }
     
   /* set fields */
   new_ctype->cipher_type = new_ct;
   new_ctype->id = id;
-  new_ctype->next = crypto_kernel.cipher_type_list;
-
-  /* set head of list to new cipher type */
-  crypto_kernel.cipher_type_list = new_ctype;    
 
   /* load debug module, if there is one present */
   if (new_ct->debug != NULL)
@@ -343,7 +358,18 @@
 }
 
 err_status_t
-crypto_kernel_load_auth_type(auth_type_t *new_at, auth_type_id_t id) {
+crypto_kernel_load_cipher_type(cipher_type_t *new_ct, cipher_type_id_t id) {
+  return crypto_kernel_do_load_cipher_type(new_ct, id, 0);
+}
+
+err_status_t
+crypto_kernel_replace_cipher_type(cipher_type_t *new_ct, cipher_type_id_t id) {
+  return crypto_kernel_do_load_cipher_type(new_ct, id, 1);
+}
+
+err_status_t
+crypto_kernel_do_load_auth_type(auth_type_t *new_at, auth_type_id_t id,
+				int replace) {
   kernel_auth_type_t *atype, *new_atype;
   err_status_t status;
 
@@ -351,6 +377,9 @@
   if (new_at == NULL)
     return err_status_bad_param;
 
+  if (new_at->id != id)
+    return err_status_bad_param;
+
   /* check auth type by running self-test */
   status = auth_type_self_test(new_at);
   if (status) {
@@ -360,24 +389,35 @@
   /* walk down list, checking if this type is in the list already  */
   atype = crypto_kernel.auth_type_list;
   while (atype != NULL) {
-    if ((new_at == atype->auth_type) || (id == atype->id))
+    if (id == atype->id) {
+      if (!replace)
+	return err_status_bad_param;
+      status = auth_type_test(new_at, atype->auth_type->test_data);
+      if (status)
+	return status;
+      new_atype = atype;
+      break;
+    }
+    else if (new_at == atype->auth_type)
       return err_status_bad_param;    
     atype = atype->next;
   }
 
-  /* put new_at at the head of the list */
-  /* allocate memory */
-  new_atype = (kernel_auth_type_t *)crypto_alloc(sizeof(kernel_auth_type_t));
-  if (new_atype == NULL)
-    return err_status_alloc_fail;
+  /* if not found, put new_at at the head of the list */
+  if (atype == NULL) {
+    /* allocate memory */
+    new_atype = (kernel_auth_type_t *)crypto_alloc(sizeof(kernel_auth_type_t));
+    if (new_atype == NULL)
+      return err_status_alloc_fail;
+
+    new_atype->next = crypto_kernel.auth_type_list;
+    /* set head of list to new auth type */
+    crypto_kernel.auth_type_list = new_atype;
+  }
     
   /* set fields */
   new_atype->auth_type = new_at;
   new_atype->id = id;
-  new_atype->next = crypto_kernel.auth_type_list;
-
-  /* set head of list to new auth type */
-  crypto_kernel.auth_type_list = new_atype;    
 
   /* load debug module, if there is one present */
   if (new_at->debug != NULL)
@@ -388,6 +428,16 @@
 
 }
 
+err_status_t
+crypto_kernel_load_auth_type(auth_type_t *new_at, auth_type_id_t id) {
+  return crypto_kernel_do_load_auth_type(new_at, id, 0);
+}
+
+err_status_t
+crypto_kernel_replace_auth_type(auth_type_t *new_at, auth_type_id_t id) {
+  return crypto_kernel_do_load_auth_type(new_at, id, 1);
+}
+
 
 cipher_type_t *
 crypto_kernel_get_cipher_type(cipher_type_id_t id) {
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/math/datatypes.c zorg/third_party/srtp/crypto/math/datatypes.c
--- original/third_party/srtp/crypto/math/datatypes.c	2009-04-28 21:38:43.971077000 +0200
+++ zorg/third_party/srtp/crypto/math/datatypes.c	2010-11-26 16:21:58.352995000 +0100
@@ -206,16 +206,16 @@
 
 char *
 v128_bit_string(v128_t *x) {
-  int j, index;
+  int j, i;
   uint32_t mask;
   
-  for (j=index=0; j < 4; j++) {
+  for (j=i=0; j < 4; j++) {
     for (mask=0x80000000; mask > 0; mask >>= 1) {
       if (x->v32[j] & mask)
-	bit_string[index] = '1';
+	bit_string[i] = '1';
       else
-	bit_string[index] = '0';
-      ++index;
+	bit_string[i] = '0';
+      ++i;
     }
   }
   bit_string[128] = 0; /* null terminate string */
@@ -322,13 +322,13 @@
 #endif /* DATATYPES_USE_MACROS */
 
 void
-v128_right_shift(v128_t *x, int index) {
-  const int base_index = index >> 5;
-  const int bit_index = index & 31;
+v128_right_shift(v128_t *x, int shift) {
+  const int base_index = shift >> 5;
+  const int bit_index = shift & 31;
   int i, from;
   uint32_t b;
     
-  if (index > 127) {
+  if (shift > 127) {
     v128_set_to_zero(x);
     return;
   }
@@ -360,12 +360,12 @@
 }
 
 void
-v128_left_shift(v128_t *x, int index) {
+v128_left_shift(v128_t *x, int shift) {
   int i;
-  const int base_index = index >> 5;
-  const int bit_index = index & 31;
+  const int base_index = shift >> 5;
+  const int bit_index = shift & 31;
 
-  if (index > 127) {
+  if (shift > 127) {
     v128_set_to_zero(x);
     return;
   } 
@@ -386,6 +386,124 @@
 
 }
 
+/* functions manipulating bitvector_t */
+
+#ifndef DATATYPES_USE_MACROS /* little functions are not macros */
+
+int
+bitvector_get_bit(const bitvector_t *v, int bit_index)
+{
+  return _bitvector_get_bit(v, bit_index);
+}
+
+void
+bitvector_set_bit(bitvector_t *v, int bit_index)
+{
+  _bitvector_set_bit(v, bit_index);
+}
+
+void
+bitvector_clear_bit(bitvector_t *v, int bit_index)
+{
+  _bitvector_clear_bit(v, bit_index);
+}
+
+
+#endif /* DATATYPES_USE_MACROS */
+
+int
+bitvector_alloc(bitvector_t *v, unsigned long length) {
+  unsigned long l;
+
+  /* Round length up to a multiple of bits_per_word */
+  length = (length + bits_per_word - 1) & ~(unsigned long)((bits_per_word - 1));
+
+  l = length / bits_per_word * bytes_per_word;
+
+  /* allocate memory, then set parameters */
+  if (l == 0)
+    v->word = NULL;
+  else {
+    v->word = (uint32_t*)crypto_alloc(l);
+    if (v->word == NULL) {
+      v->word = NULL;
+      v->length = 0;
+      return -1;
+    }
+  }
+  v->length = length;
+
+  /* initialize bitvector to zero */
+  bitvector_set_to_zero(v);
+
+  return 0;
+}
+
+
+void
+bitvector_dealloc(bitvector_t *v) {
+  if (v->word != NULL)
+    crypto_free(v->word);
+  v->word = NULL;
+  v->length = 0;
+}
+
+void
+bitvector_set_to_zero(bitvector_t *x)
+{
+  /* C99 guarantees that memset(0) will set the value 0 for uint32_t */
+  memset(x->word, 0, x->length >> 3);
+}
+
+char *
+bitvector_bit_string(bitvector_t *x, char* buf, int len) {
+  int j, i;
+  uint32_t mask;
+  
+  for (j=i=0; j < (int)(x->length>>5) && i < len-1; j++) {
+    for (mask=0x80000000; mask > 0; mask >>= 1) {
+      if (x->word[j] & mask)
+	buf[i] = '1';
+      else
+	buf[i] = '0';
+      ++i;
+      if (i >= len-1)
+        break;
+    }
+  }
+  buf[i] = 0; /* null terminate string */
+
+  return buf;
+}
+
+void
+bitvector_left_shift(bitvector_t *x, int shift) {
+  int i;
+  const int base_index = shift >> 5;
+  const int bit_index = shift & 31;
+  const int word_length = x->length >> 5;
+
+  if (shift >= (int)x->length) {
+    bitvector_set_to_zero(x);
+    return;
+  } 
+  
+  if (bit_index == 0) {
+    for (i=0; i < word_length - base_index; i++)
+      x->word[i] = x->word[i+base_index];
+  } else {
+    for (i=0; i < word_length - base_index - 1; i++)
+      x->word[i] = (x->word[i+base_index] >> bit_index) ^
+	(x->word[i+base_index+1] << (32 - bit_index));
+    x->word[word_length - base_index-1] = x->word[word_length-1] >> bit_index;
+  }
+
+  /* now wrap up the final portion */
+  for (i = word_length - base_index; i < word_length; i++) 
+    x->word[i] = 0;
+
+}
+
 
 int
 octet_string_is_eq(uint8_t *a, uint8_t *b, int len) {
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/math/math.c zorg/third_party/srtp/crypto/math/math.c
--- original/third_party/srtp/crypto/math/math.c	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/math/math.c	2010-11-26 16:21:58.352995000 +0100
@@ -43,7 +43,6 @@
  */
 
 #include "crypto_math.h"
-#include <stdlib.h>           /* malloc() used in bitvector_alloc */
 
 int 
 octet_weight[256] = {
@@ -773,165 +772,6 @@
   
 }
 
-/* functions manipulating bit_vector_t */
-
-#define BITVECTOR_MAX_WORDS 5
-
-int
-bitvector_alloc(bitvector_t *v, unsigned long length) {
-  unsigned long l = (length + bytes_per_word - 1) / bytes_per_word;
-  int i;
-
-  /* allocate memory, then set parameters */
-  if (l > BITVECTOR_MAX_WORDS)
-    return -1;
-  else
-    l = BITVECTOR_MAX_WORDS;
-  v->word   = malloc(l);
-  if (v->word == NULL)
-    return -1;
-  v->length = length;
-
-  /* initialize bitvector to zero */
-  for (i=0; i < (length >> 5); i++) {
-    v->word = 0;
-  }
-
-  return 0;
-}
-
-void
-bitvector_set_bit(bitvector_t *v, int bit_index) {
-
-  v->word[(bit_index >> 5)] |= (1 << (bit_index & 31));
-  
-}
-
-int
-bitvector_get_bit(const bitvector_t *v, int bit_index) {
-
-  return ((v->word[(bit_index >> 5)]) >> (bit_index & 31)) & 1;
-  
-}
-
-#include <stdio.h>
-
-int
-bitvector_print_hex(const bitvector_t *v, FILE *stream) {
-  int i;
-  int m = v->length >> 5;
-  int n = v->length & 31;
-  char string[9];
-  uint32_t tmp;
-
-  /* if length isn't a multiple of four, we can't hex_print */
-  if (n & 3)
-    return -1;
-  
-  /* if the length is zero, do nothing */
-  if (v->length == 0)
-    return 0;
-
-  /*
-   * loop over words from most significant to least significant - 
-   */
-  
-  for (i=m; i > 0; i++) {
-    char *str = string + 7;
-    tmp = v->word[i];
-    
-    /* null terminate string */
-    string[8] = 0;   
-
-    /* loop over nibbles */
-    *str-- = nibble_to_hex_char(tmp & 0xf);  tmp >>= 4; 
-    *str-- = nibble_to_hex_char(tmp & 0xf);  tmp >>= 4; 
-    *str-- = nibble_to_hex_char(tmp & 0xf);  tmp >>= 4; 
-    *str-- = nibble_to_hex_char(tmp & 0xf);  tmp >>= 4; 
-    *str-- = nibble_to_hex_char(tmp & 0xf);  tmp >>= 4; 
-    *str-- = nibble_to_hex_char(tmp & 0xf);  tmp >>= 4; 
-    *str-- = nibble_to_hex_char(tmp & 0xf);  tmp >>= 4; 
-    *str-- = nibble_to_hex_char(tmp & 0xf);   
-
-    /* now print stream */
-    fprintf(stream, string);
-  }
-  
-  return 0;
-
-}
-
-
-int
-hex_string_length(char *s) {
-  int count = 0;
-  
-  /* ignore leading zeros */
-  while ((*s != 0) && *s == '0')
-    s++;
-
-  /* count remaining characters */
-  while (*s != 0) {
-    if (hex_char_to_nibble(*s++) == -1)
-      return -1;
-    count++;
-  }
-
-  return count;
-}
-
-int
-bitvector_set_from_hex(bitvector_t *v, char *string) {
-  int num_hex_chars, m, n, i, j;
-  uint32_t tmp;
-  
-  num_hex_chars = hex_string_length(string);
-  if (num_hex_chars == -1)
-    return -1;
-
-  /* set length */
-  v->length = num_hex_chars * 4;
-  /* 
-   * at this point, we should subtract away a bit if the high
-   * bit of the first character is zero, but we ignore that 
-   * for now and assume that we're four-bit aligned - DAM
-   */
-
-  
-  m = num_hex_chars / 8;   /* number of words                */
-  n = num_hex_chars % 8;   /* number of nibbles in last word */
-
-  /* if the length is greater than the bitvector, return an error */
-  if (m > BITVECTOR_MAX_WORDS)
-    return -1;
-
-  /* 
-   * loop over words from most significant - first word is a special
-   * case 
-   */
-  
-  if (n) {
-    tmp = 0;
-    for (i=0; i < n; i++) {
-      tmp = hex_char_to_nibble(*string++); 
-      tmp <<= 4;  
-    }
-    v->word[m] = tmp;
-  }
-
-  /* now loop over the rest of the words */
-  for (i=m-1; i >= 0; i--) {
-     tmp = 0;
-     for (j=0; j < 8; j++) {
-       tmp = hex_char_to_nibble(*string++); 
-       tmp <<= 4;  
-     }
-     v->word[i] = tmp;
-  }
-
-  return 0;
-}
-
 
 /* functions below not yet tested! */
 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/replay/rdb.c zorg/third_party/srtp/crypto/replay/rdb.c
--- original/third_party/srtp/crypto/replay/rdb.c	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/replay/rdb.c	2010-11-26 16:21:58.352995000 +0100
@@ -70,18 +70,18 @@
  */
 
 err_status_t
-rdb_check(const rdb_t *rdb, uint32_t index) {
+rdb_check(const rdb_t *rdb, uint32_t p_index) {
   
   /* if the index appears after (or at very end of) the window, its good */
-  if (index >= rdb->window_start + rdb_bits_in_bitmask)
+  if (p_index >= rdb->window_start + rdb_bits_in_bitmask)
     return err_status_ok;
   
   /* if the index appears before the window, its bad */
-  if (index < rdb->window_start)
+  if (p_index < rdb->window_start)
     return err_status_replay_old;
 
   /* otherwise, the index appears within the window, so check the bitmask */
-  if (v128_get_bit(&rdb->bitmask, (index - rdb->window_start)) == 1)
+  if (v128_get_bit(&rdb->bitmask, (p_index - rdb->window_start)) == 1)
     return err_status_replay_fail;    
       
   /* otherwise, the index is okay */
@@ -98,15 +98,15 @@
  */
 
 err_status_t
-rdb_add_index(rdb_t *rdb, uint32_t index) {
+rdb_add_index(rdb_t *rdb, uint32_t p_index) {
   int delta;  
 
-  /* here we *assume* that index > rdb->window_start */
+  /* here we *assume* that p_index > rdb->window_start */
 
-  delta = (index - rdb->window_start);    
+  delta = (p_index - rdb->window_start);    
   if (delta < rdb_bits_in_bitmask) {
 
-    /* if the index is within the window, set the appropriate bit */
+    /* if the p_index is within the window, set the appropriate bit */
     v128_set_bit(&rdb->bitmask, delta);
 
   } else { 
@@ -115,7 +115,7 @@
 
     /* shift the window forward by delta bits*/
     v128_left_shift(&rdb->bitmask, delta);
-    v128_set_bit(&rdb->bitmask, rdb_bits_in_bitmask-delta);
+    v128_set_bit(&rdb->bitmask, rdb_bits_in_bitmask-1);
     rdb->window_start += delta;
 
   }    
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/replay/rdbx.c zorg/third_party/srtp/crypto/replay/rdbx.c
--- original/third_party/srtp/crypto/replay/rdbx.c	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/replay/rdbx.c	2010-11-26 16:21:58.352995000 +0100
@@ -45,18 +45,17 @@
 
 #include "rdbx.h"
 
-#define rdbx_high_bit_in_bitmask 127
 
 /*
- * from draft-ietf-avt-srtp-00.txt:
+ * from RFC 3711:
  *
  * A receiver reconstructs the index i of a packet with sequence
- *  number s using the estimate
+ *  number SEQ using the estimate
  *
- * i = 65,536 * t + s,
+ * i = 2^16 * v + SEQ,
  *
- * where t is chosen from the set { r-1, r, r+1 } such that i is
- * closest to the value 65,536 * r + s_l.  If the value r+1 is used,
+ * where v is chosen from the set { ROC-1, ROC, ROC+1 } such that i is
+ * closest to the value 2^16 * ROC + s_l.  If the value r+1 is used,
  * then the rollover counter r in the cryptographic context is
  * incremented by one (if the packet containing s is authentic).
  */
@@ -180,17 +179,81 @@
 
 
 /*
- *  rdbx_init(&r) initalizes the rdbx_t pointed to by r 
+ *  rdbx_init(&r, ws) initializes the rdbx_t pointed to by r with window size ws
  */
 
 err_status_t
-rdbx_init(rdbx_t *rdbx) {
-  v128_set_to_zero(&rdbx->bitmask);
+rdbx_init(rdbx_t *rdbx, unsigned long ws) {
+  if (ws == 0)
+    return err_status_bad_param;
+
+  if (bitvector_alloc(&rdbx->bitmask, ws) != 0)
+    return err_status_alloc_fail;
+
   index_init(&rdbx->index);
 
   return err_status_ok;
 }
 
+/*
+ *  rdbx_dealloc(&r) frees memory for the rdbx_t pointed to by r
+ */
+
+err_status_t
+rdbx_dealloc(rdbx_t *rdbx) {
+  bitvector_dealloc(&rdbx->bitmask);
+
+  return err_status_ok;
+}
+
+/*
+ * rdbx_set_roc(rdbx, roc) initalizes the rdbx_t at the location rdbx
+ * to have the rollover counter value roc.  If that value is less than
+ * the current rollover counter value, then the function returns
+ * err_status_replay_old; otherwise, err_status_ok is returned.
+ * 
+ */
+
+err_status_t
+rdbx_set_roc(rdbx_t *rdbx, uint32_t roc) {
+  bitvector_set_to_zero(&rdbx->bitmask);
+
+#ifdef NO_64BIT_MATH
+  #error not yet implemented
+#else
+
+  /* make sure that we're not moving backwards */
+  if (roc < (rdbx->index >> 16))
+    return err_status_replay_old;
+
+  rdbx->index &= 0xffff;   /* retain lowest 16 bits */
+  rdbx->index |= ((uint64_t)roc) << 16;  /* set ROC */
+#endif
+
+  return err_status_ok;
+}
+
+/*
+ * rdbx_get_packet_index(rdbx) returns the value of the packet index
+ * for the rdbx_t pointed to by rdbx
+ * 
+ */
+
+xtd_seq_num_t
+rdbx_get_packet_index(const rdbx_t *rdbx) {
+  return rdbx->index;   
+}
+
+/*
+ * rdbx_get_window_size(rdbx) returns the value of the window size
+ * for the rdbx_t pointed to by rdbx
+ * 
+ */
+
+unsigned long
+rdbx_get_window_size(const rdbx_t *rdbx) {
+  return bitvector_get_length(&rdbx->bitmask);
+}
 
 /*
  * rdbx_check(&r, delta) checks to see if the xtd_seq_num_t
@@ -202,11 +265,11 @@
   
   if (delta > 0) {       /* if delta is positive, it's good */
     return err_status_ok;
-  } else if (rdbx_high_bit_in_bitmask + delta < 0) {   
+  } else if ((int)(bitvector_get_length(&rdbx->bitmask) - 1) + delta < 0) {   
                          /* if delta is lower than the bitmask, it's bad */
     return err_status_replay_old; 
-  } else if (v128_get_bit(&rdbx->bitmask, 
-			  rdbx_high_bit_in_bitmask + delta) == 1) {
+  } else if (bitvector_get_bit(&rdbx->bitmask, 
+			       (int)(bitvector_get_length(&rdbx->bitmask) - 1) + delta) == 1) {
                          /* delta is within the window, so check the bitmask */
     return err_status_replay_fail;    
   }
@@ -230,11 +293,11 @@
   if (delta > 0) {
     /* shift forward by delta */
     index_advance(&rdbx->index, delta);
-    v128_left_shift(&rdbx->bitmask, delta);
-    v128_set_bit(&rdbx->bitmask, 127);
+    bitvector_left_shift(&rdbx->bitmask, delta);
+    bitvector_set_bit(&rdbx->bitmask, bitvector_get_length(&rdbx->bitmask) - 1);
   } else {
-    /* delta is in window, so flip bit in bitmask */
-    v128_set_bit(&rdbx->bitmask, -delta);
+    /* delta is in window */
+    bitvector_set_bit(&rdbx->bitmask, bitvector_get_length(&rdbx->bitmask) -1 + delta);
   }
 
   /* note that we need not consider the case that delta == 0 */
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/rng/ctr_prng.c zorg/third_party/srtp/crypto/rng/ctr_prng.c
--- original/third_party/srtp/crypto/rng/ctr_prng.c	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/rng/ctr_prng.c	2010-11-26 16:21:58.352995000 +0100
@@ -66,7 +66,7 @@
     return status;
 
   /* initialize aes ctr context with random key */
-  status = aes_icm_context_init(&ctr_prng.state, tmp_key);
+  status = aes_icm_context_init(&ctr_prng.state, tmp_key, 30);
   if (status) 
     return status;
 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/rng/prng.c zorg/third_party/srtp/crypto/rng/prng.c
--- original/third_party/srtp/crypto/rng/prng.c	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/rng/prng.c	2010-11-26 16:21:58.352995000 +0100
@@ -51,7 +51,7 @@
 
 err_status_t
 x917_prng_init(rand_source_func_t random_source) {
-  v128_t tmp_key;
+  uint8_t tmp_key[16];
   err_status_t status;
 
   /* initialize output count to zero */
@@ -61,12 +61,12 @@
   x917_prng.rand = random_source;
   
   /* initialize secret key from random source */
-  status = random_source((uint8_t *)&tmp_key, 16);
+  status = random_source(tmp_key, 16);
   if (status) 
     return status;
 
   /* expand aes key */
-  aes_expand_encryption_key(&tmp_key, x917_prng.key);
+  aes_expand_encryption_key(tmp_key, 16, &x917_prng.key);
 
   /* initialize prng state from random source */
   status = x917_prng.rand((uint8_t *)&x917_prng.state, 16);
@@ -108,7 +108,7 @@
     v128_copy(&buffer, &x917_prng.state);
 
     /* apply aes to buffer */
-    aes_encrypt(&buffer, x917_prng.key);
+    aes_encrypt(&buffer, &x917_prng.key);
     
     /* write data to output */
     *dest++ = buffer.v8[0];
@@ -132,7 +132,7 @@
     buffer.v32[0] ^= t;
 
     /* encrypt buffer */
-    aes_encrypt(&buffer, x917_prng.key);
+    aes_encrypt(&buffer, &x917_prng.key);
 
     /* copy buffer into state */
     v128_copy(&x917_prng.state, &buffer);
@@ -150,7 +150,7 @@
     v128_copy(&buffer, &x917_prng.state);
 
     /* apply aes to buffer */
-    aes_encrypt(&buffer, x917_prng.key);
+    aes_encrypt(&buffer, &x917_prng.key);
 
     /* write data to output */
     for (i=0; i < tail_len; i++) {
@@ -163,7 +163,7 @@
     buffer.v32[0] ^= t;
 
     /* encrypt buffer */
-    aes_encrypt(&buffer, x917_prng.key);
+    aes_encrypt(&buffer, &x917_prng.key);
 
     /* copy buffer into state */
     v128_copy(&x917_prng.state, &buffer);
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/rng/rand_source.c zorg/third_party/srtp/crypto/rng/rand_source.c
--- original/third_party/srtp/crypto/rng/rand_source.c	2008-02-21 08:53:35.442956000 +0100
+++ zorg/third_party/srtp/crypto/rng/rand_source.c	2010-11-26 16:21:58.352995000 +0100
@@ -7,26 +7,26 @@
  * Cisco Systems, Inc.
  */
 /*
- *	
+ *
  * Copyright(c) 2001-2006 Cisco Systems, Inc.
  * All rights reserved.
- * 
+ *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
- * 
+ *
  *   Redistributions of source code must retain the above copyright
  *   notice, this list of conditions and the following disclaimer.
- * 
+ *
  *   Redistributions in binary form must reproduce the above
  *   copyright notice, this list of conditions and the following
  *   disclaimer in the documentation and/or other materials provided
  *   with the distribution.
- * 
+ *
  *   Neither the name of the Cisco Systems, Inc. nor the names of its
  *   contributors may be used to endorse or promote products derived
  *   from this software without specific prior written permission.
- * 
+ *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
@@ -47,10 +47,9 @@
 #if defined(DEV_URANDOM) || defined(PJ_DEV_URANDOM)
 # include <fcntl.h>          /* for open()  */
 # include <unistd.h>         /* for close() */
-#elif (_MSC_VER >= 1400)
-#define _CRT_RAND_S
-# include <stdlib.h>         
-# include <stdio.h>
+#elif defined(HAVE_RAND_S)
+# define _CRT_RAND_S
+# include <stdlib.h>
 #else
 # include <stdio.h>
 #endif
@@ -58,9 +57,9 @@
 #include "rand_source.h"
 
 
-/* 
- * global dev_rand_fdes is file descriptor for /dev/random 
- * 
+/*
+ * global dev_rand_fdes is file descriptor for /dev/random
+ *
  * This variable is also used to indicate that the random source has
  * been initialized.  When this variable is set to the value of the
  * #define RAND_SOURCE_NOT_READY, it indicates that the random source
@@ -94,7 +93,7 @@
     err_report(3,"Ugh: /dev/urandom not present, using rand() instead");
     return err_status_ok;  /* it's ok, it'll fallback to using rand() */
   }
-#elif (_MSC_VER >= 1400)
+#elif defined(HAVE_RAND_S)
   dev_random_fdes = RAND_SOURCE_READY;
 #else
   /* no random source available; let the user know */
@@ -107,27 +106,33 @@
 err_status_t
 rand_source_get_octet_string(void *dest, uint32_t len) {
 
-  /* 
+  /*
    * read len octets from /dev/random to dest, and
    * check return value to make sure enough octets were
-   * written 
+   * written
    */
 #ifdef DEV_URANDOM
-  if (read(dev_random_fdes, dest, len) != len)
-    return err_status_fail;
-#elif 0 && (_MSC_VER >= 1400) /* disabled rand_s, causing assertion 'rand_s not supported' in vs8 */
-  unsigned int *dst = dest;
+  uint8_t *dst = (uint8_t *)dest;
   while (len)
   {
-      unsigned int val = 0;
-	  errno_t err = rand_s(&val);
-      if (err != 0)
-	      {
-              return err_status_fail;
-          }
-  
-      *dst++ = val;
-	  len--;
+    ssize_t num_read = read(dev_random_fdes, dst, len);
+    if (num_read <= 0 || num_read > len)
+      return err_status_fail;
+    len -= num_read;
+    dst += num_read;
+  }
+#elif defined(HAVE_RAND_S)
+  uint8_t *dst = (uint8_t *)dest;
+  while (len)
+  {
+    unsigned int val;
+    errno_t err = rand_s(&val);
+
+    if (err != 0)
+      return err_status_fail;
+
+    *dst++ = val & 0xff;
+    len--;
   }
 #else
   uint8_t *dst = (uint8_t *)dest;
@@ -154,7 +159,7 @@
 #endif
   return err_status_ok;
 }
- 
+
 err_status_t
 rand_source_deinit(void) {
 #ifndef PJ_DEV_URANDOM
@@ -165,11 +170,11 @@
 
 #if defined(DEV_URANDOM) || defined(PJ_DEV_URANDOM)
   if (dev_random_fdes >= 0)
-    close(dev_random_fdes);  
+    close(dev_random_fdes);
 
   dev_random_fdes = RAND_SOURCE_NOT_READY;
 #endif
-  
-  return err_status_ok;  
+
+  return err_status_ok;
 }
 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/test/aes_calc.c zorg/third_party/srtp/crypto/test/aes_calc.c
--- original/third_party/srtp/crypto/test/aes_calc.c	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/test/aes_calc.c	2010-11-26 16:21:58.352995000 +0100
@@ -28,14 +28,16 @@
   exit(255);
 }
 
-#define AES_KEY_LEN 16
+#define AES_MAX_KEY_LEN 32
 
 int
 main (int argc, char *argv[]) {
-  v128_t data, key;
+  v128_t data;
+  uint8_t key[AES_MAX_KEY_LEN];
   aes_expanded_key_t exp_key;
-  int len;
+  int key_len, len;
   int verbose;
+  err_status_t status;
 
   if (argc == 3) {
     /* we're not in verbose mode */
@@ -54,22 +56,23 @@
   }
   
   /* read in key, checking length */
-  if (strlen(argv[1]) > AES_KEY_LEN*2) {
+  if (strlen(argv[1]) > AES_MAX_KEY_LEN*2) {
     fprintf(stderr, 
 	    "error: too many digits in key "
-	    "(should be %d hexadecimal digits, found %u)\n",
-	    AES_KEY_LEN*2, (unsigned)strlen(argv[1]));
+	    "(should be at most %d hexadecimal digits, found %u)\n",
+	    AES_MAX_KEY_LEN*2, (unsigned)strlen(argv[1]));
     exit(1);    
   }
-  len = hex_string_to_octet_string((char *)&key, argv[1], AES_KEY_LEN*2);
+  len = hex_string_to_octet_string((char*)key, argv[1], AES_MAX_KEY_LEN*2);
   /* check that hex string is the right length */
-  if (len < AES_KEY_LEN*2) {
+  if (len != 32 && len != 48 && len != 64) {
     fprintf(stderr, 
-	    "error: too few digits in key "
-	    "(should be %d hexadecimal digits, found %d)\n",
-	    AES_KEY_LEN*2, len);
+	    "error: bad number of digits in key "
+	    "(should be 32/48/64 hexadecimal digits, found %d)\n",
+	    len);
     exit(1);    
   } 
+  key_len = len/2;
       
   /* read in plaintext, checking length */
   if (strlen(argv[2]) > 16*2) {
@@ -95,13 +98,18 @@
   }
 
   /* encrypt plaintext */
-  aes_expand_encryption_key(&key, exp_key);
+  status = aes_expand_encryption_key(key, key_len, &exp_key);
+  if (status) {
+    fprintf(stderr,
+	    "error: AES key expansion failed.\n");
+    exit(1);
+  }
 
-  aes_encrypt(&data, exp_key);
+  aes_encrypt(&data, &exp_key);
 
   /* write ciphertext to output */
   if (verbose) {
-    printf("key:\t\t%s\n", v128_hex_string(&key));
+    printf("key:\t\t%s\n", octet_string_hex_string(key, key_len));
     printf("ciphertext:\t");
   }
   printf("%s\n", v128_hex_string(&data));
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/test/cipher_driver.c zorg/third_party/srtp/crypto/test/cipher_driver.c
--- original/third_party/srtp/crypto/test/cipher_driver.c	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/test/cipher_driver.c	2010-11-26 16:21:58.352995000 +0100
@@ -120,10 +120,13 @@
 main(int argc, char *argv[]) {
   cipher_t *c = NULL;
   err_status_t status;
-  unsigned char test_key[20] = {
+  unsigned char test_key[48] = {
     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
     0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
-    0x10, 0x11, 0x12, 0x13
+    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
+    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
+    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
+    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
   };
   int q;
   unsigned do_timing_test = 0;
@@ -169,8 +172,13 @@
       cipher_driver_test_array_throughput(&aes_icm, 30, num_cipher); 
 
     for (num_cipher=1; num_cipher < max_num_cipher; num_cipher *=8)
+      cipher_driver_test_array_throughput(&aes_icm, 46, num_cipher); 
+
+    for (num_cipher=1; num_cipher < max_num_cipher; num_cipher *=8)
       cipher_driver_test_array_throughput(&aes_cbc, 16, num_cipher); 
  
+    for (num_cipher=1; num_cipher < max_num_cipher; num_cipher *=8)
+      cipher_driver_test_array_throughput(&aes_cbc, 32, num_cipher); 
   }
 
   if (do_validation) {
@@ -196,7 +204,7 @@
   check_status(status);
   
 
-  /* run the throughput test on the aes_icm cipher */
+  /* run the throughput test on the aes_icm cipher (128-bit key) */
     status = cipher_type_alloc(&aes_icm, &c, 30);  
     if (status) {
       fprintf(stderr, "error: can't allocate cipher\n");
@@ -216,6 +224,27 @@
     
     status = cipher_dealloc(c);
     check_status(status);
+
+  /* repeat the tests with 256-bit keys */
+    status = cipher_type_alloc(&aes_icm, &c, 46);  
+    if (status) {
+      fprintf(stderr, "error: can't allocate cipher\n");
+      exit(status);
+    }
+
+    status = cipher_init(c, test_key, direction_encrypt);
+    check_status(status);
+
+    if (do_timing_test)
+      cipher_driver_test_throughput(c);
+    
+    if (do_validation) {
+      status = cipher_driver_test_buffering(c);
+      check_status(status);
+    }
+    
+    status = cipher_dealloc(c);
+    check_status(status);
   
   return 0;
 }
@@ -225,9 +254,9 @@
   int i;
   int min_enc_len = 32;     
   int max_enc_len = 2048;   /* should be a power of two */
-  int num_trials = 100000;  
+  int num_trials = 1000000;  
   
-  printf("timing %s throughput:\n", c->type->description);
+  printf("timing %s throughput, key length %d:\n", c->type->description, c->key_len);
   fflush(stdout);
   for (i=min_enc_len; i <= max_enc_len; i = i * 2)
     printf("msg len: %d\tgigabits per second: %f\n",
@@ -348,6 +377,9 @@
   err_status_t status;
   uint8_t *key;
   cipher_t **cipher_array;
+  /* pad klen allocation, to handle aes_icm reading 16 bytes for the
+     14-byte salt */
+  int klen_pad = ((klen + 15) >> 4) << 4;
 
   /* allocate array of pointers to ciphers */
   cipher_array = (cipher_t **) malloc(sizeof(cipher_t *) * num_ciphers);
@@ -358,7 +390,7 @@
   *ca = cipher_array;
 
   /* allocate key */
-  key = crypto_alloc(klen);
+  key = crypto_alloc(klen_pad);
   if (key == NULL) {
     free(cipher_array);
     return err_status_alloc_fail;
@@ -375,6 +407,8 @@
     /* generate random key and initialize cipher */
     for (j=0; j < klen; j++)
       key[j] = (uint8_t) rand();
+    for (; j < klen_pad; j++)
+      key[j] = 0;
     status = cipher_init(*cipher_array, key, direction_encrypt);
     if (status)
       return status;
@@ -387,6 +421,8 @@
     cipher_array++;
   }
 
+  crypto_free(key);
+
   return err_status_ok;
 }
 
@@ -423,24 +459,28 @@
   v128_t nonce;
   clock_t timer;
   unsigned char *enc_buf;
-  int cipher_index = 0;
-
+  int cipher_index = rand() % num_cipher;
 
-  enc_buf = crypto_alloc(octets_in_buffer);
+  /* Over-alloc, for NIST CBC padding */
+  enc_buf = crypto_alloc(octets_in_buffer+17);
   if (enc_buf == NULL)
     return 0;  /* indicate bad parameters by returning null */
+  memset(enc_buf, 0, octets_in_buffer);
   
   /* time repeated trials */
   v128_set_to_zero(&nonce);
   timer = clock();
   for(i=0; i < num_trials; i++, nonce.v32[3] = i) {
-
-    /* choose a cipher at random from the array*/
-    cipher_index = (*((uint32_t *)enc_buf)) % num_cipher;
+    /* length parameter to cipher_encrypt is in/out -- out is total, padded
+     * length -- so reset it each time. */
+    unsigned octets_to_encrypt = octets_in_buffer;
 
     /* encrypt buffer with cipher */
     cipher_set_iv(cipher_array[cipher_index], &nonce);
-    cipher_encrypt(cipher_array[cipher_index], enc_buf, &octets_in_buffer);
+    cipher_encrypt(cipher_array[cipher_index], enc_buf, &octets_to_encrypt);
+
+    /* choose a cipher at random from the array*/
+    cipher_index = (*((uint32_t *)enc_buf)) % num_cipher;
   }
   timer = clock() - timer;
 
@@ -451,7 +491,7 @@
     return 0;
   }
 
-  return CLOCKS_PER_SEC * num_trials * 8 * octets_in_buffer / timer;
+  return (uint64_t)CLOCKS_PER_SEC * num_trials * 8 * octets_in_buffer / timer;
 }
 
 void
@@ -459,10 +499,10 @@
   int i;
   int min_enc_len = 16;     
   int max_enc_len = 2048;   /* should be a power of two */
-  int num_trials = 10000;
+  int num_trials = 1000000;
 
-  printf("timing %s throughput with array size %d:\n", 
-	 (ca[0])->type->description, num_cipher);
+  printf("timing %s throughput with key length %d, array size %d:\n", 
+	 (ca[0])->type->description, (ca[0])->key_len, num_cipher);
   fflush(stdout);
   for (i=min_enc_len; i <= max_enc_len; i = i * 4)
     printf("msg len: %d\tgigabits per second: %f\n", i,
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/test/sha1_driver.c zorg/third_party/srtp/crypto/test/sha1_driver.c
--- original/third_party/srtp/crypto/test/sha1_driver.c	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/test/sha1_driver.c	2010-11-26 16:21:58.352995000 +0100
@@ -113,17 +113,17 @@
   if (0 == memcmp(test_case->hash, hash_value, 20)) {
 #if VERBOSE
     printf("PASSED: reference value: %s\n", 
-	   octet_string_hex_string((uint8_t *)test_case->hash, 20));
+	   octet_string_hex_string((const uint8_t *)test_case->hash, 20));
     printf("PASSED: computed value:  %s\n", 
-	   octet_string_hex_string((uint8_t *)hash_value, 20));   
+	   octet_string_hex_string((const uint8_t *)hash_value, 20));   
 #endif 
     return err_status_ok;
   }
 
   printf("reference value: %s\n", 
-	 octet_string_hex_string((uint8_t *)test_case->hash, 20));
+	 octet_string_hex_string((const uint8_t *)test_case->hash, 20));
   printf("computed value:  %s\n", 
-	 octet_string_hex_string((uint8_t *)hash_value, 20));
+	 octet_string_hex_string((const uint8_t *)hash_value, 20));
 
   return err_status_algo_fail;
   
@@ -136,7 +136,7 @@
 };
 
 err_status_t
-sha1_add_test_cases() {
+sha1_add_test_cases(void) {
   int i;
   err_status_t err;
 
@@ -485,6 +485,21 @@
   return err_status_ok;
 }
 
+err_status_t
+sha1_dealloc_test_cases(void) {
+  hash_test_case_t *t, *next;
+
+  for (t = sha1_test_case_list; t != NULL; t = next) {
+    next = t->next_test_case;
+    free(t);
+  }
+
+  sha1_test_case_list = NULL;
+
+  return err_status_ok;
+}
+
+
 
 err_status_t
 sha1_validate(void) {
@@ -510,6 +525,8 @@
     test_case = test_case->next_test_case;
   }
 
+  sha1_dealloc_test_cases();
+
   return err_status_ok;
 }
 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/crypto/test/stat_driver.c zorg/third_party/srtp/crypto/test/stat_driver.c
--- original/third_party/srtp/crypto/test/stat_driver.c	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/crypto/test/stat_driver.c	2010-11-26 16:21:58.352995000 +0100
@@ -37,7 +37,9 @@
   int i, j;
   extern cipher_type_t aes_icm;
   cipher_t *c;
-  uint8_t key[30] = {
+  uint8_t key[46] = {
+    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
+    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
@@ -97,5 +99,41 @@
   printf("(nota bene: a small fraction of stat_test failures does not \n"
 	 "indicate that the random source is invalid)\n");
 
+  err_check(cipher_dealloc(c));
+
+  printf("running stat_tests on AES-256-ICM, expecting success\n");
+  /* set buffer to cipher output */
+  for (i=0; i < 2500; i++)
+    buffer[i] = 0;
+  err_check(cipher_type_alloc(&aes_icm, &c, 46));
+  err_check(cipher_init(c, key, direction_encrypt));
+  err_check(cipher_set_iv(c, &nonce));
+  err_check(cipher_encrypt(c, buffer, &buf_len));
+  /* run tests on cipher outout */
+  printf("monobit %d\n", stat_test_monobit(buffer));
+  printf("poker   %d\n", stat_test_poker(buffer));
+  printf("runs    %d\n", stat_test_runs(buffer));
+
+  printf("runs test (please be patient): ");
+  fflush(stdout);
+  num_fail = 0;
+  v128_set_to_zero(&nonce);
+  for(j=0; j < num_trials; j++) {
+    for (i=0; i < 2500; i++)
+      buffer[i] = 0;
+    nonce.v32[3] = i;
+    err_check(cipher_set_iv(c, &nonce));
+    err_check(cipher_encrypt(c, buffer, &buf_len));
+    if (stat_test_runs(buffer)) {
+      num_fail++;
+    }
+  }
+
+  printf("%d failures in %d tests\n", num_fail, num_trials);
+  printf("(nota bene: a small fraction of stat_test failures does not \n"
+	 "indicate that the random source is invalid)\n");
+
+  err_check(cipher_dealloc(c));
+
   return 0;
 }
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/include/ekt.h zorg/third_party/srtp/include/ekt.h
--- original/third_party/srtp/include/ekt.h	1970-01-01 01:00:00.000000000 +0100
+++ zorg/third_party/srtp/include/ekt.h	2010-11-26 16:21:58.352995000 +0100
@@ -0,0 +1,201 @@
+/*
+ * ekt.h
+ *
+ * interface to Encrypted Key Transport for SRTP
+ *
+ * David McGrew
+ * Cisco Systems, Inc.
+ */
+/*
+ *	
+ * Copyright (c) 2001-2005 Cisco Systems, Inc.
+ * All rights reserved.
+ * 
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 
+ *   Redistributions of source code must retain the above copyright
+ *   notice, this list of conditions and the following disclaimer.
+ * 
+ *   Redistributions in binary form must reproduce the above
+ *   copyright notice, this list of conditions and the following
+ *   disclaimer in the documentation and/or other materials provided
+ *   with the distribution.
+ * 
+ *   Neither the name of the Cisco Systems, Inc. nor the names of its
+ *   contributors may be used to endorse or promote products derived
+ *   from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+
+
+/*
+ * EKT implementation strategy 
+ * 
+ * use stream_template approach
+ *
+ * in srtp_unprotect, when a new stream appears, check if template has
+ * EKT defined, and if it does, then apply EKT processing 
+ *
+ * question: will we want to allow key-sharing templates in addition
+ * to EKT templates?  could define a new ssrc_type_t that's associated
+ * with an EKT, e.g.  ssrc_any_ekt.
+ *
+ *
+ */
+
+#ifndef EKT_H
+#define EKT_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#include "srtp_priv.h"
+
+#define EKT_CIPHER_DEFAULT           1
+#define EKT_CIPHER_AES_128_ECB       1
+#define EKT_CIPHER_AES_192_KEY_WRAP  2
+#define EKT_CIPHER_AES_256_KEY_WRAP  3
+
+typedef uint16_t ekt_spi_t;
+
+
+unsigned
+ekt_octets_after_base_tag(ekt_stream_t ekt);
+
+/*
+ * an srtp_policy_t structure can contain a pointer to an
+ * ekt_policy_t structure
+ *
+ * this structure holds all of the high level EKT information, and it
+ * is passed into libsrtp to indicate what policy should be in effect
+ */
+
+typedef struct ekt_policy_ctx_t {
+  ekt_spi_t  spi;     /* security parameter index */
+  uint8_t    ekt_cipher_type;
+  uint8_t   *ekt_key;
+  struct ekt_policy_ctx_t *next_ekt_policy;
+} ekt_policy_ctx_t;
+
+
+/*
+ * an ekt_data_t structure holds the data corresponding to an ekt key,
+ * spi, and so on
+ */
+
+typedef struct ekt_data_t {
+  ekt_spi_t spi;
+  uint8_t ekt_cipher_type;
+  aes_expanded_key_t ekt_enc_key;
+  aes_expanded_key_t ekt_dec_key;
+  struct ekt_data_t *next_ekt_data;
+} ekt_data_t;
+
+/*
+ * an srtp_stream_ctx_t can contain an ekt_stream_ctx_t
+ *
+ * an ekt_stream_ctx_t structure holds all of the EKT information for
+ * a specific SRTP stream
+ */
+
+typedef struct ekt_stream_ctx_t {
+  ekt_data_t *data;    
+  uint16_t    isn;     /* initial sequence number  */
+  uint8_t     encrypted_master_key[SRTP_MAX_KEY_LEN];
+} ekt_stream_ctx_t;
+
+
+
+err_status_t 
+ekt_alloc(ekt_stream_t *stream_data, ekt_policy_t policy);
+
+err_status_t
+ekt_stream_init(ekt_stream_t e, 
+		ekt_spi_t spi,
+		void *ekt_key,
+		unsigned ekt_cipher_type);
+
+err_status_t
+ekt_stream_init_from_policy(ekt_stream_t e, ekt_policy_t p);
+  
+
+
+err_status_t
+srtp_stream_init_from_ekt(srtp_stream_t stream,			  
+			  const void *srtcp_hdr,
+			  unsigned pkt_octet_len);
+		
+
+void
+ekt_write_data(ekt_stream_t ekt,
+	       uint8_t *base_tag, 
+	       unsigned base_tag_len, 
+	       int *packet_len,
+	       xtd_seq_num_t pkt_index);		
+
+/*
+ * We handle EKT by performing some additional steps before
+ * authentication (copying the auth tag into a temporary location,
+ * zeroizing the "base tag" field in the packet)
+ *
+ * With EKT, the tag_len parameter is actually the base tag
+ * length
+ */
+
+err_status_t
+ekt_tag_verification_preproces(uint8_t *pkt_tag, 
+			       uint8_t *pkt_tag_copy, 
+			       unsigned tag_len);
+
+err_status_t
+ekt_tag_verification_postproces(uint8_t *pkt_tag,
+				uint8_t *pkt_tag_copy,
+				unsigned tag_len);
+
+
+/*
+ * @brief EKT pre-processing for srtcp tag generation
+ *
+ * This function does the pre-processing of the SRTCP authentication
+ * tag format.  When EKT is used, it consists of writing the Encrypted
+ * Master Key, the SRTP ROC, the Initial Sequence Number, and SPI
+ * fields.  The Base Authentication Tag field is set to the all-zero
+ * value
+ * 
+ * When EKT is not used, this function is a no-op.
+ * 
+ */
+
+err_status_t
+srtp_stream_srtcp_auth_tag_generation_preprocess(const srtp_stream_t *s,
+						 uint8_t *pkt_tag,
+						 unsigned pkt_octet_len);
+
+/* it's not clear that a tag_generation_postprocess function is needed */
+
+err_status_t
+srtcp_auth_tag_generation_postprocess(void);
+
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* EKT_H */
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/include/rtp.h zorg/third_party/srtp/include/rtp.h
--- original/third_party/srtp/include/rtp.h	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/include/rtp.h	2010-11-26 16:21:58.352995000 +0100
@@ -66,18 +66,18 @@
 
 typedef struct rtp_receiver_ctx_t *rtp_receiver_t;
 
-unsigned int
+int
 rtp_sendto(rtp_sender_t sender, const void* msg, int len);
 
-unsigned int
+int
 rtp_recvfrom(rtp_receiver_t receiver, void *msg, int *len);
 
 int
-rtp_receiver_init(rtp_receiver_t rcvr, int socket, 
+rtp_receiver_init(rtp_receiver_t rcvr, int sock, 
 		  struct sockaddr_in addr, unsigned int ssrc);
 
 int
-rtp_sender_init(rtp_sender_t sender, int socket, 
+rtp_sender_init(rtp_sender_t sender, int sock, 
 		struct sockaddr_in addr, unsigned int ssrc);
 
 /*
@@ -103,14 +103,26 @@
 rtp_sender_init_srtp(rtp_sender_t sender, const srtp_policy_t *policy);
 
 int
+rtp_sender_deinit_srtp(rtp_sender_t sender);
+
+int
 rtp_receiver_init_srtp(rtp_receiver_t sender, const srtp_policy_t *policy);
 
+int
+rtp_receiver_deinit_srtp(rtp_receiver_t sender);
+
 
 rtp_sender_t 
-rtp_sender_alloc();
+rtp_sender_alloc(void);
+
+void
+rtp_sender_dealloc(rtp_sender_t rtp_ctx);
 
 rtp_receiver_t 
-rtp_receiver_alloc();
+rtp_receiver_alloc(void);
+
+void
+rtp_receiver_dealloc(rtp_receiver_t rtp_ctx);
 
 
 /*
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/include/srtp.h zorg/third_party/srtp/include/srtp.h
--- original/third_party/srtp/include/srtp.h	2008-10-21 16:29:47.177403000 +0200
+++ zorg/third_party/srtp/include/srtp.h	2010-11-26 16:21:58.352995000 +0100
@@ -50,11 +50,7 @@
 extern "C" {
 #endif
 
-#ifdef _MSC_VER
-#pragma pack(4)
-#endif
-
-#include "crypto_kernel.h"
+#include "crypto_kernel.h" 
 
 /**
  * @defgroup SRTP Secure RTP
@@ -172,6 +168,18 @@
 } ssrc_t;
 
 
+/**
+ * @brief points to an EKT policy
+ */
+typedef struct ekt_policy_ctx_t *ekt_policy_t;
+
+
+/**
+ * @brief points to EKT stream data
+ */
+typedef struct ekt_stream_ctx_t *ekt_stream_t;
+
+
 /** 
  * @brief represents the policy for an SRTP session.  
  *
@@ -209,6 +217,16 @@
   crypto_policy_t rtcp;        /**< SRTCP crypto policy.                 */
   unsigned char *key;          /**< Pointer to the SRTP master key for
 				*    this stream.                        */
+  ekt_policy_t ekt;            /**< Pointer to the EKT policy structure
+                                *   for this stream (if any)             */ 
+  unsigned long window_size;   /**< The window size to use for replay
+				*   protection. */
+  int        allow_repeat_tx;  /**< Whether retransmissions of
+				*   packets with the same sequence number
+				*   are allowed.  (Note that such repeated
+				*   transmissions must have the same RTP
+				*   payload, or a severe security weakness
+				*   is introduced!)                      */
   struct srtp_policy_t *next;  /**< Pointer to next stream policy.       */
 } srtp_policy_t;
 
@@ -268,6 +286,15 @@
 srtp_deinit(void);
 
 /**
+ * @brief srtp_shutdown() de-initializes the srtp library.
+ *
+ * @warning No srtp functions may be called after calling this function.
+ */
+
+err_status_t
+srtp_shutdown(void);
+
+/**
  * @brief srtp_protect() is the Secure RTP sender-side packet processing
  * function.
  * 
@@ -474,8 +501,8 @@
  * 
  * The function crypto_policy_set_aes_cm_128_hmac_sha1_80() is a
  * synonym for crypto_policy_set_rtp_default().  It conforms to the
- * naming convention used in
- * http://www.ietf.org/internet-drafts/draft-ietf-mmusic-sdescriptions-12.txt
+ * naming convention used in RFC 4568 (SDP Security Descriptions for
+ * Media Streams).
  * 
  * @return void.
  * 
@@ -492,8 +519,8 @@
  * 
  * The function call crypto_policy_set_aes_cm_128_hmac_sha1_32(&p)
  * sets the crypto_policy_t at location p to use policy
- * AES_CM_128_HMAC_SHA1_32 as defined in
- * draft-ietf-mmusic-sdescriptions-12.txt.  This policy uses AES-128
+ * AES_CM_128_HMAC_SHA1_32 as defined in RFC 4568.
+ * This policy uses AES-128
  * Counter Mode encryption and HMAC-SHA1 authentication, with an
  * authentication tag that is only 32 bits long.  This length is
  * considered adequate only for protecting audio and video media that
@@ -578,6 +605,70 @@
 void
 crypto_policy_set_null_cipher_hmac_sha1_80(crypto_policy_t *p);
 
+
+/**
+ * @brief crypto_policy_set_aes_cm_256_hmac_sha1_80() sets a crypto
+ * policy structure to a encryption and authentication policy using AES-256 
+ * for RTP protection.
+ *
+ * @param p is a pointer to the policy structure to be set 
+ * 
+ * The function call crypto_policy_set_aes_cm_256_hmac_sha1_80(&p)
+ * sets the crypto_policy_t at location p to use policy
+ * AES_CM_256_HMAC_SHA1_80 as defined in
+ * draft-ietf-avt-srtp-big-aes-03.txt.  This policy uses AES-256
+ * Counter Mode encryption and HMAC-SHA1 authentication, with an 80 bit
+ * authentication tag.
+ * 
+ * This function is a convenience that helps to avoid dealing directly
+ * with the policy data structure.  You are encouraged to initialize
+ * policy elements with this function call.  Doing so may allow your
+ * code to be forward compatible with later versions of libSRTP that
+ * include more elements in the crypto_policy_t datatype.
+ *
+ * @return void.
+ * 
+ */
+
+void crypto_policy_set_aes_cm_256_hmac_sha1_80(crypto_policy_t *p);
+
+
+/**
+ * @brief crypto_policy_set_aes_cm_256_hmac_sha1_32() sets a crypto
+ * policy structure to a short-authentication tag policy using AES-256
+ * encryption.
+ *
+ * @param p is a pointer to the policy structure to be set 
+ * 
+ * The function call crypto_policy_set_aes_cm_256_hmac_sha1_32(&p)
+ * sets the crypto_policy_t at location p to use policy
+ * AES_CM_256_HMAC_SHA1_32 as defined in
+ * draft-ietf-avt-srtp-big-aes-03.txt.  This policy uses AES-256
+ * Counter Mode encryption and HMAC-SHA1 authentication, with an
+ * authentication tag that is only 32 bits long.  This length is
+ * considered adequate only for protecting audio and video media that
+ * use a stateless playback function.  See Section 7.5 of RFC 3711
+ * (http://www.ietf.org/rfc/rfc3711.txt).
+ * 
+ * This function is a convenience that helps to avoid dealing directly
+ * with the policy data structure.  You are encouraged to initialize
+ * policy elements with this function call.  Doing so may allow your
+ * code to be forward compatible with later versions of libSRTP that
+ * include more elements in the crypto_policy_t datatype.
+ *
+ * @warning This crypto policy is intended for use in SRTP, but not in
+ * SRTCP.  It is recommended that a policy that uses longer
+ * authentication tags be used for SRTCP.  See Section 7.5 of RFC 3711
+ * (http://www.ietf.org/rfc/rfc3711.txt).
+ *
+ * @return void.
+ * 
+ */
+
+void
+crypto_policy_set_aes_cm_256_hmac_sha1_32(crypto_policy_t *p);
+
+
 /**
  * @brief srtp_dealloc() deallocates storage for an SRTP session
  * context.
@@ -918,10 +1009,6 @@
 #define SRTCP_E_BYTE_BIT 0x80
 #define SRTCP_INDEX_MASK 0x7fffffff
 
-#ifdef _MSC_VER
-#pragma pack()
-#endif
-
 #ifdef __cplusplus
 }
 #endif
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/include/srtp_priv.h zorg/third_party/srtp/include/srtp_priv.h
--- original/third_party/srtp/include/srtp_priv.h	2009-04-28 21:38:43.971077000 +0200
+++ zorg/third_party/srtp/include/srtp_priv.h	2010-11-26 16:21:58.352995000 +0100
@@ -190,6 +190,15 @@
 srtp_stream_init_keys(srtp_stream_t srtp, const void *key);
 
 /*
+ * srtp_stream_init(s, p) initializes the srtp_stream_t s to 
+ * use the policy at the location p
+ */
+err_status_t
+srtp_stream_init(srtp_stream_t srtp, 
+		 const srtp_policy_t *p);
+
+
+/*
  * libsrtp internal datatypes 
  */
 
@@ -219,6 +228,8 @@
   sec_serv_t rtcp_services;
   key_limit_ctx_t *limit;
   direction_t direction;
+  int        allow_repeat_tx;
+  ekt_stream_t ekt; 
   struct srtp_stream_ctx_t *next;   /* linked list of streams */
 } srtp_stream_ctx_t;
 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/install-win.bat zorg/third_party/srtp/install-win.bat
--- original/third_party/srtp/install-win.bat	1970-01-01 01:00:00.000000000 +0100
+++ zorg/third_party/srtp/install-win.bat	2010-11-26 16:21:58.352995000 +0100
@@ -0,0 +1,31 @@
+:: Installs from srtp windows build directory to directory specified on
+:: command line
+
+
+@if "%1"=="" (
+	echo "Usage: %~nx0 destdir"
+	exit /b 1
+) else (
+	set destdir=%1
+)
+
+@if not exist %destdir% (
+   echo %destdir% not found
+   exit /b 1
+)
+
+@for %%d in (include\srtp.h crypto\include\crypto.h Debug\srtp.lib Release\srtp.lib) do (
+	if not exist "%%d" (
+	   echo "%%d not found: are you in the right directory?"
+	   exit /b 1
+	)
+)
+
+mkdir %destdir%\include
+mkdir %destdir%\include\srtp
+mkdir %destdir%\lib
+
+copy include\*.h %destdir%\include\srtp
+copy crypto\include\*.h %destdir%\include\srtp
+copy Release\srtp.lib %destdir%\lib\srtp.lib
+copy Debug\srtp.lib %destdir%\lib\srtpd.lib
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/srtp/ekt.c zorg/third_party/srtp/srtp/ekt.c
--- original/third_party/srtp/srtp/ekt.c	1970-01-01 01:00:00.000000000 +0100
+++ zorg/third_party/srtp/srtp/ekt.c	2010-11-26 16:21:58.352995000 +0100
@@ -0,0 +1,278 @@
+/*
+ * ekt.c
+ *
+ * Encrypted Key Transport for SRTP
+ * 
+ * David McGrew
+ * Cisco Systems, Inc.
+ */
+/*
+ *	
+ * Copyright (c) 2001-2006 Cisco Systems, Inc.
+ * All rights reserved.
+ * 
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 
+ *   Redistributions of source code must retain the above copyright
+ *   notice, this list of conditions and the following disclaimer.
+ * 
+ *   Redistributions in binary form must reproduce the above
+ *   copyright notice, this list of conditions and the following
+ *   disclaimer in the documentation and/or other materials provided
+ *   with the distribution.
+ * 
+ *   Neither the name of the Cisco Systems, Inc. nor the names of its
+ *   contributors may be used to endorse or promote products derived
+ *   from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+
+#include "err.h"
+#include "srtp_priv.h"
+#include "ekt.h"
+
+extern debug_module_t mod_srtp;
+
+/*
+ *  The EKT Authentication Tag format.
+ *
+ *    0                   1                   2                   3
+ *    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+ *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+ *   :                   Base Authentication Tag                     :
+ *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+ *   :                     Encrypted Master Key                      :
+ *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+ *   |                       Rollover Counter                        |
+ *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+ *   |    Initial Sequence Number    |   Security Parameter Index    |
+ *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+ *
+ */			 
+
+#define EKT_OCTETS_AFTER_BASE_TAG 24
+#define EKT_OCTETS_AFTER_EMK       8
+#define EKT_OCTETS_AFTER_ROC       4
+#define EKT_SPI_LEN                2
+
+unsigned
+ekt_octets_after_base_tag(ekt_stream_t ekt) {
+  /*
+   * if the pointer ekt is NULL, then EKT is not in effect, so we
+   * indicate this by returning zero
+   */
+  if (!ekt)
+    return 0;
+
+  switch(ekt->data->ekt_cipher_type) {
+  case EKT_CIPHER_AES_128_ECB:
+    return 16 + EKT_OCTETS_AFTER_EMK;
+    break;
+  default:
+    break;
+  }
+  return 0;
+}
+
+inline ekt_spi_t
+srtcp_packet_get_ekt_spi(const uint8_t *packet_start, unsigned pkt_octet_len) {
+  const uint8_t *spi_location;
+  
+  spi_location = packet_start + (pkt_octet_len - EKT_SPI_LEN);
+  
+  return *((const ekt_spi_t *)spi_location);
+}
+
+inline uint32_t
+srtcp_packet_get_ekt_roc(const uint8_t *packet_start, unsigned pkt_octet_len) {
+  const uint8_t *roc_location;
+  
+  roc_location = packet_start + (pkt_octet_len - EKT_OCTETS_AFTER_ROC);
+  
+  return *((const uint32_t *)roc_location);
+}
+
+inline const uint8_t *
+srtcp_packet_get_emk_location(const uint8_t *packet_start, 
+			      unsigned pkt_octet_len) {
+  const uint8_t *location;
+  
+  location = packet_start + (pkt_octet_len - EKT_OCTETS_AFTER_BASE_TAG);
+
+  return location;
+}
+
+
+err_status_t 
+ekt_alloc(ekt_stream_t *stream_data, ekt_policy_t policy) {
+
+  /*
+   * if the policy pointer is NULL, then EKT is not in use
+   * so we just set the EKT stream data pointer to NULL
+   */
+  if (!policy) {
+    *stream_data = NULL;
+    return err_status_ok;
+  }
+
+  /* TODO */
+  *stream_data = NULL;
+
+  return err_status_ok;
+}
+
+err_status_t
+ekt_stream_init_from_policy(ekt_stream_t stream_data, ekt_policy_t policy) {
+  if (!stream_data)
+    return err_status_ok;
+
+  return err_status_ok;
+}
+
+
+void
+aes_decrypt_with_raw_key(void *ciphertext, const void *key, int key_len) {
+  aes_expanded_key_t expanded_key;
+
+  aes_expand_decryption_key(key, key_len, &expanded_key);
+  aes_decrypt(ciphertext, &expanded_key);
+}
+
+/*
+ * The function srtp_stream_init_from_ekt() initializes a stream using
+ * the EKT data from an SRTCP trailer.  
+ */
+
+err_status_t
+srtp_stream_init_from_ekt(srtp_stream_t stream,			  
+			  const void *srtcp_hdr,
+			  unsigned pkt_octet_len) {
+  err_status_t err;
+  const uint8_t *master_key;
+  srtp_policy_t srtp_policy;
+  unsigned master_key_len;
+  uint32_t roc;
+
+  /*
+   * NOTE: at present, we only support a single ekt_policy at a time.  
+   */
+  if (stream->ekt->data->spi != 
+      srtcp_packet_get_ekt_spi(srtcp_hdr, pkt_octet_len))
+    return err_status_no_ctx;
+
+  if (stream->ekt->data->ekt_cipher_type != EKT_CIPHER_AES_128_ECB)
+    return err_status_bad_param;
+  master_key_len = 16;
+
+  /* decrypt the Encrypted Master Key field */
+  master_key = srtcp_packet_get_emk_location(srtcp_hdr, pkt_octet_len);
+  /* FIX!? This decrypts the master key in-place, and never uses it */
+  /* FIX!? It's also passing to ekt_dec_key (which is an aes_expanded_key_t)
+   * to a function which expects a raw (unexpanded) key */
+  aes_decrypt_with_raw_key((void*)master_key, &stream->ekt->data->ekt_dec_key, 16);
+
+  /* set the SRTP ROC */
+  roc = srtcp_packet_get_ekt_roc(srtcp_hdr, pkt_octet_len);
+  err = rdbx_set_roc(&stream->rtp_rdbx, roc);
+  if (err) return err;
+
+  err = srtp_stream_init(stream, &srtp_policy);
+  if (err) return err;
+
+  return err_status_ok;
+}
+
+void
+ekt_write_data(ekt_stream_t ekt,
+	       uint8_t *base_tag, 
+	       unsigned base_tag_len, 
+	       int *packet_len,
+	       xtd_seq_num_t pkt_index) {
+  uint32_t roc;
+  uint16_t isn;
+  unsigned emk_len;
+  uint8_t *packet;
+
+  /* if the pointer ekt is NULL, then EKT is not in effect */
+  if (!ekt) {
+    debug_print(mod_srtp, "EKT not in use", NULL);
+    return;
+  }
+
+  /* write zeros into the location of the base tag */
+  octet_string_set_to_zero(base_tag, base_tag_len);
+  packet = base_tag + base_tag_len;
+
+  /* copy encrypted master key into packet */
+  emk_len = ekt_octets_after_base_tag(ekt);
+  memcpy(packet, ekt->encrypted_master_key, emk_len);
+  debug_print(mod_srtp, "writing EKT EMK: %s,", 
+	      octet_string_hex_string(packet, emk_len));
+  packet += emk_len;
+
+  /* copy ROC into packet */
+  roc = (uint32_t)(pkt_index >> 16);
+  *((uint32_t *)packet) = be32_to_cpu(roc);
+  debug_print(mod_srtp, "writing EKT ROC: %s,", 
+	      octet_string_hex_string(packet, sizeof(roc)));
+  packet += sizeof(roc);
+
+  /* copy ISN into packet */
+  isn = (uint16_t)pkt_index;
+  *((uint16_t *)packet) = htons(isn);
+  debug_print(mod_srtp, "writing EKT ISN: %s,", 
+	      octet_string_hex_string(packet, sizeof(isn)));
+  packet += sizeof(isn);
+
+  /* copy SPI into packet */
+  *((uint16_t *)packet) = htons(ekt->data->spi);
+  debug_print(mod_srtp, "writing EKT SPI: %s,", 
+	      octet_string_hex_string(packet, sizeof(ekt->data->spi)));
+
+  /* increase packet length appropriately */
+  *packet_len += EKT_OCTETS_AFTER_EMK + emk_len;
+}
+
+
+/*
+ * The function call srtcp_ekt_trailer(ekt, auth_len, auth_tag   )
+ * 
+ * If the pointer ekt is NULL, then the other inputs are unaffected.
+ *
+ * auth_tag is a pointer to the pointer to the location of the
+ * authentication tag in the packet.  If EKT is in effect, then the
+ * auth_tag pointer is set to the location 
+ */
+
+void
+srtcp_ekt_trailer(ekt_stream_t ekt,
+		  unsigned *auth_len,
+		  void **auth_tag,
+		  void *tag_copy) {
+  
+  /* 
+   * if there is no EKT policy, then the other inputs are unaffected
+   */
+  if (!ekt) 
+    return;
+      
+  /* copy auth_tag into temporary location */
+  
+}
+
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/srtp/srtp.c zorg/third_party/srtp/srtp/srtp.c
--- original/third_party/srtp/srtp/srtp.c	2008-10-21 16:29:47.177403000 +0200
+++ zorg/third_party/srtp/srtp/srtp.c	2010-11-26 16:21:58.352995000 +0100
@@ -43,8 +43,8 @@
  */
 
 
-#include "srtp_priv.h"
-#include "aes_icm.h"         /* aes_icm is used in the KDF  */
+#include "srtp.h"
+#include "ekt.h"             /* for SRTP Encrypted Key Transport */
 #include "alloc.h"           /* for crypto_alloc()          */
 
 #ifndef SRTP_KERNEL
@@ -57,9 +57,6 @@
 #endif /* ! SRTP_KERNEL */
 
 
-extern cipher_type_t aes_icm;
-extern auth_type_t   tmmhv2;
-
 /* the debug module for srtp */
 
 debug_module_t mod_srtp = {
@@ -151,6 +148,18 @@
    return stat;
   }  
 
+  /* allocate ekt data associated with stream */
+  stat = ekt_alloc(&str->ekt, p->ekt);
+  if (stat) {
+    auth_dealloc(str->rtcp_auth);
+    cipher_dealloc(str->rtcp_cipher);
+    auth_dealloc(str->rtp_auth);
+    cipher_dealloc(str->rtp_cipher);
+    crypto_free(str->limit);
+    crypto_free(str);
+   return stat;    
+  }
+
   return err_status_ok;
 }
 
@@ -217,6 +226,12 @@
     if (status)
       return status;
   }
+
+  status = rdbx_dealloc(&stream->rtp_rdbx);
+  if (status)
+    return status;
+
+  /* DAM - need to deallocate EKT here */
   
   /* deallocate srtp stream context */
   crypto_free(stream);
@@ -260,8 +275,12 @@
     return status;
 
   /* initialize replay databases */
-  rdbx_init(&str->rtp_rdbx);
+  status = rdbx_init(&str->rtp_rdbx,
+		     rdbx_get_window_size(&stream_template->rtp_rdbx));
+  if (status)
+    return status;
   rdb_init(&str->rtcp_rdb);
+  str->allow_repeat_tx = stream_template->allow_repeat_tx;
   
   /* set ssrc to that provided */
   str->ssrc = ssrc;
@@ -271,6 +290,9 @@
   str->rtp_services  = stream_template->rtp_services;
   str->rtcp_services = stream_template->rtcp_services;
 
+  /* set pointer to EKT data associated with stream */
+  str->ekt = stream_template->ekt;
+
   /* defensive coding */
   str->next = NULL;
 
@@ -283,14 +305,15 @@
  *
  * srtp_kdf_t is a key derivation context
  *
- * srtp_kdf_init(&kdf, k) initializes kdf with the key k
+ * srtp_kdf_init(&kdf, cipher_id, k, keylen) initializes kdf to use cipher
+ * described by cipher_id, with the master key k with length in octets keylen.
  * 
  * srtp_kdf_generate(&kdf, l, kl, keylen) derives the key
  * corresponding to label l and puts it into kl; the length
  * of the key in octets is provided as keylen.  this function
  * should be called once for each subkey that is derived.
  *
- * srtp_kdf_clear(&kdf) zeroizes the kdf state
+ * srtp_kdf_clear(&kdf) zeroizes and deallocates the kdf state
  */
 
 typedef enum {
@@ -309,40 +332,57 @@
  */
 
 typedef struct { 
-  aes_icm_ctx_t c;    /* cipher used for key derivation  */  
+  cipher_t *cipher;    /* cipher used for key derivation  */  
 } srtp_kdf_t;
 
 err_status_t
-srtp_kdf_init(srtp_kdf_t *kdf, const uint8_t key[30]) {
+srtp_kdf_init(srtp_kdf_t *kdf, cipher_type_id_t cipher_id, const uint8_t *key, int length) {
 
-  aes_icm_context_init(&kdf->c, key);
+  err_status_t stat;
+  stat = crypto_kernel_alloc_cipher(cipher_id, &kdf->cipher, length);
+  if (stat)
+    return stat;
+
+  stat = cipher_init(kdf->cipher, key, direction_encrypt);
+  if (stat) {
+    cipher_dealloc(kdf->cipher);
+    return stat;
+  }
 
   return err_status_ok;
 }
 
 err_status_t
 srtp_kdf_generate(srtp_kdf_t *kdf, srtp_prf_label label,
-		  uint8_t *key, int length) {
+		  uint8_t *key, unsigned length) {
 
   v128_t nonce;
+  err_status_t status;
   
   /* set eigth octet of nonce to <label>, set the rest of it to zero */
   v128_set_to_zero(&nonce);
   nonce.v8[7] = label;
  
-  aes_icm_set_iv(&kdf->c, &nonce);  
+  status = cipher_set_iv(kdf->cipher, &nonce);
+  if (status)
+    return status;
   
   /* generate keystream output */
-  aes_icm_output(&kdf->c, key, length);
+  octet_string_set_to_zero(key, length);
+  status = cipher_encrypt(kdf->cipher, key, &length);
+  if (status)
+    return status;
 
   return err_status_ok;
 }
 
 err_status_t
 srtp_kdf_clear(srtp_kdf_t *kdf) {
-  
-  /* zeroize aes context */
-  octet_string_set_to_zero((uint8_t *)kdf, sizeof(srtp_kdf_t));
+  err_status_t status;
+  status = cipher_dealloc(kdf->cipher);
+  if (status)
+    return status;
+  kdf->cipher = NULL;
 
   return err_status_ok;  
 }
@@ -354,36 +394,76 @@
 #define MAX_SRTP_KEY_LEN 256
 
 
+/* Get the base key length corresponding to a given combined key+salt
+ * length for the given cipher.
+ * Assumption is that for AES-ICM a key length < 30 is Ismacryp using
+ * AES-128 and short salts; everything else uses a salt length of 14.
+ * TODO: key and salt lengths should be separate fields in the policy.  */
+inline int base_key_length(const cipher_type_t *cipher, int key_length)
+{
+  if (cipher->id != AES_ICM)
+    return key_length;
+  else if (key_length > 16 && key_length < 30)
+    return 16;
+  return key_length - 14;
+}
+
 err_status_t
 srtp_stream_init_keys(srtp_stream_ctx_t *srtp, const void *key) {
   err_status_t stat;
   srtp_kdf_t kdf;
   uint8_t tmp_key[MAX_SRTP_KEY_LEN];
-  
+  int kdf_keylen = 30, rtp_keylen, rtcp_keylen;
+  int rtp_base_key_len, rtp_salt_len;
+  int rtcp_base_key_len, rtcp_salt_len;
+
+  /* If RTP or RTCP have a key length > AES-128, assume matching kdf. */
+  /* TODO: kdf algorithm, master key length, and master salt length should
+   * be part of srtp_policy_t. */
+  rtp_keylen = cipher_get_key_length(srtp->rtp_cipher);
+  if (rtp_keylen > kdf_keylen)
+    kdf_keylen = rtp_keylen;
+
+  rtcp_keylen = cipher_get_key_length(srtp->rtcp_cipher);
+  if (rtcp_keylen > kdf_keylen)
+    kdf_keylen = rtcp_keylen;
+
   /* initialize KDF state     */
-  srtp_kdf_init(&kdf, (const uint8_t *)key);
+  stat = srtp_kdf_init(&kdf, AES_ICM, (const uint8_t *)key, kdf_keylen);
+  if (stat) {
+    return err_status_init_fail;
+  }
+
+  rtp_base_key_len = base_key_length(srtp->rtp_cipher->type, rtp_keylen);
+  rtp_salt_len = rtp_keylen - rtp_base_key_len;
   
   /* generate encryption key  */
-  srtp_kdf_generate(&kdf, label_rtp_encryption, 
-		    tmp_key, cipher_get_key_length(srtp->rtp_cipher));
+  stat = srtp_kdf_generate(&kdf, label_rtp_encryption, 
+			   tmp_key, rtp_base_key_len);
+  if (stat) {
+    /* zeroize temp buffer */
+    octet_string_set_to_zero(tmp_key, MAX_SRTP_KEY_LEN);
+    return err_status_init_fail;
+  }
+
   /* 
-   * if the cipher in the srtp context is aes_icm, then we need
+   * if the cipher in the srtp context uses a salt, then we need
    * to generate the salt value
    */
-  if (srtp->rtp_cipher->type == &aes_icm) {
-    /* FIX!!! this is really the cipher key length; rest is salt */
-    int base_key_len = 16;
-    int salt_len = cipher_get_key_length(srtp->rtp_cipher) - base_key_len;
-    
-    debug_print(mod_srtp, "found aes_icm, generating salt", NULL);
+  if (rtp_salt_len > 0) {
+    debug_print(mod_srtp, "found rtp_salt_len > 0, generating salt", NULL);
 
     /* generate encryption salt, put after encryption key */
-    srtp_kdf_generate(&kdf, label_rtp_salt, 
-		      tmp_key + base_key_len, salt_len);
+    stat = srtp_kdf_generate(&kdf, label_rtp_salt, 
+			     tmp_key + rtp_base_key_len, rtp_salt_len);
+    if (stat) {
+      /* zeroize temp buffer */
+      octet_string_set_to_zero(tmp_key, MAX_SRTP_KEY_LEN);
+      return err_status_init_fail;
+    }
   }
   debug_print(mod_srtp, "cipher key: %s", 
-	      octet_string_hex_string(tmp_key, 
-		      cipher_get_key_length(srtp->rtp_cipher)));  
+	      octet_string_hex_string(tmp_key, rtp_keylen));
 
   /* initialize cipher */
   stat = cipher_init(srtp->rtp_cipher, tmp_key, direction_any);
@@ -394,8 +474,13 @@
   }
 
   /* generate authentication key */
-  srtp_kdf_generate(&kdf, label_rtp_msg_auth,
-		    tmp_key, auth_get_key_length(srtp->rtp_auth));
+  stat = srtp_kdf_generate(&kdf, label_rtp_msg_auth,
+			   tmp_key, auth_get_key_length(srtp->rtp_auth));
+  if (stat) {
+    /* zeroize temp buffer */
+    octet_string_set_to_zero(tmp_key, MAX_SRTP_KEY_LEN);
+    return err_status_init_fail;
+  }
   debug_print(mod_srtp, "auth key:   %s",
 	      octet_string_hex_string(tmp_key, 
 				      auth_get_key_length(srtp->rtp_auth))); 
@@ -412,27 +497,37 @@
    * ...now initialize SRTCP keys
    */
 
+  rtcp_base_key_len = base_key_length(srtp->rtcp_cipher->type, rtcp_keylen);
+  rtcp_salt_len = rtcp_keylen - rtcp_base_key_len;
+  
   /* generate encryption key  */
-  srtp_kdf_generate(&kdf, label_rtcp_encryption, 
-		    tmp_key, cipher_get_key_length(srtp->rtcp_cipher));
+  stat = srtp_kdf_generate(&kdf, label_rtcp_encryption, 
+			   tmp_key, rtcp_base_key_len);
+  if (stat) {
+    /* zeroize temp buffer */
+    octet_string_set_to_zero(tmp_key, MAX_SRTP_KEY_LEN);
+    return err_status_init_fail;
+  }
+
   /* 
-   * if the cipher in the srtp context is aes_icm, then we need
+   * if the cipher in the srtp context uses a salt, then we need
    * to generate the salt value
    */
-  if (srtp->rtcp_cipher->type == &aes_icm) {
-    /* FIX!!! this is really the cipher key length; rest is salt */
-    int base_key_len = 16;
-    int salt_len = cipher_get_key_length(srtp->rtcp_cipher) - base_key_len;
-
-    debug_print(mod_srtp, "found aes_icm, generating rtcp salt", NULL);
+  if (rtcp_salt_len > 0) {
+    debug_print(mod_srtp, "found rtcp_salt_len > 0, generating rtcp salt",
+		NULL);
 
     /* generate encryption salt, put after encryption key */
-    srtp_kdf_generate(&kdf, label_rtcp_salt, 
-		      tmp_key + base_key_len, salt_len);
+    stat = srtp_kdf_generate(&kdf, label_rtcp_salt, 
+			     tmp_key + rtcp_base_key_len, rtcp_salt_len);
+    if (stat) {
+      /* zeroize temp buffer */
+      octet_string_set_to_zero(tmp_key, MAX_SRTP_KEY_LEN);
+      return err_status_init_fail;
+    }
   }
   debug_print(mod_srtp, "rtcp cipher key: %s", 
-	      octet_string_hex_string(tmp_key, 
-		   cipher_get_key_length(srtp->rtcp_cipher)));  
+	      octet_string_hex_string(tmp_key, rtcp_keylen));  
 
   /* initialize cipher */
   stat = cipher_init(srtp->rtcp_cipher, tmp_key, direction_any);
@@ -443,8 +538,14 @@
   }
 
   /* generate authentication key */
-  srtp_kdf_generate(&kdf, label_rtcp_msg_auth,
-		    tmp_key, auth_get_key_length(srtp->rtcp_auth));
+  stat = srtp_kdf_generate(&kdf, label_rtcp_msg_auth,
+			   tmp_key, auth_get_key_length(srtp->rtcp_auth));
+  if (stat) {
+    /* zeroize temp buffer */
+    octet_string_set_to_zero(tmp_key, MAX_SRTP_KEY_LEN);
+    return err_status_init_fail;
+  }
+
   debug_print(mod_srtp, "rtcp auth key:   %s",
 	      octet_string_hex_string(tmp_key, 
 		     auth_get_key_length(srtp->rtcp_auth))); 
@@ -458,8 +559,10 @@
   }
 
   /* clear memory then return */
-  srtp_kdf_clear(&kdf);
+  stat = srtp_kdf_clear(&kdf);
   octet_string_set_to_zero(tmp_key, MAX_SRTP_KEY_LEN);  
+  if (stat)
+    return err_status_init_fail;
 
   return err_status_ok;
 }
@@ -473,7 +576,18 @@
 	       p->ssrc.value);
 
    /* initialize replay database */
-   rdbx_init(&srtp->rtp_rdbx);
+   /* window size MUST be at least 64.  MAY be larger.  Values more than
+    * 2^15 aren't meaningful due to how extended sequence numbers are
+    * calculated.   Let a window size of 0 imply the default value. */
+
+   if (p->window_size != 0 && (p->window_size < 64 || p->window_size >= 0x8000))
+     return err_status_bad_param;
+
+   if (p->window_size != 0)
+     err = rdbx_init(&srtp->rtp_rdbx, p->window_size);
+   else
+     err = rdbx_init(&srtp->rtp_rdbx, 128);
+   if (err) return err;
 
    /* initialize key limit to maximum value */
 #ifdef NO_64BIT_MATH
@@ -503,11 +617,32 @@
    /* initialize SRTCP replay database */
    rdb_init(&srtp->rtcp_rdb);
 
+   /* initialize allow_repeat_tx */
+   /* guard against uninitialized memory: allow only 0 or 1 here */
+   if (p->allow_repeat_tx != 0 && p->allow_repeat_tx != 1) {
+     rdbx_dealloc(&srtp->rtp_rdbx);
+     return err_status_bad_param;
+   }
+   srtp->allow_repeat_tx = p->allow_repeat_tx;
+
    /* DAM - no RTCP key limit at present */
 
    /* initialize keys */
    err = srtp_stream_init_keys(srtp, p->key);
-   if (err) return err;
+   if (err) {
+     rdbx_dealloc(&srtp->rtp_rdbx);
+     return err;
+   }
+
+   /* 
+    * if EKT is in use, then initialize the EKT data associated with
+    * the stream
+    */
+   err = ekt_stream_init_from_policy(srtp->ekt, p->ekt);
+   if (err) {
+     rdbx_dealloc(&srtp->rtp_rdbx);
+     return err;
+   }
 
    return err_status_ok;  
  }
@@ -697,9 +832,12 @@
     */
    delta = rdbx_estimate_index(&stream->rtp_rdbx, &est, ntohs(hdr->seq));
    status = rdbx_check(&stream->rtp_rdbx, delta);
-   if (status)
-     return status;  /* we've been asked to reuse an index */
-   rdbx_add_index(&stream->rtp_rdbx, delta);
+   if (status) {
+     if (status != err_status_replay_fail || !stream->allow_repeat_tx)
+       return status;  /* we've been asked to reuse an index */
+   }
+   else
+     rdbx_add_index(&stream->rtp_rdbx, delta);
 
 #ifdef NO_64BIT_MATH
    debug_print2(mod_srtp, "estimated packet index: %08x%08x", 
@@ -711,7 +849,7 @@
    /* 
     * if we're using rindael counter mode, set nonce and seq 
     */
-   if (stream->rtp_cipher->type == &aes_icm) {
+   if (stream->rtp_cipher->type->id == AES_ICM) {
      v128_t iv;
 
      iv.v32[0] = 0;
@@ -888,7 +1026,7 @@
    * set the cipher's IV properly, depending on whatever cipher we
    * happen to be using
    */
-  if (stream->rtp_cipher->type == &aes_icm) {
+  if (stream->rtp_cipher->type->id == AES_ICM) {
 
     /* aes counter mode */
     iv.v32[0] = 0;
@@ -899,7 +1037,7 @@
 #else
     iv.v64[1] = be64_to_cpu(est << 16);
 #endif
-    status = aes_icm_set_iv((aes_icm_ctx_t*)stream->rtp_cipher->state, &iv);
+    status = cipher_set_iv(stream->rtp_cipher, &iv);
   } else {  
     
     /* no particular format - set the iv to the pakcet index */  
@@ -1020,9 +1158,9 @@
     break;
   }
 
-  /* if we're encrypting, add keystream into ciphertext */
+  /* if we're decrypting, add keystream into ciphertext */
   if (enc_start) {
-    status = cipher_encrypt(stream->rtp_cipher, 
+    status = cipher_decrypt(stream->rtp_cipher, 
 			    (uint8_t *)enc_start, &enc_octet_len);
     if (status)
       return err_status_cipher_fail;
@@ -1111,6 +1249,21 @@
   return status;
 }
 
+err_status_t
+srtp_shutdown() {
+  err_status_t status;
+
+  /* shut down crypto kernel */
+  status = crypto_kernel_shutdown();
+  if (status) 
+    return status;
+
+  /* shutting down crypto kernel frees the srtp debug module as well */
+
+  return err_status_ok;
+}
+
+
 /* 
  * The following code is under consideration for removal.  See
  * SRTP_MAX_TRAILER_LEN 
@@ -1189,6 +1342,9 @@
     status = auth_dealloc(session->stream_template->rtp_auth);
     if (status)
       return status;
+    status = rdbx_dealloc(&session->stream_template->rtp_rdbx);
+    if (status)
+      return status;
     crypto_free(session->stream_template);
   }
 
@@ -1317,7 +1473,11 @@
     return err_status_no_ctx;
 
   /* remove stream from the list */
-  last_stream->next = stream->next;
+  if (last_stream == stream)
+    /* stream was first in list */
+    session->stream_list = stream->next;
+  else
+    last_stream->next = stream->next;
 
   /* deallocate the stream */
   status = srtp_stream_dealloc(session, stream);
@@ -1345,7 +1505,7 @@
 void
 crypto_policy_set_rtp_default(crypto_policy_t *p) {
 
-  p->cipher_type     = AES_128_ICM;           
+  p->cipher_type     = AES_ICM;           
   p->cipher_key_len  = 30;                /* default 128 bits per RFC 3711 */
   p->auth_type       = HMAC_SHA1;             
   p->auth_key_len    = 20;                /* default 160 bits per RFC 3711 */
@@ -1357,7 +1517,7 @@
 void
 crypto_policy_set_rtcp_default(crypto_policy_t *p) {
 
-  p->cipher_type     = AES_128_ICM;           
+  p->cipher_type     = AES_ICM;           
   p->cipher_key_len  = 30;                 /* default 128 bits per RFC 3711 */
   p->auth_type       = HMAC_SHA1;             
   p->auth_key_len    = 20;                 /* default 160 bits per RFC 3711 */
@@ -1370,12 +1530,12 @@
 crypto_policy_set_aes_cm_128_hmac_sha1_32(crypto_policy_t *p) {
 
   /*
-   * corresponds to draft-ietf-mmusic-sdescriptions-12.txt
+   * corresponds to RFC 4568
    *
    * note that this crypto policy is intended for SRTP, but not SRTCP
    */
 
-  p->cipher_type     = AES_128_ICM;           
+  p->cipher_type     = AES_ICM;           
   p->cipher_key_len  = 30;                /* 128 bit key, 112 bit salt */
   p->auth_type       = HMAC_SHA1;             
   p->auth_key_len    = 20;                /* 160 bit key               */
@@ -1389,12 +1549,12 @@
 crypto_policy_set_aes_cm_128_null_auth(crypto_policy_t *p) {
 
   /*
-   * corresponds to draft-ietf-mmusic-sdescriptions-12.txt
+   * corresponds to RFC 4568
    *
    * note that this crypto policy is intended for SRTP, but not SRTCP
    */
 
-  p->cipher_type     = AES_128_ICM;           
+  p->cipher_type     = AES_ICM;           
   p->cipher_key_len  = 30;                /* 128 bit key, 112 bit salt */
   p->auth_type       = NULL_AUTH;             
   p->auth_key_len    = 0; 
@@ -1408,7 +1568,7 @@
 crypto_policy_set_null_cipher_hmac_sha1_80(crypto_policy_t *p) {
 
   /*
-   * corresponds to draft-ietf-mmusic-sdescriptions-12.txt
+   * corresponds to RFC 4568
    */
 
   p->cipher_type     = NULL_CIPHER;           
@@ -1421,6 +1581,40 @@
 }
 
 
+void
+crypto_policy_set_aes_cm_256_hmac_sha1_80(crypto_policy_t *p) {
+
+  /*
+   * corresponds to draft-ietf-avt-big-aes-03.txt
+   */
+
+  p->cipher_type     = AES_ICM;           
+  p->cipher_key_len  = 46;
+  p->auth_type       = HMAC_SHA1;             
+  p->auth_key_len    = 20;                /* default 160 bits per RFC 3711 */
+  p->auth_tag_len    = 10;                /* default 80 bits per RFC 3711 */
+  p->sec_serv        = sec_serv_conf_and_auth;
+}
+
+
+void
+crypto_policy_set_aes_cm_256_hmac_sha1_32(crypto_policy_t *p) {
+
+  /*
+   * corresponds to draft-ietf-avt-big-aes-03.txt
+   *
+   * note that this crypto policy is intended for SRTP, but not SRTCP
+   */
+
+  p->cipher_type     = AES_ICM;           
+  p->cipher_key_len  = 46;
+  p->auth_type       = HMAC_SHA1;             
+  p->auth_key_len    = 20;                /* default 160 bits per RFC 3711 */
+  p->auth_tag_len    = 4;                 /* default 80 bits per RFC 3711 */
+  p->sec_serv        = sec_serv_conf_and_auth;
+}
+
+
 /* 
  * secure rtcp functions
  */
@@ -1518,6 +1712,10 @@
   auth_start = (uint32_t *)hdr;
   auth_tag = (uint8_t *)hdr + *pkt_octet_len + sizeof(srtcp_trailer_t); 
 
+  /* perform EKT processing if needed */
+  ekt_write_data(stream->ekt, auth_tag, tag_len, pkt_octet_len, 
+		 rdbx_get_packet_index(&stream->rtp_rdbx));
+
   /* 
    * check sequence number for overruns, and copy it into the packet
    * if its value isn't too big
@@ -1532,14 +1730,14 @@
   /* 
    * if we're using rindael counter mode, set nonce and seq 
    */
-  if (stream->rtcp_cipher->type == &aes_icm) {
+  if (stream->rtcp_cipher->type->id == AES_ICM) {
     v128_t iv;
     
     iv.v32[0] = 0;
     iv.v32[1] = hdr->ssrc;  /* still in network order! */
     iv.v32[2] = htonl(seq_num >> 16);
     iv.v32[3] = htonl(seq_num << 16);
-    status = aes_icm_set_iv((aes_icm_ctx_t*)stream->rtcp_cipher->state, &iv);
+    status = cipher_set_iv(stream->rtcp_cipher, &iv);
 
   } else {  
     v128_t iv;
@@ -1613,7 +1811,9 @@
   unsigned enc_octet_len = 0;/* number of octets in encrypted portion */
   uint8_t *auth_tag = NULL; /* location of auth_tag within packet     */
   uint8_t tmp_tag[SRTP_MAX_TAG_LEN];
+  uint8_t tag_copy[SRTP_MAX_TAG_LEN];
   err_status_t status;   
+  unsigned auth_len;
   int tag_len;
   srtp_stream_ctx_t *stream;
   int prefix_len;
@@ -1631,6 +1831,23 @@
   if (stream == NULL) {
     if (ctx->stream_template != NULL) {
       stream = ctx->stream_template;
+
+      /* 
+       * check to see if stream_template has an EKT data structure, in
+       * which case we initialize the template using the EKT policy
+       * referenced by that data (which consists of decrypting the
+       * master key from the EKT field)
+       *
+       * this function initializes a *provisional* stream, and this
+       * stream should not be accepted until and unless the packet
+       * passes its authentication check
+       */ 
+      if (stream->ekt != NULL) {
+	status = srtp_stream_init_from_ekt(stream, srtcp_hdr, *pkt_octet_len);
+	if (status)
+	  return status;
+      }
+
       debug_print(mod_srtp, "srtcp using provisional stream (SSRC: 0x%08x)", 
 		  hdr->ssrc);
     } else {
@@ -1670,7 +1887,23 @@
    * (note that srtcp *always* uses authentication, unlike srtp)
    */
   auth_start = (uint32_t *)hdr;
-  auth_tag = (uint8_t *)hdr + *pkt_octet_len - tag_len;
+  auth_len = *pkt_octet_len - tag_len;
+  auth_tag = (uint8_t *)hdr + auth_len;
+
+  /* 
+   * if EKT is in use, then we make a copy of the tag from the packet,
+   * and then zeroize the location of the base tag
+   *
+   * we first re-position the auth_tag pointer so that it points to
+   * the base tag
+   */
+  if (stream->ekt) {
+    auth_tag -= ekt_octets_after_base_tag(stream->ekt);
+    memcpy(tag_copy, auth_tag, tag_len);
+    octet_string_set_to_zero(auth_tag, tag_len);
+    auth_tag = tag_copy;
+    auth_len += tag_len;
+  }
 
   /* 
    * check the sequence number for replays
@@ -1685,14 +1918,14 @@
   /* 
    * if we're using aes counter mode, set nonce and seq 
    */
-  if (stream->rtcp_cipher->type == &aes_icm) {
+  if (stream->rtcp_cipher->type->id == AES_ICM) {
     v128_t iv;
 
     iv.v32[0] = 0;
     iv.v32[1] = hdr->ssrc; /* still in network order! */
     iv.v32[2] = htonl(seq_num >> 16);
     iv.v32[3] = htonl(seq_num << 16);
-    status = aes_icm_set_iv((aes_icm_ctx_t*)stream->rtcp_cipher->state, &iv);
+    status = cipher_set_iv(stream->rtcp_cipher, &iv);
 
   } else {  
     v128_t iv;
@@ -1713,8 +1946,7 @@
 
   /* run auth func over packet, put result into tmp_tag */
   status = auth_compute(stream->rtcp_auth, (uint8_t *)auth_start,  
-			*pkt_octet_len - tag_len,
-			tmp_tag);
+			auth_len, tmp_tag);
   debug_print(mod_srtp, "srtcp computed tag:       %s", 
 	      octet_string_hex_string(tmp_tag, tag_len));
   if (status)
@@ -1741,15 +1973,21 @@
 
   /* if we're decrypting, exor keystream into the message */
   if (enc_start) {
-    status = cipher_encrypt(stream->rtcp_cipher, 
+    status = cipher_decrypt(stream->rtcp_cipher, 
 			    (uint8_t *)enc_start, &enc_octet_len);
     if (status)
       return err_status_cipher_fail;
   }
 
-  /* decrease the packet length by the length of the auth tag and seq_num*/
+  /* decrease the packet length by the length of the auth tag and seq_num */
   *pkt_octet_len -= (tag_len + sizeof(srtcp_trailer_t));
 
+  /*
+   * if EKT is in effect, subtract the EKT data out of the packet
+   * length
+   */
+  *pkt_octet_len -= ekt_octets_after_base_tag(stream->ekt);
+
   /* 
    * verify that stream is for received traffic - this check will
    * detect SSRC collisions, since a stream that appears in both
@@ -1823,10 +2061,14 @@
   case srtp_profile_null_sha1_80:
     crypto_policy_set_null_cipher_hmac_sha1_80(policy);
     break;
-    /* the following profiles are not (yet) supported */
-  case srtp_profile_null_sha1_32:
   case srtp_profile_aes256_cm_sha1_80:
+    crypto_policy_set_aes_cm_256_hmac_sha1_80(policy);
+    break;
   case srtp_profile_aes256_cm_sha1_32:
+    crypto_policy_set_aes_cm_256_hmac_sha1_32(policy);
+    break;
+    /* the following profiles are not (yet) supported */
+  case srtp_profile_null_sha1_32:
   default:
     return err_status_bad_param;
   }
@@ -1849,10 +2091,14 @@
   case srtp_profile_null_sha1_80:
     crypto_policy_set_null_cipher_hmac_sha1_80(policy);
     break;
-    /* the following profiles are not (yet) supported */
-  case srtp_profile_null_sha1_32:
   case srtp_profile_aes256_cm_sha1_80:
+    crypto_policy_set_aes_cm_256_hmac_sha1_80(policy);
+    break;
   case srtp_profile_aes256_cm_sha1_32:
+    crypto_policy_set_aes_cm_256_hmac_sha1_80(policy);
+    break;
+    /* the following profiles are not (yet) supported */
+  case srtp_profile_null_sha1_32:
   default:
     return err_status_bad_param;
   }
@@ -1881,10 +2127,14 @@
   case srtp_profile_null_sha1_80:
     return 16;
     break;
-    /* the following profiles are not (yet) supported */
-  case srtp_profile_null_sha1_32:
   case srtp_profile_aes256_cm_sha1_80:
+    return 32;
+    break;
   case srtp_profile_aes256_cm_sha1_32:
+    return 32;
+    break;
+    /* the following profiles are not (yet) supported */
+  case srtp_profile_null_sha1_32:
   default:
     return 0;  /* indicate error by returning a zero */
   }
@@ -1903,10 +2153,14 @@
   case srtp_profile_null_sha1_80:
     return 14;
     break;
-    /* the following profiles are not (yet) supported */
-  case srtp_profile_null_sha1_32:
   case srtp_profile_aes256_cm_sha1_80:
+    return 14;
+    break;
   case srtp_profile_aes256_cm_sha1_32:
+    return 14;
+    break;
+    /* the following profiles are not (yet) supported */
+  case srtp_profile_null_sha1_32:
   default:
     return 0;  /* indicate error by returning a zero */
   }
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/srtp.def zorg/third_party/srtp/srtp.def
--- original/third_party/srtp/srtp.def	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/srtp.def	2010-11-26 16:21:58.352995000 +0100
@@ -89,4 +89,3 @@
 aes_icm_alloc_ismacryp
 crypto_alloc
 crypto_free
-\ No newline at end of file
\ No newline at end of file
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/srtp.sln zorg/third_party/srtp/srtp.sln
--- original/third_party/srtp/srtp.sln	1970-01-01 01:00:00.000000000 +0100
+++ zorg/third_party/srtp/srtp.sln	2010-11-26 16:21:58.352995000 +0100
@@ -0,0 +1,26 @@
+﻿
+Microsoft Visual Studio Solution File, Format Version 9.00
+# Visual C++ Express 2005
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "srtp", "srtp.vcproj", "{EEF031CB-FED8-451E-A471-91EC8D4F6750}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug Dll|Win32 = Debug Dll|Win32
+		Debug|Win32 = Debug|Win32
+		Release Dll|Win32 = Release Dll|Win32
+		Release|Win32 = Release|Win32
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{EEF031CB-FED8-451E-A471-91EC8D4F6750}.Debug Dll|Win32.ActiveCfg = Debug Dll|Win32
+		{EEF031CB-FED8-451E-A471-91EC8D4F6750}.Debug Dll|Win32.Build.0 = Debug Dll|Win32
+		{EEF031CB-FED8-451E-A471-91EC8D4F6750}.Debug|Win32.ActiveCfg = Debug|Win32
+		{EEF031CB-FED8-451E-A471-91EC8D4F6750}.Debug|Win32.Build.0 = Debug|Win32
+		{EEF031CB-FED8-451E-A471-91EC8D4F6750}.Release Dll|Win32.ActiveCfg = Release Dll|Win32
+		{EEF031CB-FED8-451E-A471-91EC8D4F6750}.Release Dll|Win32.Build.0 = Release Dll|Win32
+		{EEF031CB-FED8-451E-A471-91EC8D4F6750}.Release|Win32.ActiveCfg = Release|Win32
+		{EEF031CB-FED8-451E-A471-91EC8D4F6750}.Release|Win32.Build.0 = Release|Win32
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+EndGlobal
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/srtp.vcproj zorg/third_party/srtp/srtp.vcproj
--- original/third_party/srtp/srtp.vcproj	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/srtp.vcproj	2010-11-26 16:21:58.352995000 +0100
@@ -49,7 +49,7 @@
 				PreprocessorDefinitions="WIN32;_DEBUG;_LIB;HAVE_CONFIG_H"
 				MinimalRebuild="true"
 				BasicRuntimeChecks="3"
-				RuntimeLibrary="3"
+				RuntimeLibrary="1"
 				StructMemberAlignment="0"
 				UsePrecompiledHeader="0"
 				WarningLevel="3"
@@ -116,7 +116,7 @@
 				Name="VCCLCompilerTool"
 				AdditionalIncludeDirectories="crypto/include;include"
 				PreprocessorDefinitions="WIN32;NDEBUG;_LIB;HAVE_CONFIG_H"
-				RuntimeLibrary="2"
+				RuntimeLibrary="0"
 				StructMemberAlignment="0"
 				UsePrecompiledHeader="0"
 				WarningLevel="3"
@@ -324,6 +324,10 @@
 			UniqueIdentifier="{4FC737F1-C7A5-4376-A066-2A32D752A2FF}"
 			>
 			<File
+				RelativePath=".\srtp\ekt.c"
+				>
+			</File>
+			<File
 				RelativePath=".\srtp\srtp.c"
 				>
 			</File>
@@ -484,10 +488,6 @@
 				>
 			</File>
 			<File
-				RelativePath=".\crypto\include\crypto_math.h"
-				>
-			</File>
-			<File
 				RelativePath=".\crypto\include\crypto_types.h"
 				>
 			</File>
@@ -500,6 +500,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\include\ekt.h"
+				>
+			</File>
+			<File
 				RelativePath=".\crypto\include\err.h"
 				>
 			</File>
@@ -516,10 +520,6 @@
 				>
 			</File>
 			<File
-				RelativePath=".\crypto\include\kernel_compat.h"
-				>
-			</File>
-			<File
 				RelativePath=".\crypto\include\key.h"
 				>
 			</File>
@@ -548,10 +548,6 @@
 				>
 			</File>
 			<File
-				RelativePath=".\include\rtp.h"
-				>
-			</File>
-			<File
 				RelativePath=".\crypto\include\sha1.h"
 				>
 			</File>
@@ -560,15 +556,15 @@
 				>
 			</File>
 			<File
-				RelativePath=".\crypto\include\stat.h"
+				RelativePath=".\include\srtp_priv.h"
 				>
 			</File>
 			<File
-				RelativePath=".\include\ut_sim.h"
+				RelativePath=".\crypto\include\stat.h"
 				>
 			</File>
 			<File
-				RelativePath=".\crypto\include\xfm.h"
+				RelativePath=".\include\ut_sim.h"
 				>
 			</File>
 		</Filter>
@@ -579,6 +575,10 @@
 			>
 		</Filter>
 		<File
+			RelativePath=".\config.hw"
+			>
+		</File>
+		<File
 			RelativePath=".\srtp.def"
 			>
 		</File>
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/test/dtls_srtp_driver.c zorg/third_party/srtp/test/dtls_srtp_driver.c
--- original/third_party/srtp/test/dtls_srtp_driver.c	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/test/dtls_srtp_driver.c	2010-11-26 16:21:58.352995000 +0100
@@ -47,7 +47,7 @@
 #include "srtp_priv.h"
 
 err_status_t 
-test_dtls_srtp();
+test_dtls_srtp(void);
 
 srtp_hdr_t *
 srtp_create_test_packet(int pkt_octet_len, uint32_t ssrc);
@@ -63,7 +63,7 @@
 int
 main(int argc, char *argv[]) {
   unsigned do_list_mods      = 0;
-  char q;
+  int q;
   err_status_t err;
 
   printf("dtls_srtp_driver\n");
@@ -112,12 +112,19 @@
   }
   printf("passed\n");
   
+  /* shut down srtp library */
+  err = srtp_shutdown();
+  if (err) {
+    printf("error: srtp shutdown failed with error code %d\n", err);
+    exit(1);
+  }
+
   return 0;
 }
 
 
 err_status_t
-test_dtls_srtp() {
+test_dtls_srtp(void) {
   srtp_hdr_t *test_packet;
   int test_packet_len = 80;
   srtp_t s;
@@ -183,12 +190,21 @@
   err = crypto_policy_set_from_profile_for_rtcp(&policy.rtcp, profile);
   if (err) return err;
   policy.ssrc.type  = ssrc_any_inbound;
+  policy.ekt = NULL;
+  policy.window_size = 128;
+  policy.allow_repeat_tx = 0;
   policy.next = NULL;
     
   err = srtp_add_stream(s, &policy);
   if (err)
     return err;
   
+  err = srtp_dealloc(s);
+  if (err)
+    return err;
+
+  free(test_packet);
+
   return err_status_ok;
 }
 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/test/rdbx_driver.c zorg/third_party/srtp/test/rdbx_driver.c
--- original/third_party/srtp/test/rdbx_driver.c	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/test/rdbx_driver.c	2010-11-26 16:21:58.352995000 +0100
@@ -55,10 +55,10 @@
 #include "ut_sim.h"
 
 err_status_t 
-test_replay_dbx(int num_trials);
+test_replay_dbx(int num_trials, unsigned long ws);
 
 double
-rdbx_check_adds_per_second(int num_trials);
+rdbx_check_adds_per_second(int num_trials, unsigned long ws);
 
 void
 usage(char *prog_name) {
@@ -70,7 +70,7 @@
 main (int argc, char *argv[]) {
   double rate;
   err_status_t status;
-  char q;
+  int q;
   unsigned do_timing_test = 0;
   unsigned do_validation = 0;
 
@@ -99,9 +99,18 @@
     usage(argv[0]);
 
   if (do_validation) {
-  printf("testing rdbx_t...\n");
+    printf("testing rdbx_t (ws=128)...\n");
 
-    status = test_replay_dbx(1 << 12);
+    status = test_replay_dbx(1 << 12, 128);
+    if (status) {
+      printf("failed\n");
+      exit(1);
+    }
+    printf("passed\n");
+
+    printf("testing rdbx_t (ws=1024)...\n");
+
+    status = test_replay_dbx(1 << 12, 1024);
     if (status) {
       printf("failed\n");
       exit(1);
@@ -110,8 +119,10 @@
   }
 
   if (do_timing_test) {
-    rate = rdbx_check_adds_per_second(1 << 18);
-    printf("rdbx_check/replay_adds per second: %e\n", rate);
+    rate = rdbx_check_adds_per_second(1 << 18, 128);
+    printf("rdbx_check/replay_adds per second (ws=128): %e\n", rate);
+    rate = rdbx_check_adds_per_second(1 << 18, 1024);
+    printf("rdbx_check/replay_adds per second (ws=1024): %e\n", rate);
   }
   
   return 0;
@@ -119,8 +130,11 @@
 
 void
 print_rdbx(rdbx_t *rdbx) {
+  char buf[2048];
   printf("rdbx: {%llu, %s}\n",
-	 (unsigned long long)(rdbx->index), v128_bit_string(&rdbx->bitmask));
+	 (unsigned long long)(rdbx->index),
+	 bitvector_bit_string(&rdbx->bitmask, buf, sizeof(buf))
+);
 }
 
 
@@ -183,28 +197,38 @@
 }
 
 err_status_t
-rdbx_check_unordered(rdbx_t *rdbx, uint32_t idx) {
+rdbx_check_add_unordered(rdbx_t *rdbx, uint32_t idx) {
+  int delta;
+  xtd_seq_num_t est;
   err_status_t rstat;
 
-  rstat = rdbx_check(rdbx, idx);
+  delta = index_guess(&rdbx->index, &est, idx);
+
+  rstat = rdbx_check(rdbx, delta);
   if ((rstat != err_status_ok) && (rstat != err_status_replay_old)) {
-    printf("replay_check_unordered failed at index %u\n", idx);
+    printf("replay_check_add_unordered failed at index %u\n", idx);
     return err_status_algo_fail;
   }
+  if (rstat == err_status_replay_old) {
+	return err_status_ok;
+  }
+  if (rdbx_add_index(rdbx, delta) != err_status_ok) {
+    printf("rdbx_add_index failed at index %u\n", idx);
+    return err_status_algo_fail;
+  }  
+
   return err_status_ok;
 }
 
-#define MAX_IDX 160
-
 err_status_t
-test_replay_dbx(int num_trials) {
+test_replay_dbx(int num_trials, unsigned long ws) {
   rdbx_t rdbx;
   uint32_t idx, ircvd;
   ut_connection utc;
   err_status_t status;
   int num_fp_trials;
 
-  status = rdbx_init(&rdbx);
+  status = rdbx_init(&rdbx, ws);
   if (status) {
     printf("replay_init failed with error code %d\n", status);
     exit(1);
@@ -241,7 +265,9 @@
   printf("passed\n");
 
   /* re-initialize */
-  if (rdbx_init(&rdbx) != err_status_ok) {
+  rdbx_dealloc(&rdbx);
+
+  if (rdbx_init(&rdbx, ws) != err_status_ok) {
     printf("replay_init failed\n");
     return err_status_init_fail;
   }
@@ -257,12 +283,40 @@
   printf("\ttesting non-sequential insertion...");  
   for (idx=0; idx < num_trials; idx++) {
     ircvd = ut_next_index(&utc);
-    status = rdbx_check_unordered(&rdbx, ircvd);
+    status = rdbx_check_add_unordered(&rdbx, ircvd);
     if (status)
       return status;
+	status = rdbx_check_expect_failure(&rdbx, ircvd);
+	if (status)
+		return status;
   }
   printf("passed\n");
 
+  /* re-initialize */
+  rdbx_dealloc(&rdbx);
+
+  if (rdbx_init(&rdbx, ws) != err_status_ok) {
+    printf("replay_init failed\n");
+    return err_status_init_fail;
+  }
+
+  /*
+   * test insertion with large gaps.
+   * check for false positives for each insertion.
+   */
+  printf("\ttesting insertion with large gaps...");  
+  for (idx=0, ircvd=0; idx < num_trials; idx++, ircvd += (1 << (rand() % 12))) {
+    status = rdbx_check_add(&rdbx, ircvd);
+    if (status)
+      return status;
+    status = rdbx_check_expect_failure(&rdbx, ircvd);
+    if (status)
+      return status;
+  }
+  printf("passed\n");
+
+  rdbx_dealloc(&rdbx);
+
   return err_status_ok;
 }
 
@@ -272,7 +326,7 @@
 #include <stdlib.h>     /* for random() */
 
 double
-rdbx_check_adds_per_second(int num_trials) {
+rdbx_check_adds_per_second(int num_trials, unsigned long ws) {
   uint32_t i;
   int delta;
   rdbx_t rdbx;
@@ -280,7 +334,7 @@
   clock_t timer;
   int failures;                    /* count number of failures        */
   
-  if (rdbx_init(&rdbx) != err_status_ok) {
+  if (rdbx_init(&rdbx, ws) != err_status_ok) {
     printf("replay_init failed\n");
     exit(1);
   }  
@@ -301,6 +355,8 @@
 
   printf("number of failures: %d \n", failures);
 
+  rdbx_dealloc(&rdbx);
+
   return (double) CLOCKS_PER_SEC * num_trials / timer;
 }
 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/test/replay_driver.c zorg/third_party/srtp/test/replay_driver.c
--- original/third_party/srtp/test/replay_driver.c	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/test/replay_driver.c	2010-11-26 16:21:58.352995000 +0100
@@ -114,15 +114,23 @@
 }
 
 err_status_t
-rdb_check_unordered(rdb_t *rdb, uint32_t idx) {
+rdb_check_add_unordered(rdb_t *rdb, uint32_t idx) {
   err_status_t rstat;
 
  /* printf("index: %u\n", idx); */
   rstat = rdb_check(rdb, idx);
   if ((rstat != err_status_ok) && (rstat != err_status_replay_old)) {
-    printf("rdb_check_unordered failed at index %u\n", idx);
+    printf("rdb_check_add_unordered failed at index %u\n", idx);
     return rstat;
   }
+  if (rstat == err_status_replay_old) {
+	return err_status_ok;
+  }
+  if (rdb_add_index(rdb, idx) != err_status_ok) {
+    printf("rdb_add_index failed at index %u\n", idx);
+    return err_status_fail;
+  }  
+
   return err_status_ok;
 }
 
@@ -163,11 +171,51 @@
   
   for (idx=0; idx < num_trials; idx++) {
     ircvd = ut_next_index(&utc);
-    err = rdb_check_unordered(&rdb, ircvd);
+    err = rdb_check_add_unordered(&rdb, ircvd);
+    if (err) 
+      return err;
+    err = rdb_check_expect_failure(&rdb, ircvd);
+    if (err) 
+      return err;
+  }
+
+  /* re-initialize */
+  if (rdb_init(&rdb) != err_status_ok) {
+    printf("rdb_init failed\n");
+    return err_status_fail;
+  }
+
+  /* test insertion with large gaps */
+  for (idx=0, ircvd=0; idx < num_trials; idx++, ircvd += (1 << (rand() % 10))) {
+    err = rdb_check_add(&rdb, ircvd);
+    if (err)
+      return err;
+    err = rdb_check_expect_failure(&rdb, ircvd);
+    if (err)
+      return err;
+  }
+
+  /* re-initialize */
+  if (rdb_init(&rdb) != err_status_ok) {
+    printf("rdb_init failed\n");
+    return err_status_fail;
+  }
+
+  /* test loss of first 513 packets */
+  for (idx=0; idx < num_trials; idx++) {
+    err = rdb_check_add(&rdb, idx + 513);
     if (err) 
       return err;
   }
 
+  /* test for false positives */
+  for (idx=0; idx < num_trials + 513; idx++) {
+    err = rdb_check_expect_failure(&rdb, idx);
+    if (err) 
+      return err;
+  }
+
+
   return err_status_ok;
 }
 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/test/rtp.c zorg/third_party/srtp/test/rtp.c
--- original/third_party/srtp/test/rtp.c	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/test/rtp.c	2010-11-26 16:21:58.352995000 +0100
@@ -21,7 +21,7 @@
 #define PRINT_DEBUG    0    /* set to 1 to print out debugging data */
 #define VERBOSE_DEBUG  0    /* set to 1 to print out more data      */
 
-unsigned int
+int
 rtp_sendto(rtp_sender_t sender, const void* msg, int len) {
   int octets_sent;
   err_status_t stat;
@@ -61,7 +61,7 @@
   return octets_sent;
 }
 
-unsigned int
+int
 rtp_recvfrom(rtp_receiver_t receiver, void *msg, int *len) {
   int octets_recvd;
   err_status_t stat;
@@ -69,6 +69,11 @@
   octets_recvd = recvfrom(receiver->socket, (void *)&receiver->message,
 			 *len, 0, (struct sockaddr *) NULL, 0);
 
+  if (octets_recvd == -1) {
+    *len = 0;
+    return -1;
+  }
+
   /* verify rtp header */
   if (receiver->message.header.version != 2) {
     *len = 0;
@@ -100,7 +105,7 @@
 
 int
 rtp_sender_init(rtp_sender_t sender, 
-		int socket, 
+		int sock, 
 		struct sockaddr_in addr,
 		unsigned int ssrc) {
 
@@ -116,7 +121,7 @@
   sender->message.header.cc      = 0;
 
   /* set other stuff */
-  sender->socket = socket;
+  sender->socket = sock;
   sender->addr = addr;
 
   return 0;
@@ -124,7 +129,7 @@
 
 int
 rtp_receiver_init(rtp_receiver_t rcvr, 
-		  int socket, 
+		  int sock, 
 		  struct sockaddr_in addr,
 		  unsigned int ssrc) {
   
@@ -140,7 +145,7 @@
   rcvr->message.header.cc      = 0;
 
   /* set other stuff */
-  rcvr->socket = socket;
+  rcvr->socket = sock;
   rcvr->addr = addr;
 
   return 0;
@@ -152,16 +157,36 @@
 }
 
 int
+rtp_sender_deinit_srtp(rtp_sender_t sender) {
+  return srtp_dealloc(sender->srtp_ctx);
+}
+
+int
 rtp_receiver_init_srtp(rtp_receiver_t sender, const srtp_policy_t *policy) {
   return srtp_create(&sender->srtp_ctx, policy);
 }
 
+int
+rtp_receiver_deinit_srtp(rtp_receiver_t sender) {
+  return srtp_dealloc(sender->srtp_ctx);
+}
+
 rtp_sender_t 
-rtp_sender_alloc() {
+rtp_sender_alloc(void) {
   return (rtp_sender_t)malloc(sizeof(rtp_sender_ctx_t));
 }
 
+void
+rtp_sender_dealloc(rtp_sender_t rtp_ctx) {
+  free(rtp_ctx);
+}
+
 rtp_receiver_t 
-rtp_receiver_alloc() {
+rtp_receiver_alloc(void) {
   return (rtp_receiver_t)malloc(sizeof(rtp_receiver_ctx_t));
 }
+
+void
+rtp_receiver_dealloc(rtp_receiver_t rtp_ctx) {
+  return free(rtp_ctx);
+}
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/test/rtpw.c zorg/third_party/srtp/test/rtpw.c
--- original/third_party/srtp/test/rtpw.c	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/test/rtpw.c	2010-11-26 16:21:58.352995000 +0100
@@ -57,10 +57,14 @@
 #include <stdio.h>          /* for printf, fprintf */
 #include <stdlib.h>         /* for atoi()          */
 #include <errno.h>
-#include <unistd.h>         /* for close()         */
+#include <signal.h>         /* for signal()        */
 
 #include <string.h>         /* for strncpy()       */
 #include <time.h>	    /* for usleep()        */
+
+#ifdef HAVE_UNISTD_H
+#include <unistd.h>         /* for close()         */
+#endif
 #ifdef HAVE_SYS_SOCKET_H
 # include <sys/socket.h>
 #endif
@@ -116,6 +120,18 @@
 
 
 /*
+ * setup_signal_handler() sets up a signal handler to trigger
+ * cleanups after an interrupt
+ */
+int setup_signal_handler(char* name);
+
+/*
+ * handle_signal(...) handles interrupt signal to trigger cleanups
+ */
+
+volatile int interrupted = 0;
+
+/*
  * program_type distinguishes the [s]rtp sender and receiver cases
  */
 
@@ -158,6 +174,10 @@
   }
 #endif
 
+  if (setup_signal_handler(argv[0]) != 0) {
+    exit(1);
+  }
+
   /* initialize srtp library */
   status = srtp_init();
   if (status) {
@@ -263,7 +283,7 @@
     err = errno;
 #endif
     fprintf(stderr, "%s: couldn't open socket: %d\n", argv[0], err);
-    exit(1);
+   exit(1);
   }
 
   name.sin_addr   = rcvr_addr;    
@@ -329,7 +349,10 @@
     policy.ssrc.type  = ssrc_specific;
     policy.ssrc.value = ssrc;
     policy.key  = (uint8_t *) key;
+    policy.ekt  = NULL;
     policy.next = NULL;
+    policy.window_size = 128;
+    policy.allow_repeat_tx = 0;
     policy.rtp.sec_serv = sec_servs;
     policy.rtcp.sec_serv = sec_serv_none;  /* we don't do RTCP anyway */
 
@@ -382,6 +405,9 @@
     policy.rtcp.auth_key_len   = 0;
     policy.rtcp.auth_tag_len   = 0;
     policy.rtcp.sec_serv       = sec_serv_none;   
+    policy.window_size         = 0;
+    policy.allow_repeat_tx     = 0;
+    policy.ekt                 = NULL;
     policy.next                = NULL;
   }
 
@@ -426,7 +452,7 @@
     }
           
     /* read words from dictionary, then send them off */
-    while (fgets(word, MAX_WORD_LEN, dict) != NULL) { 
+    while (!interrupted && fgets(word, MAX_WORD_LEN, dict) != NULL) { 
       len = strlen(word) + 1;  /* plus one for null */
       
       if (len > MAX_WORD_LEN) 
@@ -437,7 +463,11 @@
       }
       usleep(USEC_RATE);
     }
-    
+
+    rtp_sender_deinit_srtp(snd);
+    rtp_sender_dealloc(snd);
+
+    fclose(dict);
   } else  { /* prog_type == receiver */
     rtp_receiver_t rcvr;
         
@@ -466,12 +496,14 @@
     }
 
     /* get next word and loop */
-    while (1) {
+    while (!interrupted) {
       len = MAX_WORD_LEN;
       if (rtp_recvfrom(rcvr, word, &len) > -1)
-	printf("\tword: %s", word);
+	printf("\tword: %s\n", word);
     }
       
+    rtp_receiver_deinit_srtp(rcvr);
+    rtp_receiver_dealloc(rcvr);
   } 
 
   if (ADDR_IS_MULTICAST(rcvr_addr.s_addr)) {
@@ -479,6 +511,22 @@
   }
 
 #ifdef RTPW_USE_WINSOCK2
+  ret = closesocket(sock);
+#else
+  ret = close(sock);
+#endif
+  if (ret < 0) {
+    fprintf(stderr, "%s: Failed to close socket", argv[0]);
+    perror("");
+  }
+
+  status = srtp_shutdown();
+  if (status) {
+    printf("error: srtp shutdown failed with error code %d\n", status);
+    exit(1);
+  }
+
+#ifdef RTPW_USE_WINSOCK2
   WSACleanup();
 #endif
 
@@ -517,3 +565,41 @@
   }
 }
 
+void handle_signal(int signum)
+{
+  interrupted = 1;
+  /* Reset handler explicitly, in case we don't have sigaction() (and signal()
+     has BSD semantics), or we don't have SA_RESETHAND */
+  signal(signum, SIG_DFL);
+}
+
+int setup_signal_handler(char* name)
+{
+#if HAVE_SIGACTION
+  struct sigaction act;
+  memset(&act, 0, sizeof(act));
+
+  act.sa_handler = handle_signal;
+  sigemptyset(&act.sa_mask);
+#if defined(SA_RESETHAND)
+  act.sa_flags = SA_RESETHAND;
+#else
+  act.sa_flags = 0;
+#endif
+  /* Note that we're not setting SA_RESTART; we want recvfrom to return
+   * EINTR when we signal the receiver. */
+  
+  if (sigaction(SIGTERM, &act, NULL) != 0) {
+    fprintf(stderr, "%s: error setting up signal handler", name);
+    perror("");
+    return -1;
+  }
+#else
+  if (signal(SIGTERM, handle_signal) == SIG_ERR) {
+    fprintf(stderr, "%s: error setting up signal handler", name);
+    perror("");
+    return -1;
+  }
+#endif
+  return 0;
+}
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/test/rtpw_test.sh zorg/third_party/srtp/test/rtpw_test.sh
--- original/third_party/srtp/test/rtpw_test.sh	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/test/rtpw_test.sh	2010-11-26 16:21:58.352995000 +0100
@@ -4,7 +4,7 @@
 # 
 # tests the rtpw sender and receiver functions
 
-RTPW=rtpw
+RTPW=./rtpw
 DEST_PORT=9999
 DURATION=3
 
@@ -18,7 +18,7 @@
 # they are killed, those processes will linger.  Re-running the script
 # will get rid of them.
 
-killall rtpw 2&>/dev/null
+killall rtpw 2>/dev/null
 
 if test -x $RTPW; then
 
@@ -63,6 +63,9 @@
 kill $receiver_pid
 kill $sender_pid
 
+wait $receiver_pid
+wait $sender_pid
+
 echo $0 ": done (test passed)"
 
 else 
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/third_party/srtp/test/srtp_driver.c zorg/third_party/srtp/test/srtp_driver.c
--- original/third_party/srtp/test/srtp_driver.c	2008-01-23 21:17:42.299488000 +0100
+++ zorg/third_party/srtp/test/srtp_driver.c	2010-11-26 16:21:58.352995000 +0100
@@ -63,9 +63,15 @@
 srtp_validate(void);
 
 err_status_t
+srtp_validate_aes_256(void);
+
+err_status_t
 srtp_create_big_policy(srtp_policy_t **list);
 
 err_status_t
+srtp_dealloc_big_policy(srtp_policy_t *list);
+
+err_status_t
 srtp_test_remove_stream(void);
 
 double
@@ -138,7 +144,7 @@
 
 int
 main (int argc, char *argv[]) {
-  char q;
+  int q;
   unsigned do_timing_test    = 0;
   unsigned do_rejection_test = 0;
   unsigned do_codec_timing   = 0;
@@ -153,7 +159,7 @@
   if (sizeof(srtp_hdr_t) != 12) {
      printf("error: srtp_hdr_t has incorrect size"
 	    "(size is %ld bytes, expected 12)\n", 
-	    sizeof(srtp_hdr_t));
+	    (long)sizeof(srtp_hdr_t));
     exit(1);
   }
 
@@ -253,6 +259,11 @@
       printf("failed\n");
       exit(1);
     }
+    status = srtp_dealloc_big_policy(big_policy);
+    if (status) {
+      printf("unexpected failure with error code %d\n", status);
+      exit(1);
+    }
 
     /* run test on wildcard policy */
     printf("testing srtp_protect and srtp_unprotect on "
@@ -278,6 +289,19 @@
     }
 
     /*
+     * run validation test against the reference packets for
+     * AES-256
+     */
+    printf("testing srtp_protect and srtp_unprotect against "
+	   "reference packets (AES-256)\n");
+    if (srtp_validate_aes_256() == err_status_ok) 
+      printf("passed\n\n");
+    else {
+      printf("failed\n");
+       exit(1); 
+    }
+
+    /*
      * test the function srtp_remove_stream()
      */
     printf("testing srtp_remove_stream()...");
@@ -321,6 +345,9 @@
     policy.ssrc.type  = ssrc_specific;
     policy.ssrc.value = 0xdecafbad;
     policy.key  = test_key;
+    policy.ekt = NULL;
+    policy.window_size = 128;
+    policy.allow_repeat_tx = 0;
     policy.next = NULL;
 
     printf("mips estimate: %e\n", mips);
@@ -353,6 +380,12 @@
 	   srtp_bits_per_second(640, &policy) / .02 );
   }
 
+  status = srtp_shutdown();
+  if (status) {
+    printf("error: srtp shutdown failed with error code %d\n", status);
+    exit(1);
+  }
+
   return 0;  
 }
 
@@ -492,7 +525,6 @@
   
   timer = clock();
   for (i=0; i < num_trials; i++) {
-    err_status_t status;
     len = msg_len_octets + 12;  /* add in rtp header length */
     
     /* srtp protect message */
@@ -503,12 +535,21 @@
     }
 
     /* increment message number */
-    mesg->seq = htons(ntohs(mesg->seq) + 1);
-
+    {
+      /* hack sequence to avoid problems with macros for htons/ntohs on some systems */
+      short new_seq = ntohs(mesg->seq) + 1;
+      mesg->seq = htons(new_seq);
+    }
   }
   timer = clock() - timer;
 
   free(mesg);
+
+  status = srtp_dealloc(srtp);
+  if (status) {
+    printf("error: srtp_dealloc() failed with error code %d\n", status);
+    exit(1);
+  }
   
   return (double) (msg_len_octets) * 8 *
                   num_trials * CLOCKS_PER_SEC / timer;   
@@ -549,7 +590,13 @@
   timer = clock() - timer;
 
   free(mesg);
-  
+
+  status = srtp_dealloc(srtp);
+  if (status) {
+    printf("error: srtp_dealloc() failed with error code %d\n", status);
+    exit(1);
+  }
+
   return (double) num_trials * CLOCKS_PER_SEC / timer;   
 }
 
@@ -678,8 +725,11 @@
    * the compiler would fret about the constness of the policy
    */
   rcvr_policy = (srtp_policy_t*) malloc(sizeof(srtp_policy_t));
-  if (rcvr_policy == NULL)
+  if (rcvr_policy == NULL) {
+    free(hdr);
+    free(hdr2);
     return err_status_alloc_fail;
+  }
   memcpy(rcvr_policy, policy, sizeof(srtp_policy_t));
   if (policy->ssrc.type == ssrc_any_outbound) {
     rcvr_policy->ssrc.type = ssrc_any_inbound;       
@@ -701,6 +751,7 @@
   if (status) {
     free(hdr);
     free(hdr2);
+    free(rcvr_policy);
     return status;
   }
 
@@ -721,6 +772,7 @@
       printf("failed with error code %d\n", status);
       free(hdr); 
       free(hdr2);
+      free(rcvr_policy);
       return status;
     } else {
       printf("passed\n");
@@ -746,6 +798,7 @@
       printf("failed\n");
       free(hdr); 
       free(hdr2);
+      free(rcvr_policy);
       return status;
     } else {
       printf("passed\n");
@@ -758,6 +811,7 @@
 
   free(hdr);
   free(hdr2);
+  free(rcvr_policy);
   return err_status_ok;
 }
 
@@ -900,6 +954,7 @@
   if (status) {
     free(hdr);
     free(hdr2);
+    free(rcvr_policy);
     return status;
   }
 
@@ -920,6 +975,7 @@
       printf("failed with error code %d\n", status);
       free(hdr); 
       free(hdr2);
+      free(rcvr_policy);
       return status;
     } else {
       printf("passed\n");
@@ -945,6 +1001,7 @@
       printf("failed\n");
       free(hdr); 
       free(hdr2);
+      free(rcvr_policy);
       return status;
     } else {
       printf("passed\n");
@@ -957,6 +1014,7 @@
 
   free(hdr);
   free(hdr2);
+  free(rcvr_policy);
   return err_status_ok;
 }
 
@@ -989,14 +1047,18 @@
 	   "# rtp services:  %s\r\n" 
            "# rtcp cipher:   %s\r\n"
 	   "# rtcp auth:     %s\r\n"
-	   "# rtcp services: %s\r\n",
+	   "# rtcp services: %s\r\n"
+	   "# window size:   %lu\r\n"
+	   "# tx rtx allowed:%s\r\n",
 	   direction[stream->direction],
 	   stream->rtp_cipher->type->description,
 	   stream->rtp_auth->type->description,
 	   serv_descr[stream->rtp_services],
 	   stream->rtcp_cipher->type->description,
 	   stream->rtcp_auth->type->description,
-	   serv_descr[stream->rtcp_services]);
+	   serv_descr[stream->rtcp_services],
+	   rdbx_get_window_size(&stream->rtp_rdbx),
+	   stream->allow_repeat_tx ? "true" : "false");
   }
 
   /* loop over streams in session, printing the policy of each */
@@ -1011,14 +1073,18 @@
 	   "# rtp services:  %s\r\n" 
            "# rtcp cipher:   %s\r\n"
 	   "# rtcp auth:     %s\r\n"
-	   "# rtcp services: %s\r\n",
+	   "# rtcp services: %s\r\n"
+	   "# window size:   %lu\r\n"
+	   "# tx rtx allowed:%s\r\n",
 	   stream->ssrc,
 	   stream->rtp_cipher->type->description,
 	   stream->rtp_auth->type->description,
 	   serv_descr[stream->rtp_services],
 	   stream->rtcp_cipher->type->description,
 	   stream->rtcp_auth->type->description,
-	   serv_descr[stream->rtcp_services]);
+	   serv_descr[stream->rtcp_services],
+	   rdbx_get_window_size(&stream->rtp_rdbx),
+	   stream->allow_repeat_tx ? "true" : "false");
 
     /* advance to next stream in the list */
     stream = stream->next;
@@ -1108,7 +1174,7 @@
 double
 mips_estimate(int num_trials, int *ignore) {
   clock_t t;
-  int i, sum;
+  volatile int i, sum;
 
   sum = 0;
   t = clock();
@@ -1132,12 +1198,6 @@
 
 err_status_t
 srtp_validate() {
-  unsigned char test_key[30] = {
-    0xe1, 0xf9, 0x7a, 0x0d, 0x3e, 0x01, 0x8b, 0xe0,
-    0xd6, 0x4f, 0xa3, 0x2c, 0x06, 0xde, 0x41, 0x39,
-    0x0e, 0xc6, 0x75, 0xad, 0x49, 0x8a, 0xfe, 0xeb,
-    0xb6, 0x96, 0x0b, 0x3a, 0xab, 0xe6
-  };
   uint8_t srtp_plaintext_ref[28] = {
     0x80, 0x0f, 0x12, 0x34, 0xde, 0xca, 0xfb, 0xad, 
     0xca, 0xfe, 0xba, 0xbe, 0xab, 0xab, 0xab, 0xab,
@@ -1172,6 +1232,117 @@
   policy.ssrc.type  = ssrc_specific;
   policy.ssrc.value = 0xcafebabe;
   policy.key  = test_key;
+  policy.ekt = NULL;
+  policy.window_size = 128;
+  policy.allow_repeat_tx = 0;
+  policy.next = NULL;
+
+  status = srtp_create(&srtp_snd, &policy);
+  if (status)
+    return status;
+ 
+  /* 
+   * protect plaintext, then compare with ciphertext 
+   */
+  len = 28;
+  status = srtp_protect(srtp_snd, srtp_plaintext, &len);
+  if (status || (len != 38))
+    return err_status_fail;
+
+  debug_print(mod_driver, "ciphertext:\n  %s", 	      
+	      octet_string_hex_string(srtp_plaintext, len));
+  debug_print(mod_driver, "ciphertext reference:\n  %s", 	      
+	      octet_string_hex_string(srtp_ciphertext, len));
+
+  if (octet_string_is_eq(srtp_plaintext, srtp_ciphertext, len))
+    return err_status_fail;
+  
+  /*
+   * create a receiver session context comparable to the one created
+   * above - we need to do this so that the replay checking doesn't
+   * complain
+   */
+  status = srtp_create(&srtp_recv, &policy);
+  if (status)
+    return status;
+
+  /*
+   * unprotect ciphertext, then compare with plaintext 
+   */
+  status = srtp_unprotect(srtp_recv, srtp_ciphertext, &len);
+  if (status || (len != 28))
+    return status;
+  
+  if (octet_string_is_eq(srtp_ciphertext, srtp_plaintext_ref, len))
+    return err_status_fail;
+
+  status = srtp_dealloc(srtp_snd);
+  if (status)
+    return status;
+
+  status = srtp_dealloc(srtp_recv);
+  if (status)
+    return status;
+
+  return err_status_ok;
+}
+
+
+/*
+ * srtp_validate_aes_256() verifies the correctness of libsrtp by comparing
+ * some computed packets against some pre-computed reference values.
+ * These packets were made with the AES-CM-256/HMAC-SHA-1-80 policy.
+ */
+
+
+err_status_t
+srtp_validate_aes_256() {
+  unsigned char aes_256_test_key[46] = {
+    0xf0, 0xf0, 0x49, 0x14, 0xb5, 0x13, 0xf2, 0x76,
+    0x3a, 0x1b, 0x1f, 0xa1, 0x30, 0xf1, 0x0e, 0x29,
+    0x98, 0xf6, 0xf6, 0xe4, 0x3e, 0x43, 0x09, 0xd1,
+    0xe6, 0x22, 0xa0, 0xe3, 0x32, 0xb9, 0xf1, 0xb6,
+
+    0x3b, 0x04, 0x80, 0x3d, 0xe5, 0x1e, 0xe7, 0xc9,
+    0x64, 0x23, 0xab, 0x5b, 0x78, 0xd2
+  };
+  uint8_t srtp_plaintext_ref[28] = {
+    0x80, 0x0f, 0x12, 0x34, 0xde, 0xca, 0xfb, 0xad, 
+    0xca, 0xfe, 0xba, 0xbe, 0xab, 0xab, 0xab, 0xab,
+    0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 
+    0xab, 0xab, 0xab, 0xab
+  };
+  uint8_t srtp_plaintext[38] = {
+    0x80, 0x0f, 0x12, 0x34, 0xde, 0xca, 0xfb, 0xad, 
+    0xca, 0xfe, 0xba, 0xbe, 0xab, 0xab, 0xab, 0xab,
+    0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 
+    0xab, 0xab, 0xab, 0xab, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+  };
+  uint8_t srtp_ciphertext[38] = {
+    0x80, 0x0f, 0x12, 0x34, 0xde, 0xca, 0xfb, 0xad, 
+    0xca, 0xfe, 0xba, 0xbe, 0xf1, 0xd9, 0xde, 0x17, 
+    0xff, 0x25, 0x1f, 0xf1, 0xaa, 0x00, 0x77, 0x74, 
+    0xb0, 0xb4, 0xb4, 0x0d, 0xa0, 0x8d, 0x9d, 0x9a, 
+    0x5b, 0x3a, 0x55, 0xd8, 0x87, 0x3b
+  };
+  srtp_t srtp_snd, srtp_recv;
+  err_status_t status;
+  int len;
+  srtp_policy_t policy;
+  
+  /*
+   * create a session with a single stream using the default srtp
+   * policy and with the SSRC value 0xcafebabe
+   */
+  crypto_policy_set_aes_cm_256_hmac_sha1_80(&policy.rtp);
+  crypto_policy_set_aes_cm_256_hmac_sha1_80(&policy.rtcp);
+  policy.ssrc.type  = ssrc_specific;
+  policy.ssrc.value = 0xcafebabe;
+  policy.key  = aes_256_test_key;
+  policy.ekt = NULL;
+  policy.window_size = 128;
+  policy.allow_repeat_tx = 0;
   policy.next = NULL;
 
   status = srtp_create(&srtp_snd, &policy);
@@ -1213,6 +1384,14 @@
   if (octet_string_is_eq(srtp_ciphertext, srtp_plaintext_ref, len))
     return err_status_fail;
 
+  status = srtp_dealloc(srtp_snd);
+  if (status)
+    return status;
+
+  status = srtp_dealloc(srtp_recv);
+  if (status)
+    return status;
+
   return err_status_ok;
 }
 
@@ -1250,9 +1429,22 @@
 }
 
 err_status_t
+srtp_dealloc_big_policy(srtp_policy_t *list) {
+  srtp_policy_t *p, *next;
+
+  for (p = list; p != NULL; p = next) {
+    next = p->next;
+    free(p);
+  }
+
+  return err_status_ok;
+}
+
+
+err_status_t
 srtp_test_remove_stream() { 
   err_status_t status;
-  srtp_policy_t *policy_list;
+  srtp_policy_t *policy_list, policy;
   srtp_t session;
   srtp_stream_t stream;
   /* 
@@ -1293,6 +1485,41 @@
   if (stream == NULL)
     return err_status_fail;  
 
+  status = srtp_dealloc(session);
+  if (status != err_status_ok)
+    return status;
+
+  status = srtp_dealloc_big_policy(policy_list);
+  if (status != err_status_ok)
+    return status;
+
+  /* Now test adding and removing a single stream */
+  crypto_policy_set_rtp_default(&policy.rtp);
+  crypto_policy_set_rtcp_default(&policy.rtcp);
+  policy.ssrc.type  = ssrc_specific;
+  policy.ssrc.value = 0xcafebabe;
+  policy.key  = test_key;
+  policy.ekt = NULL;
+  policy.window_size = 128;
+  policy.allow_repeat_tx = 0;
+  policy.next = NULL;
+
+  status = srtp_create(&session, NULL);
+  if (status != err_status_ok)
+    return status;
+  
+  status = srtp_add_stream(session, &policy);
+  if (status != err_status_ok)
+    return status;
+
+  status = srtp_remove_stream(session, htonl(0xcafebabe));
+  if (status != err_status_ok)
+    return status;
+
+  status = srtp_dealloc(session);
+  if (status != err_status_ok)
+    return status;
+
   return err_status_ok;  
 }
 
@@ -1327,6 +1554,9 @@
     sec_serv_conf_and_auth  /* security services flag      */
   },
   test_key,
+  NULL,        /* indicates that EKT is not in use */
+  128,         /* replay window size */
+  0,           /* retransmission not allowed */
   NULL
 };
 
@@ -1349,6 +1579,9 @@
     sec_serv_conf_and_auth  /* security services flag      */
   },
   test_key,
+  NULL,        /* indicates that EKT is not in use */
+  128,         /* replay window size */
+  0,           /* retransmission not allowed */
   NULL
 };
 
@@ -1371,6 +1604,9 @@
     sec_serv_auth           /* security services flag      */
   },
   test_key,
+  NULL,        /* indicates that EKT is not in use */
+  128,         /* replay window size */
+  0,           /* retransmission not allowed */
   NULL
 };
 
@@ -1393,6 +1629,9 @@
     sec_serv_conf           /* security services flag      */
   },
   test_key,
+  NULL,        /* indicates that EKT is not in use */
+  128,         /* replay window size */
+  0,           /* retransmission not allowed */
   NULL
 };
 
@@ -1415,6 +1654,9 @@
     sec_serv_auth           /* security services flag      */
   },
   test_key,
+  NULL,        /* indicates that EKT is not in use */
+  128,         /* replay window size */
+  0,           /* retransmission not allowed */
   NULL
 };
 
@@ -1437,6 +1679,83 @@
     sec_serv_none           /* security services flag      */  
   },
   test_key,
+  NULL,        /* indicates that EKT is not in use */
+  128,         /* replay window size */
+  0,           /* retransmission not allowed */
+  NULL
+};
+
+unsigned char test_256_key[46] = {
+	0xf0, 0xf0, 0x49, 0x14, 0xb5, 0x13, 0xf2, 0x76,
+	0x3a, 0x1b, 0x1f, 0xa1, 0x30, 0xf1, 0x0e, 0x29,
+	0x98, 0xf6, 0xf6, 0xe4, 0x3e, 0x43, 0x09, 0xd1,
+	0xe6, 0x22, 0xa0, 0xe3, 0x32, 0xb9, 0xf1, 0xb6,
+
+	0x3b, 0x04, 0x80, 0x3d, 0xe5, 0x1e, 0xe7, 0xc9,
+	0x64, 0x23, 0xab, 0x5b, 0x78, 0xd2
+};
+
+const srtp_policy_t aes_256_hmac_policy = {
+  { ssrc_any_outbound, 0 },  /* SSRC                           */
+  {                      /* SRTP policy                    */                  
+    AES_ICM,                /* cipher type                 */
+    46,                     /* cipher key length in octets */
+    HMAC_SHA1,              /* authentication func type    */
+    20,                     /* auth key length in octets   */
+    10,                     /* auth tag length in octets   */
+    sec_serv_conf_and_auth  /* security services flag      */
+  },
+  {                      /* SRTCP policy                   */
+    AES_ICM,                /* cipher type                 */
+    46,                     /* cipher key length in octets */
+    HMAC_SHA1,              /* authentication func type    */
+    20,                     /* auth key length in octets   */
+    10,                     /* auth tag length in octets   */
+    sec_serv_conf_and_auth  /* security services flag      */
+  },
+  test_256_key,
+  NULL,        /* indicates that EKT is not in use */
+  128,         /* replay window size */
+  0,           /* retransmission not allowed */
+  NULL
+};
+
+uint8_t ekt_test_key[16] = {
+  0x77, 0x26, 0x9d, 0xac, 0x16, 0xa3, 0x28, 0xca, 
+  0x8e, 0xc9, 0x68, 0x4b, 0xcc, 0xc4, 0xd2, 0x1b
+};
+
+#include "ekt.h"
+
+ekt_policy_ctx_t ekt_test_policy = {
+  0xa5a5,                   /* SPI */
+  EKT_CIPHER_AES_128_ECB,
+  ekt_test_key,
+  NULL
+};
+
+const srtp_policy_t hmac_only_with_ekt_policy = {
+  { ssrc_any_outbound, 0 },     /* SSRC                        */
+  {
+    NULL_CIPHER,            /* cipher type                 */
+    0,                      /* cipher key length in octets */
+    HMAC_SHA1,              /* authentication func type    */
+    20,                     /* auth key length in octets   */
+    4,                      /* auth tag length in octets   */
+    sec_serv_auth           /* security services flag      */
+  },  
+  {
+    NULL_CIPHER,            /* cipher type                 */
+    0,                      /* cipher key length in octets */
+    HMAC_SHA1,              /* authentication func type    */
+    20,                     /* auth key length in octets   */
+    4,                      /* auth tag length in octets   */
+    sec_serv_auth           /* security services flag      */
+  },
+  test_key,
+  &ekt_test_policy,        /* indicates that EKT is not in use */
+  128,                     /* replay window size */
+  0,                       /* retransmission not allowed */
   NULL
 };
 
@@ -1465,6 +1784,8 @@
 #endif
   &default_policy,
   &null_policy,
+  &aes_256_hmac_policy,
+  &hmac_only_with_ekt_policy,
   NULL
 };
 
@@ -1487,5 +1808,8 @@
     sec_serv_conf_and_auth  /* security services flag      */
   },
   test_key,
+  NULL,
+  128,                   /* replay window size */
+  0,                     /* retransmission not allowed */
   NULL
 };
diff -u -r -N -d --strip-trailing-cr -I '\$Id:.*\$' -I '\$Id\$' original/pjmedia/build/pjmedia.vcproj zorg/pjmedia/build/pjmedia.vcproj
--- original/pjmedia/build/pjmedia.vcproj	2010-11-30 16:18:38.257747800 +0100
+++ zorg/pjmedia/build/pjmedia.vcproj	2010-11-30 16:23:20.755396200 +0100
@@ -58,7 +58,7 @@
 			<Tool
 				Name="VCCLCompilerTool"
 				PreprocessorDefinitions="_LIB;"
-				AdditionalIncludeDirectories="../include;../../pjlib/include;&quot;../../pjlib-util/include&quot;;../../pjnath/include;../../third_party/portaudio/include;../../third_party/speex/include;../../third_party/build/srtp;../../third_party/srtp/include;../../third_party/srtp/crypto/include;../..;&quot;$(DXSDK_DIR)include&quot;"
+				AdditionalIncludeDirectories="../include;../../pjlib/include;&quot;../../pjlib-util/include&quot;;../../pjnath/include;../../third_party/portaudio/include;../../third_party/speex/include;../../third_party/build/srtp;../../third_party/srtp/include;../../third_party/srtp/crypto/include;../../third_party/build/zorg/include;../../third_party/zorg/include;../..;&quot;$(DXSDK_DIR)include&quot;"
 				PrecompiledHeaderFile=""
 			/>
 			<Tool
@@ -247,7 +247,7 @@
 			<Tool
 				Name="VCCLCompilerTool"
 				PreprocessorDefinitions="_LIB;"
-				AdditionalIncludeDirectories="../include;../../pjlib/include;&quot;../../pjlib-util/include&quot;;../../pjnath/include;../../third_party/portaudio/include;../../third_party/speex/include;../../third_party/build/srtp;../../third_party/srtp/include;../../third_party/srtp/crypto/include;../..;&quot;$(DXSDK_DIR)include&quot;"
+				AdditionalIncludeDirectories="../include;../../pjlib/include;&quot;../../pjlib-util/include&quot;;../../pjnath/include;../../third_party/portaudio/include;../../third_party/speex/include;../../third_party/build/srtp;../../third_party/srtp/include;../../third_party/srtp/crypto/include;../../third_party/build/zorg/include;../../third_party/zorg/include;../..;&quot;$(DXSDK_DIR)include&quot;"
 				PrecompiledHeaderFile=""
 			/>
 			<Tool
@@ -436,7 +436,7 @@
 			<Tool
 				Name="VCCLCompilerTool"
 				PreprocessorDefinitions="_LIB;"
-				AdditionalIncludeDirectories="../include;../../pjlib/include;&quot;../../pjlib-util/include&quot;;../../pjnath/include;../../third_party/portaudio/include;../../third_party/speex/include;../../third_party/build/srtp;../../third_party/srtp/include;../../third_party/srtp/crypto/include;../..;&quot;$(DXSDK_DIR)include&quot;"
+				AdditionalIncludeDirectories="../include;../../pjlib/include;&quot;../../pjlib-util/include&quot;;../../pjnath/include;../../third_party/portaudio/include;../../third_party/speex/include;../../third_party/build/srtp;../../third_party/srtp/include;../../third_party/srtp/crypto/include;../../third_party/build/zorg/include;../../third_party/zorg/include;../..;&quot;$(DXSDK_DIR)include&quot;"
 				PrecompiledHeaderFile=""
 			/>
 			<Tool
@@ -625,7 +625,7 @@
 			<Tool
 				Name="VCCLCompilerTool"
 				PreprocessorDefinitions="_LIB;"
-				AdditionalIncludeDirectories="../include;../../pjlib/include;&quot;../../pjlib-util/include&quot;;../../pjnath/include;../../third_party/portaudio/include;../../third_party/speex/include;../../third_party/build/srtp;../../third_party/srtp/include;../../third_party/srtp/crypto/include;../..;&quot;$(DXSDK_DIR)include&quot;"
+				AdditionalIncludeDirectories="../include;../../pjlib/include;&quot;../../pjlib-util/include&quot;;../../pjnath/include;../../third_party/portaudio/include;../../third_party/speex/include;../../third_party/build/srtp;../../third_party/srtp/include;../../third_party/srtp/crypto/include;../../third_party/build/zorg/include;../../third_party/zorg/include;../..;&quot;$(DXSDK_DIR)include&quot;"
 				PrecompiledHeaderFile=""
 			/>
 			<Tool
@@ -814,7 +814,7 @@
 			<Tool
 				Name="VCCLCompilerTool"
 				PreprocessorDefinitions="_LIB;"
-				AdditionalIncludeDirectories="../include;../../pjlib/include;&quot;../../pjlib-util/include&quot;;../../pjnath/include;../../third_party/portaudio/include;../../third_party/speex/include;../../third_party/build/srtp;../../third_party/srtp/include;../../third_party/srtp/crypto/include;../..;&quot;$(DXSDK_DIR)include&quot;"
+				AdditionalIncludeDirectories="../include;../../pjlib/include;&quot;../../pjlib-util/include&quot;;../../pjnath/include;../../third_party/portaudio/include;../../third_party/speex/include;../../third_party/build/srtp;../../third_party/srtp/include;../../third_party/srtp/crypto/include;../../third_party/build/zorg/include;../../third_party/zorg/include;../..;&quot;$(DXSDK_DIR)include&quot;"
 				PrecompiledHeaderFile=""
 			/>
 			<Tool
@@ -1003,7 +1003,7 @@
 			<Tool
 				Name="VCCLCompilerTool"
 				PreprocessorDefinitions="_LIB;"
-				AdditionalIncludeDirectories="../include;../../pjlib/include;&quot;../../pjlib-util/include&quot;;../../pjnath/include;../../third_party/portaudio/include;../../third_party/speex/include;../../third_party/build/srtp;../../third_party/srtp/include;../../third_party/srtp/crypto/include;../..;&quot;$(DXSDK_DIR)include&quot;"
+				AdditionalIncludeDirectories="../include;../../pjlib/include;&quot;../../pjlib-util/include&quot;;../../pjnath/include;../../third_party/portaudio/include;../../third_party/speex/include;../../third_party/build/srtp;../../third_party/srtp/include;../../third_party/srtp/crypto/include;../../third_party/build/zorg/include;../../third_party/zorg/include;../..;&quot;$(DXSDK_DIR)include&quot;"
 				PrecompiledHeaderFile=""
 			/>
 			<Tool
@@ -4663,6 +4663,10 @@
 				>
 			</File>
 			<File
+				RelativePath="..\src\pjmedia\transport_zrtp.c"
+				>
+			</File>
+			<File
 				RelativePath="..\src\pjmedia\transport_udp.c"
 				>
 				<FileConfiguration
@@ -5122,6 +5126,10 @@
 				>
 			</File>
 			<File
+				RelativePath="..\include\pjmedia\transport_zrtp.h"
+				>
+			</File>
+			<File
 				RelativePath="..\include\pjmedia\transport_udp.h"
 				>
 			</File>
